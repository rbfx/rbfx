name: Build
on:
  push:
    branches-ignore:
      - 'no-ci-**'
      - 'skip-ci-**'
  pull_request:

env:
  # common settings
  URHO3D_ENABLE_ALL: ON
  URHO3D_SAMPLES: ON
  URHO3D_TESTING: ON
  DOTNET_VERSION: 5.0.x
  CMAKE_VERSION: 3.19.x
  # ccache configuration
  ccache_prefix: ${{ secrets.CACHE_VERSION }}-master
  CCACHE_DIR: ${{ github.workspace }}/.ccache
  CCACHE_COMPRESS: true
  CCACHE_COMPRESSLEVEL: 9
  # clcache configuration
  CLCACHE_DIR: ${{ github.workspace }}\.ccache            # Intentionally same as CCACHE_DIR
  CLCACHE_COMPRESS: true
  CLACHE_COMPRESSLEVEL: 9
  # paths
  ci_source_dir: ${{ github.workspace }}/source-code
  ci_build_script: ./source-code/script/ci_build.sh
  ci_build_dir: ${{ github.workspace }}/cmake-build
  ci_sdk_dir: ${{ github.workspace }}/SDK

jobs:
  CheckSkipCI:
    runs-on: ubuntu-latest
    if: |
      !contains(github.event.head_commit.message, '[skip ci]') &&
      !contains(github.event.pull_request.title, '[skip ci]') &&
      !contains(github.event.head_commit.message, '[skip-ci]') &&
      !contains(github.event.pull_request.title, '[skip-ci]')
    steps:
      - run: exit 0

  notifications:
    name: Discord Commits
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Discord Commits
        uses: dearimgui/github_discord_notifier@latest
        with:
          discord-webhook: ${{ secrets.DISCORD_WEBHOOK_COMMITS }}
          github-token: ${{ github.token }}
          action-task: discord-commits
          discord-filter: "'{{ github.branch }}' == 'master'"
          discord-username: GitHub

  Windows:
    runs-on: windows-latest
    needs: [CheckSkipCI]

    strategy:
      fail-fast: false
      matrix:
        ci_arch:
          - x64
          - x86
        ci_lib_type:
          - dll
          - lib
        ci_build_type:
          - dbg
          - rel
        ci_compiler:
          - msvc
          - mingw

    env:
      ci_platform: windows
      ci_arch: ${{ matrix.ci_arch }}
      ci_lib_type: ${{ matrix.ci_lib_type }}
      ci_build_type: ${{ matrix.ci_build_type }}
      ci_compiler: ${{ matrix.ci_compiler }}

    steps:
      - uses: actions/checkout@v2
        with:
          path: ${{ env.ci_source_dir }}
          fetch-depth: 1

      - name: Build Cache
        uses: actions/cache@v2
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ env.ccache_prefix }}-${{ github.job }}-${{ matrix.ci_arch }}-${{ matrix.ci_lib_type }}-${{ matrix.ci_build_type }}-${{ matrix.ci_compiler }}-${{ hashFiles('**/source-code/Source/**') }}
          restore-keys: |
            ${{ env.ccache_prefix }}-${{ github.job }}-${{ matrix.ci_arch }}-${{ matrix.ci_lib_type }}-${{ matrix.ci_build_type }}-${{ matrix.ci_compiler }}

      - name: Setup dotnet
        uses: actions/setup-dotnet@v1
        if: matrix.ci_lib_type == 'dll'
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Setup cmake
        # FIXME: CMake installed by this action fails with MinGW because it can find 'C:/Program Files/Git/usr/bin/sh.exe' on PATH.
        if: matrix.ci_compiler != 'mingw'
        uses: jwlawson/actions-setup-cmake@v1.8
        with:
          cmake-version: '${{ env.CMAKE_VERSION }}'

      - name: Dependencies
        shell: bash
        run: ${{ env.ci_build_script }} dependencies

      - name: Generate
        shell: bash
        run: ${{ env.ci_build_script }} generate

      - name: Build
        shell: bash
        run: ${{ env.ci_build_script }} build-${{ env.ci_compiler }}

      - name: Install
        shell: bash
        run: ${{ env.ci_build_script }} install

      - name: Run Tests
        shell: bash
        env:
          CTEST_OUTPUT_ON_FAILURE: 1
        if: matrix.ci_compiler == 'msvc' && matrix.ci_build_type == 'rel'
        working-directory: ${{ env.ci_build_dir }}/Source/Tests
        run: ctest -C Release

      - uses: actions/upload-artifact@v2
        if: github.ref == 'refs/heads/master' && matrix.ci_build_type == 'rel'
        with:
          name: 'rbfx-${{ github.job }}-${{ matrix.ci_arch }}-${{ matrix.ci_build_type }}-${{ github.sha }}'
          path: ${{ env.ci_sdk_dir }}

  UWP:
    runs-on: windows-latest
    needs: [CheckSkipCI]

    strategy:
      fail-fast: false
      matrix:
        ci_arch:
          - x64
          - arm
          - arm64
        ci_lib_type:
          - dll
          - lib
        ci_build_type:
          - dbg
          - rel
        ci_compiler:
          - msvc

    env:
      ci_platform: uwp
      ci_arch: ${{ matrix.ci_arch }}
      ci_lib_type: ${{ matrix.ci_lib_type }}
      ci_build_type: ${{ matrix.ci_build_type }}
      ci_compiler: ${{ matrix.ci_compiler }}

    steps:
      - uses: actions/checkout@v2
        with:
          path: ${{ env.ci_source_dir }}
          fetch-depth: 1

      - name: Build Cache
        uses: actions/cache@v2
        with:
          path: ${{ env.CLCACHE_DIR }}
          key: ${{ env.ccache_prefix }}-${{ github.job }}-${{ matrix.ci_arch }}-${{ matrix.ci_lib_type }}-${{ matrix.ci_build_type }}-${{ hashFiles('**/source-code/Source/**') }}
          restore-keys: |
            ${{ env.ccache_prefix }}-${{ github.job }}-${{ matrix.ci_arch }}-${{ matrix.ci_lib_type }}-${{ matrix.ci_build_type }}

      - name: Setup dotnet
        uses: actions/setup-dotnet@v1
        if: matrix.ci_lib_type == 'dll'
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v1.8
        with:
          cmake-version: '${{ env.CMAKE_VERSION }}'

      - name: Dependencies
        shell: bash
        run: ${{ env.ci_build_script }} dependencies

      - name: Generate
        shell: bash
        run: ${{ env.ci_build_script }} generate

      - name: Build
        shell: bash
        run: ${{ env.ci_build_script }} build-${{ env.ci_compiler }}

      - name: Install
        shell: bash
        run: ${{ env.ci_build_script }} install

      - uses: actions/upload-artifact@v2
        if: github.ref == 'refs/heads/master' && matrix.ci_build_type == 'rel'
        with:
          name: 'rbfx-${{ github.job }}-${{ matrix.ci_arch }}-${{ matrix.ci_build_type }}-${{ github.sha }}'
          path: ${{ env.ci_sdk_dir }}

  Linux:
    runs-on: ubuntu-20.04
    needs: [CheckSkipCI]

    strategy:
      fail-fast: false
      matrix:
        ci_arch:
          - x64
          # - x86           # TODO: Build script does not implement this fully.
        ci_lib_type:
          - dll
          - lib
        ci_build_type:
          - dbg
          - rel
        ci_compiler:
          - gcc
          - clang

    env:
      ci_platform: linux
      ci_arch: ${{ matrix.ci_arch }}
      ci_lib_type: ${{ matrix.ci_lib_type }}
      ci_build_type: ${{ matrix.ci_build_type }}
      ci_compiler: ${{ matrix.ci_compiler }}

    steps:
      - uses: actions/checkout@v2
        with:
          path: ${{ env.ci_source_dir }}
          fetch-depth: 1

      - name: Build Cache
        uses: actions/cache@v2
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ env.ccache_prefix }}-${{ github.job }}-${{ matrix.ci_arch }}-${{ matrix.ci_lib_type }}-${{ matrix.ci_build_type }}-${{ matrix.ci_compiler }}-${{ github.sha }}
          restore-keys: |
            ${{ env.ccache_prefix }}-${{ github.job }}-${{ matrix.ci_arch }}-${{ matrix.ci_lib_type }}-${{ matrix.ci_build_type }}-${{ matrix.ci_compiler }}

      - name: Setup dotnet
        uses: actions/setup-dotnet@v1
        if: matrix.ci_lib_type == 'dll'
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v1.8
        with:
          cmake-version: '${{ env.CMAKE_VERSION }}'

      - name: Dependencies
        shell: bash
        run: ${{ env.ci_build_script }} dependencies

      - name: Generate
        shell: bash
        run: ${{ env.ci_build_script }} generate

      - name: Build
        shell: bash
        run: ${{ env.ci_build_script }} build

      - name: Install
        shell: bash
        run: ${{ env.ci_build_script }} install

      - uses: actions/upload-artifact@v2
        if: github.ref == 'refs/heads/master' && matrix.ci_build_type == 'rel'
        with:
          name: 'rbfx-${{ github.job }}-${{ matrix.ci_arch }}-${{ matrix.ci_build_type }}-${{ github.sha }}'
          path: ${{ env.ci_sdk_dir }}

  MacOS:
    runs-on: macos-latest
    needs: [CheckSkipCI]

    strategy:
      fail-fast: false
      matrix:
        ci_arch:
          - x64
          # - x86           # TODO: Untested.
        ci_lib_type:
          - dll
          - lib
        ci_build_type:
          - dbg
          - rel
        ci_compiler:
          - clang

    env:
      ci_platform: macos
      ci_arch: ${{ matrix.ci_arch }}
      ci_lib_type: ${{ matrix.ci_lib_type }}
      ci_build_type: ${{ matrix.ci_build_type }}
      ci_compiler: ${{ matrix.ci_compiler }}

    steps:
      - uses: actions/checkout@v2
        with:
          path: ${{ env.ci_source_dir }}
          fetch-depth: 1

      - name: Build Cache
        uses: actions/cache@v2
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ env.ccache_prefix }}-${{ github.job }}-${{ matrix.ci_arch }}-${{ matrix.ci_lib_type }}-${{ matrix.ci_build_type }}-${{ matrix.ci_compiler }}-${{ github.sha }}
          restore-keys: |
            ${{ env.ccache_prefix }}-${{ github.job }}-${{ matrix.ci_arch }}-${{ matrix.ci_lib_type }}-${{ matrix.ci_build_type }}-${{ matrix.ci_compiler }}

      - name: Bash
        shell: bash
        run: brew install bash

      - name: Setup dotnet
        uses: actions/setup-dotnet@v1
        if: matrix.ci_lib_type == 'dll'
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v1.8
        with:
          cmake-version: '${{ env.CMAKE_VERSION }}'

      - name: Dependencies
        shell: bash
        run: ${{ env.ci_build_script }} dependencies

      - name: Generate
        shell: bash
        run: ${{ env.ci_build_script }} generate

      - name: Build
        shell: bash
        run: ${{ env.ci_build_script }} build

      - name: Install
        shell: bash
        run: ${{ env.ci_build_script }} install

      - uses: actions/upload-artifact@v2
        if: github.ref == 'refs/heads/master' && matrix.ci_build_type == 'rel'
        with:
          name: 'rbfx-${{ github.job }}-${{ matrix.ci_arch }}-${{ matrix.ci_build_type }}-${{ github.sha }}'
          path: ${{ env.ci_sdk_dir }}

  Android:
    runs-on: ubuntu-20.04
    needs: [CheckSkipCI]

    strategy:
      fail-fast: false
      matrix:
        ci_build_type:
          - dbg
          - rel

    env:
      ci_platform: android
      ci_arch: ${{ matrix.ci_arch }}
      ci_lib_type: ${{ matrix.ci_lib_type }}
      ci_build_type: ${{ matrix.ci_build_type }}
      ci_compiler: ${{ matrix.ci_compiler }}

    steps:
      - uses: actions/checkout@v2
        with:
          path: ${{ env.ci_source_dir }}
          fetch-depth: 1

      - name: Build Cache
        uses: actions/cache@v2
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ env.ccache_prefix }}-${{ github.job }}-${{ matrix.ci_build_type }}-${{ github.sha }}
          restore-keys: |
            ${{ env.ccache_prefix }}-${{ github.job }}-${{ matrix.ci_build_type }}

      - name: Setup dotnet
        uses: actions/setup-dotnet@v1
        if: matrix.ci_lib_type == 'dll'
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v1.8
        with:
          cmake-version: '${{ env.CMAKE_VERSION }}'

      - name: Dependencies
        shell: bash
        run: ${{ env.ci_build_script }} dependencies

      - name: Generate
        shell: bash
        run: ${{ env.ci_build_script }} generate

      - name: Build
        shell: bash
        run: ${{ env.ci_build_script }} build-android

      - uses: actions/upload-artifact@v2
        if: github.ref == 'refs/heads/master' && matrix.ci_build_type == 'rel'
        with:
          name: 'rbfx-${{ github.job }}-${{ matrix.build_type }}-${{ github.sha }}'
          path: '**/*.apk'

  iOS:
    runs-on: macos-latest
    needs: [CheckSkipCI]

    strategy:
      fail-fast: false
      matrix:
        ci_lib_type:
          # - dll           # TODO: Linker error failing to find SDL_main.
          - lib
        ci_build_type:
          - dbg
          - rel

    env:
      ci_platform: ios
      ci_arch: ${{ matrix.ci_arch }}
      ci_lib_type: ${{ matrix.ci_lib_type }}
      ci_build_type: ${{ matrix.ci_build_type }}
      ci_compiler: ${{ matrix.ci_compiler }}

    steps:
      - uses: actions/checkout@v2
        with:
          path: ${{ env.ci_source_dir }}
          fetch-depth: 1

      - name: Build Cache
        uses: actions/cache@v2
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ env.ccache_prefix }}-${{ github.job }}-${{ matrix.ci_lib_type }}-${{ matrix.ci_build_type }}-${{ github.sha }}
          restore-keys: |
            ${{ env.ccache_prefix }}-${{ github.job }}-${{ matrix.ci_lib_type }}-${{ matrix.ci_build_type }}

      - name: Setup dotnet
        uses: actions/setup-dotnet@v1
        if: matrix.ci_lib_type == 'dll'
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v1.8
        with:
          cmake-version: '${{ env.CMAKE_VERSION }}'

      - name: Bash
        shell: bash
        run: brew install bash

      - name: Dependencies
        shell: bash
        run: ${{ env.ci_build_script }} dependencies

      - name: Generate
        shell: bash
        run: ${{ env.ci_build_script }} generate

      - name: Build
        shell: bash
        run: ${{ env.ci_build_script }} build

      - uses: actions/upload-artifact@v2
        if: github.ref == 'refs/heads/master' && matrix.ci_build_type == 'rel'
        with:
          name: 'rbfx-${{ github.job }}-${{ matrix.build_type }}-${{ github.sha }}'
          path: '**/*.app'

  Web:
    runs-on: ubuntu-20.04
    needs: [CheckSkipCI]

    strategy:
      fail-fast: false
      matrix:
        ci_lib_type:
          - lib
        ci_build_type:
          - dbg
          - rel

    env:
      ci_platform: web
      ci_arch: ${{ matrix.ci_arch }}
      ci_lib_type: ${{ matrix.ci_lib_type }}
      ci_build_type: ${{ matrix.ci_build_type }}
      ci_compiler: ${{ matrix.ci_compiler }}

    steps:
      - uses: mymindstorm/setup-emsdk@v9
        with:
          version: latest

      - uses: actions/checkout@v2
        with:
          path: ${{ env.ci_source_dir }}
          fetch-depth: 1

      - name: Build Cache
        uses: actions/cache@v2
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ env.ccache_prefix }}-${{ github.job }}-${{ matrix.ci_lib_type }}-${{ matrix.ci_build_type }}-${{ github.sha }}
          restore-keys: |
            ${{ env.ccache_prefix }}-${{ github.job }}-${{ matrix.ci_lib_type }}-${{ matrix.ci_build_type }}

      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v1.8
        with:
          cmake-version: '${{ env.CMAKE_VERSION }}'

      - name: Dependencies
        shell: bash
        run: ${{ env.ci_build_script }} dependencies

      - name: Generate
        shell: bash
        run: ${{ env.ci_build_script }} generate

      - name: Build
        shell: bash
        run: ${{ env.ci_build_script }} build

      - name: Install
        shell: bash
        run: ${{ env.ci_build_script }} install

      - uses: actions/upload-artifact@v2
        if: github.ref == 'refs/heads/master' && matrix.ci_build_type == 'rel'
        with:
          name: 'rbfx-${{ github.job }}-${{ matrix.build_type }}-${{ github.sha }}'
          path: SDK
