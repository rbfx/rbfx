name: Build
on:
  push:
    branches-ignore:
      - 'no-ci-**'
      - 'skip-ci-**'
  pull_request:
  workflow_dispatch:
    inputs:
      # ci_jobs: Control which jobs run via manual workflow dispatch
      # Go to Actions -> Build -> Run workflow -> enter job names in ci_jobs field
      # If not set or empty, all jobs run. Dependencies are automatically included.
      # Examples:
      #   ci_jobs: "Linux"          # Runs only Linux job
      #   ci_jobs: "Linux,Windows"  # Runs Linux and Windows jobs
      #   ci_jobs: "Android"        # Runs Android and its dependency Linux-Tools
      ci_jobs:
        description: 'Comma-separated list of jobs to run (e.g., "Linux,Android"). Leave empty to run all jobs.'
        required: false
        default: ''
        type: string

env:
  # common settings
  URHO3D_ENABLE_ALL: ON
  URHO3D_SAMPLES: ON
  URHO3D_TESTING: ON
  URHO3D_PROFILING_FALLBACK: ON
  URHO3D_PRISTINE_FULL_BUILDS: ON
  DOTNET_VERSION: '8.0'
  CMAKE_VERSION: 3.24.x
  # ccache configuration
  ccache_prefix: ${{ secrets.CACHE_VERSION }}-master
  CCACHE_DIR: ${{ github.workspace }}/.ccache
  CCACHE_COMPRESS: true
  CCACHE_COMPRESSLEVEL: 9
  CCACHE_DEPEND: true
  CCACHE_HARDLINK: true
  CCACHE_SLOPPINESS: pch_defines,time_macros,include_file_mtime,include_file_ctime
  CCACHE_NOHASHDIR: true
  CCACHE_MAXSIZE: 10G
  CCACHE_LIMIT_MULTIPLE: 0.6
  #CCACHE_DEBUG: 1
  CCACHE_DEBUGDIR: ${{ github.workspace }}/ccache-debug
  # paths
  ci_workspace_dir: ${{ github.workspace }}
  ci_source_dir: ${{ github.workspace }}/source-code
  ci_build_script: ./source-code/script/ci_build.sh
  ci_build_dir: ${{ github.workspace }}/cmake-build
  ci_sdk_dir: ${{ github.workspace }}/SDK
  ci_latest_release_url: https://uploads.github.com/repos/rbfx/rbfx/releases/129063815/assets{?name,label}
  ci_latest_release_id: 129063815
  # etc
  TRACY_TIMER_FALLBACK: 1
  SOURCE_REF: ${{ github.head_ref || github.ref_name }}

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  CheckSkipCI:
    runs-on: ubuntu-latest
    # Skip CI if:
    # - pull request is from rbfx/rbfx repository branch
    if: |
      !(github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == 'rbfx/rbfx')
    steps:
      - run: exit 0

  WebHooks:
    name: Web Hooks
    runs-on: ubuntu-latest
    continue-on-error: true
    if: github.repository == 'rbfx/rbfx' && github.ref == 'refs/heads/master'
    steps:
      - name: Discord Commits
        uses: rbfx/github_discord_notifier@latest
        with:
          discord-webhook: ${{ secrets.DISCORD_WEBHOOK_COMMITS }}
          github-token: ${{ github.token }}
          action-task: discord-commits
          discord-username: GitHub

  Release-Latest:
    name: Release 'latest'
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v5

      - name: Create and Push Tag
        run: |
          git tag -f latest
          git push -f origin latest

  Tools:
    if: |
      github.event.pull_request.draft == false &&
      (inputs.ci_jobs == '' ||
       contains(inputs.ci_jobs, 'Windows-Tools') ||
       contains(inputs.ci_jobs, 'Linux-Tools') ||
       contains(inputs.ci_jobs, 'MacOS-Tools') ||
       contains(inputs.ci_jobs, 'UWP') ||
       contains(inputs.ci_jobs, 'Android') ||
       contains(inputs.ci_jobs, 'Web') ||
       contains(inputs.ci_jobs, 'iOS'))
    runs-on: ${{ matrix.os }}
    needs: [CheckSkipCI]
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
          - os: ubuntu-latest
          - os: macos-latest
    env:
      BUILD_SHARED_LIBS: ON
      URHO3D_GRAPHICS_API: OpenGL
      URHO3D_ENABLE_ALL: OFF
      URHO3D_SAMPLES: OFF
      URHO3D_TESTING: OFF
      URHO3D_SHADER_TRANSLATOR: OFF
      URHO3D_SHADER_OPTIMIZER: OFF
      URHO3D_TOOLS: "swig;PackageTool"

    steps:
      - uses: actions/checkout@v5
        with:
          path: ${{ env.ci_source_dir }}
          fetch-depth: 1

      - name: Gather information
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            BUILD_ID='Windows-Tools'
          elif [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            BUILD_ID='Linux-Tools'
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            BUILD_ID='MacOS-Tools'
          fi

          # Gather values
          SHORT_SHA=$(echo ${GITHUB_SHA} | cut -c1-8)
          CACHE_ID="${{ env.ccache_prefix }}-$BUILD_ID"
          HASH_THIRDPARTY=$(cmake -DDIRECTORY_PATH="${{ env.ci_source_dir }}/Source/ThirdParty" -DHASH_FORMAT=short -P "${{ env.ci_source_dir }}/CMake/Modules/GetThirdPartyHash.cmake" 2>&1)
          HASH_TOOLS=$(cmake -DDIRECTORY_PATH="${{ env.ci_source_dir }}/Source/Tools" -DHASH_FORMAT=short -P "${{ env.ci_source_dir }}/CMake/Modules/GetThirdPartyHash.cmake" 2>&1)
          ARTIFACT_ID_TOOLS="rbfx-$BUILD_ID-$HASH_TOOLS-$HASH_THIRDPARTY"

          # Determine number of processors
          if [ '$BUILD_ID' == 'Linux-Tools' ]; then
            NUMBER_OF_PROCESSORS=$(nproc)
          elif [ '$BUILD_ID' == 'MacOS-Tools' ]; then
            NUMBER_OF_PROCESSORS=$(sysctl -n hw.ncpu)
          fi
          NUMBER_OF_PROCESSORS=$(( (NUMBER_OF_PROCESSORS + 1) / 2 ))
          if [ "$NUMBER_OF_PROCESSORS" -lt 1 ]; then
            NUMBER_OF_PROCESSORS=1
          fi

          # Display values
          echo "SHORT_SHA=$SHORT_SHA"
          echo "BUILD_ID=$BUILD_ID"
          echo "CACHE_ID=$CACHE_ID"
          echo "HASH_THIRDPARTY=$HASH_THIRDPARTY"
          echo "HASH_TOOLS=$HASH_TOOLS"
          echo "ARTIFACT_ID_TOOLS=$ARTIFACT_ID_TOOLS"
          echo "NUMBER_OF_PROCESSORS=$NUMBER_OF_PROCESSORS"

          # Save values to environment
          echo "SHORT_SHA=$SHORT_SHA" >> $GITHUB_ENV
          echo "BUILD_ID=$BUILD_ID" >> $GITHUB_ENV
          echo "CACHE_ID=$CACHE_ID" >> $GITHUB_ENV
          echo "HASH_THIRDPARTY=$HASH_THIRDPARTY" >> $GITHUB_ENV
          echo "HASH_TOOLS=$HASH_TOOLS" >> $GITHUB_ENV
          echo "ARTIFACT_ID_TOOLS=$ARTIFACT_ID_TOOLS" >> $GITHUB_ENV
          echo "NUMBER_OF_PROCESSORS=$NUMBER_OF_PROCESSORS" >> $GITHUB_ENV


      - name: Check for cached build
        id: cache-check
        if: ${{ !contains(github.event.head_commit.message, '#full-build') }}
        shell: bash
        run: echo "tools-cached=$(bash '${{ env.ci_source_dir }}/script/ci_download_artifact.sh' '${{ env.ARTIFACT_ID_TOOLS }}' '${{ github.token }}' '${{ github.repository }}' '${{ github.workspace }}/cached-sdk' --check-only)" >> "$GITHUB_OUTPUT"

      - name: Build Cache
        uses: actions/cache@v4
        if: ${{ steps.cache-check.outputs.tools-cached != 'true' }}
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ env.CACHE_ID }}-${{ env.SHORT_SHA }}
          restore-keys: ${{ env.CACHE_ID }}

      - name: Setup cmake
        if: ${{ steps.cache-check.outputs.tools-cached != 'true' }}
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: '${{ env.CMAKE_VERSION }}'

      - name: Dependencies
        if: ${{ steps.cache-check.outputs.tools-cached != 'true' && matrix.os == 'ubuntu-latest' }}
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build ccache xvfb libgl1-mesa-dev libxcursor-dev libxi-dev libxinerama-dev libxrandr-dev \
            libxrender-dev libxss-dev libasound2-dev libpulse-dev libibus-1.0-dev libdbus-1-dev libreadline6-dev libudev-dev uuid-dev libtbb-dev

      - name: Generate
        if: ${{ steps.cache-check.outputs.tools-cached != 'true' }}
        shell: bash
        run: cmake '-S${{ env.ci_source_dir }}' '-B${{ env.ci_build_dir }}' -DBUILD_SHARED_LIBS=OFF '-DCMAKE_INSTALL_PREFIX=${{ env.ci_sdk_dir }}' -DCMAKE_BUILD_TYPE=Release -DURHO3D_PARALLEL_BUILD=$NUMBER_OF_PROCESSORS

      - name: Build
        if: ${{ steps.cache-check.outputs.tools-cached != 'true' }}
        shell: bash
        run: |
          cmake --build '${{ env.ci_build_dir }}' --config Release --parallel $NUMBER_OF_PROCESSORS

      - name: Install
        if: ${{ steps.cache-check.outputs.tools-cached != 'true' }}
        shell: bash
        run: cmake --install '${{ env.ci_build_dir }}' --config Release --component Tools

      - uses: actions/upload-artifact@v4
        if: ${{ steps.cache-check.outputs.tools-cached != 'true' }}
        with:
          name: '${{ env.ARTIFACT_ID_TOOLS }}-${{ env.SHORT_SHA }}'
          path: ${{ env.ci_sdk_dir }}

      - uses: actions/upload-artifact@v4
        if: ${{ env.CCACHE_DEBUG == '1' }}
        with:
          name: 'ccache-debug-${{ env.BUILD_ID }}-${{ github.run_id }}'
          path: ${{ env.CCACHE_DEBUGDIR }}
          if-no-files-found: ignore

  Build:
    if: |
      github.event.pull_request.draft == false &&
      (inputs.ci_jobs == '' ||
       contains(inputs.ci_jobs, 'Windows') ||
       contains(inputs.ci_jobs, 'Linux') ||
       contains(inputs.ci_jobs, 'MacOS') ||
       contains(inputs.ci_jobs, 'UWP') ||
       contains(inputs.ci_jobs, 'Android') ||
       contains(inputs.ci_jobs, 'iOS') ||
       contains(inputs.ci_jobs, 'Web'))
    runs-on: ${{ matrix.os }}
    needs: [CheckSkipCI, Tools]

    strategy:
      fail-fast: false
      matrix:
        include:
          # Desktop: Windows builds
          - os: windows-2022
            ci_platform: windows
            ci_arch: x64
            ci_lib_type: dll
            ci_compiler: msvc
            ci_build_type: both
            job_name: Windows
          - os: windows-2022
            ci_platform: windows
            ci_arch: x64
            ci_lib_type: lib
            ci_compiler: msvc
            ci_build_type: both
            job_name: Windows
          - os: windows-2022
            ci_platform: windows
            ci_arch: x86
            ci_lib_type: dll
            ci_compiler: msvc
            ci_build_type: both
            job_name: Windows
          - os: windows-2022
            ci_platform: windows
            ci_arch: x86
            ci_lib_type: lib
            ci_compiler: msvc
            ci_build_type: both
            job_name: Windows
          # Desktop: Linux builds
          - os: ubuntu-latest
            ci_platform: linux
            ci_arch: x64
            ci_lib_type: dll
            ci_compiler: gcc
            ci_build_type: both
            job_name: Linux
          - os: ubuntu-latest
            ci_platform: linux
            ci_arch: x64
            ci_lib_type: lib
            ci_compiler: gcc
            ci_build_type: both
            job_name: Linux
          - os: ubuntu-latest
            ci_platform: linux
            ci_arch: x64
            ci_lib_type: dll
            ci_compiler: clang
            ci_build_type: both
            job_name: Linux
          - os: ubuntu-latest
            ci_platform: linux
            ci_arch: x64
            ci_lib_type: lib
            ci_compiler: clang
            ci_build_type: both
            job_name: Linux
          # Desktop: MacOS builds
          - os: macos-latest
            ci_platform: macos
            ci_arch: x64
            ci_lib_type: dll
            ci_compiler: clang
            ci_build_type: both
            job_name: MacOS
          - os: macos-latest
            ci_platform: macos
            ci_arch: x64
            ci_lib_type: lib
            ci_compiler: clang
            ci_build_type: both
            job_name: MacOS
          # Mobile: UWP builds
          - os: windows-2022
            ci_platform: uwp
            ci_arch: x64
            ci_lib_type: dll
            ci_compiler: msvc
            ci_build_type: both
            job_name: UWP
          - os: windows-2022
            ci_platform: uwp
            ci_arch: x64
            ci_lib_type: lib
            ci_compiler: msvc
            ci_build_type: both
            job_name: UWP
          # Mobile: Android builds
          - os: ubuntu-latest
            ci_platform: android
            ci_arch: arm64-v8a
            ci_lib_type: lib
            ci_compiler: clang
            ci_build_type: both
            job_name: Android
          - os: ubuntu-latest
            ci_platform: android
            ci_arch: armeabi-v7a
            ci_lib_type: lib
            ci_compiler: clang
            ci_build_type: both
            job_name: Android
          - os: ubuntu-latest
            ci_platform: android
            ci_arch: x86_64
            ci_lib_type: lib
            ci_compiler: clang
            ci_build_type: both
            job_name: Android
          # Mobile: iOS builds
          - os: macos-latest
            ci_platform: ios
            ci_arch: universal
            ci_lib_type: lib
            ci_compiler: clang
            ci_build_type: both
            job_name: iOS
          # Mobile: Web builds
          - os: ubuntu-latest
            ci_platform: web
            ci_arch: wasm
            ci_lib_type: lib
            ci_compiler: emscripten
            ci_build_type: both
            job_name: Web

    env:
      ci_platform: ${{ matrix.ci_platform }}
      ci_arch: ${{ matrix.ci_arch }}
      ci_lib_type: ${{ matrix.ci_lib_type }}
      ci_compiler: ${{ matrix.ci_compiler }}
      ci_build_type: ${{ matrix.ci_build_type }}
      ci_artifacts: ${{ (
                          github.ref == 'refs/heads/master'           ||
                          startsWith(github.ref, 'refs/tags/nuget/')  ||
                          startsWith(github.ref, 'refs/heads/nuget/')
                        )
                    }}
      ci_release_sdk: ${{
                        (
                          (matrix.ci_platform == 'windows' || matrix.ci_platform == 'linux' || matrix.ci_platform == 'macos') &&
                          (matrix.ci_arch == 'x64') &&
                          (matrix.ci_lib_type == 'dll')
                        ) ||
                        (matrix.ci_platform == 'web')
                      }}
      ci_release_bin: ${{
                        (matrix.ci_platform == 'windows' || matrix.ci_platform == 'linux' || matrix.ci_platform == 'macos') &&
                        (matrix.ci_arch == 'x64')           &&
                        (matrix.ci_lib_type == 'dll')       &&
                        (github.repository == 'rbfx/rbfx')  &&
                        (github.ref == 'refs/heads/master')
                      }}
      ci_itch: ${{ (github.ref == 'refs/heads/master') }}
      BUTLER_API_KEY: ${{ secrets.BUTLER_API_KEY }}
      BINARYEN_CORES: 1
      CMAKE_PREFIX_PATH: ${{ github.workspace }}/cached-sdk

    steps:
      # Mobile-specific: Checkout emsdk (Web only)
      - name: Checkout emsdk
        if: matrix.ci_platform == 'web'
        uses: actions/checkout@v5
        with:
          repository: emscripten-core/emsdk
          path: ${{ github.workspace }}/emsdk

      - name: Setup emsdk
        if: matrix.ci_platform == 'web'
        shell: bash
        run: |
          cd ${{ github.workspace }}/emsdk
          ./emsdk install latest
          ./emsdk activate latest
          echo "PATH=$PATH:${{ github.workspace }}/emsdk:${{ github.workspace }}/emsdk/upstream/emscripten" >> $GITHUB_ENV
          echo "EMSDK=${{ github.workspace }}/emsdk" >> $GITHUB_ENV

      - uses: actions/checkout@v5
        with:
          path: ${{ env.ci_source_dir }}
          fetch-depth: 1

      - name: Gather information
        shell: bash
        run: |
          # Gather values
          SHORT_SHA=$(echo ${GITHUB_SHA} | cut -c1-8)

          # Platform-specific TOOLS_PLATFORM
          case "${{ matrix.ci_platform }}" in
            android|web)  TOOLS_PLATFORM='Linux' ;;
            ios)          TOOLS_PLATFORM='MacOS' ;;
            uwp)          TOOLS_PLATFORM='Windows' ;;
            *)            TOOLS_PLATFORM='' ;;
          esac

          BUILD_ID='${{ matrix.job_name }}-${{ matrix.ci_compiler }}-${{ matrix.ci_lib_type }}-${{ matrix.ci_arch }}-${{ matrix.ci_build_type }}'
          CACHE_ID="${{ env.ccache_prefix }}-$BUILD_ID"
          HASH_THIRDPARTY=$(cmake -DDIRECTORY_PATH="${{ env.ci_source_dir }}/Source/ThirdParty" -DHASH_FORMAT=short -P "${{ env.ci_source_dir }}/CMake/Modules/GetThirdPartyHash.cmake" 2>&1)

          # Platform-specific ARTIFACT_ID_SDK
          ARTIFACT_ID_SDK="rbfx-$BUILD_ID-$HASH_THIRDPARTY"

          # Tools artifact (for mobile platforms)
          if [[ -n "$TOOLS_PLATFORM" ]]; then
            HASH_TOOLS=$(cmake -DDIRECTORY_PATH="${{ env.ci_source_dir }}/Source/Tools" -DHASH_FORMAT=short -P "${{ env.ci_source_dir }}/CMake/Modules/GetThirdPartyHash.cmake" 2>&1)
            ARTIFACT_ID_TOOLS="rbfx-${TOOLS_PLATFORM}-Tools-$HASH_TOOLS-$HASH_THIRDPARTY"
            echo "HASH_TOOLS=$HASH_TOOLS"
            echo "ARTIFACT_ID_TOOLS=$ARTIFACT_ID_TOOLS"
            echo "HASH_TOOLS=$HASH_TOOLS" >> $GITHUB_ENV
            echo "ARTIFACT_ID_TOOLS=$ARTIFACT_ID_TOOLS" >> $GITHUB_ENV
          fi

          # Display values
          echo "SHORT_SHA=$SHORT_SHA"
          echo "BUILD_ID=$BUILD_ID"
          echo "CACHE_ID=$CACHE_ID"
          echo "HASH_THIRDPARTY=$HASH_THIRDPARTY"
          echo "ARTIFACT_ID_SDK=$ARTIFACT_ID_SDK"

          # Save values to environment
          echo "SHORT_SHA=$SHORT_SHA" >> $GITHUB_ENV
          echo "BUILD_ID=$BUILD_ID" >> $GITHUB_ENV
          echo "CACHE_ID=$CACHE_ID" >> $GITHUB_ENV
          echo "HASH_THIRDPARTY=$HASH_THIRDPARTY" >> $GITHUB_ENV
          echo "ARTIFACT_ID_SDK=$ARTIFACT_ID_SDK" >> $GITHUB_ENV

      - name: Set up butler
        if: ${{ (env.ci_itch == 'true') && (vars.DISABLE_ITCH != 'true') }}
        uses: jdno/setup-butler@v1

      - name: Build Cache
        uses: actions/cache@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ env.CACHE_ID }}-${{ env.SHORT_SHA }}
          restore-keys: |
            ${{ env.CACHE_ID }}

      - name: Download cached tools
        if: matrix.ci_platform == 'uwp' || matrix.ci_platform == 'android' || matrix.ci_platform == 'ios' || matrix.ci_platform == 'web'
        id: cached_tools
        shell: bash
        run: bash '${{ env.ci_source_dir }}/script/ci_download_artifact.sh' "$ARTIFACT_ID_TOOLS" '${{ github.token }}' '${{ github.repository }}' '${{ github.workspace }}/host-sdk' --required

      - name: Setup dotnet
        uses: actions/setup-dotnet@v4
        if: matrix.ci_lib_type == 'dll' || matrix.ci_platform == 'android'
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Setup Gradle
        if: matrix.ci_platform == 'android'
        uses: gradle/actions/setup-gradle@v4
        with:
          gradle-version: '8.14.3'
          add-job-summary: 'never'

      - name: Setup cmake
        if: matrix.ci_platform != 'android'
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: '${{ env.CMAKE_VERSION }}'

      - name: Dependencies
        shell: bash
        run: ${{ env.ci_build_script }} dependencies

      - name: Download cached SDK
        id: cached_sdk
        if: ${{ !contains(github.event.head_commit.message, '#full-build') && env.ci_release_sdk != 'true' }}
        shell: bash
        run: |
          echo "sdk-cached=$(bash '${{ env.ci_source_dir }}/script/ci_download_artifact.sh' "$ARTIFACT_ID_SDK" '${{ github.token }}' '${{ github.repository }}' '${{ github.workspace }}/cached-sdk')" >> "$GITHUB_OUTPUT"

      - name: Generate
        if: matrix.ci_platform != 'android'
        shell: bash
        run: ${{ env.ci_build_script }} generate

      - name: Build
        shell: bash
        run: |
          if [[ "${{ matrix.ci_build_type }}" == "both" ]]; then
            ${{ env.ci_build_script }} build dbg
            ${{ env.ci_build_script }} build rel
          else
            ${{ env.ci_build_script }} build ${{ matrix.ci_build_type }}
          fi

      - name: Test Debug (Native)
        if: matrix.ci_build_type == 'both' && (matrix.ci_compiler == 'msvc' || matrix.ci_platform == 'linux')
        shell: bash
        run: ${{ env.ci_build_script }} test dbg

      - name: Test Debug (Managed)
        # TODO: Fix C# on x86, issue #733.
        if: matrix.ci_build_type == 'both' && matrix.ci_platform == 'windows' && matrix.ci_compiler == 'msvc' && matrix.ci_lib_type == 'dll' && matrix.ci_arch == 'x64'
        shell: bash
        run: ${{ env.ci_build_script }} cstest dbg

      - name: Test Release (Native)
        if: matrix.ci_build_type == 'both' && (matrix.ci_compiler == 'msvc' || matrix.ci_platform == 'linux')
        shell: bash
        run: ${{ env.ci_build_script }} test rel

      - name: Test Release (Managed)
        # TODO: Fix C# on x86, issue #733.
        if: matrix.ci_build_type == 'both' && matrix.ci_platform == 'windows' && matrix.ci_compiler == 'msvc' && matrix.ci_lib_type == 'dll' && matrix.ci_arch == 'x64'
        shell: bash
        run: ${{ env.ci_build_script }} cstest rel

      - name: Copy cached SDK (ThirdParty component)
        if: steps.cached_sdk.outputs.sdk-cached == 'true'
        shell: bash
        run: |
          src='${{ github.workspace }}/cached-sdk'
          dst='${{ env.ci_sdk_dir }}'
          if [[ "${{ matrix.ci_platform }}" == "windows" ]] || [[ "${{ matrix.ci_platform }}" == "uwp" ]];
          then
            src=$(cygpath $src)
            dst=$(cygpath $dst)
          fi
          mkdir -p $dst
          cp -r $src/* $dst/

      - name: Install
        shell: bash
        run: |
          if [[ "${{ matrix.ci_build_type }}" == "both" ]]; then
            ${{ env.ci_build_script }} install dbg
            ${{ env.ci_build_script }} install rel
          else
            ${{ env.ci_build_script }} install
          fi

      - uses: actions/upload-artifact@v4
        with:
          name: '${{ env.ARTIFACT_ID_SDK }}-${{ env.SHORT_SHA }}'
          path: ${{ env.ci_sdk_dir }}

      # Android-specific: Build APK
      - name: Build APK
        if: matrix.ci_platform == 'android'
        shell: bash
        run: ${{ env.ci_build_script }} apk rel

      - uses: actions/upload-artifact@v4
        if: env.ci_artifacts == 'true' && matrix.ci_platform == 'android'
        with:
          name: 'rbfx-Android-apks-${{ matrix.ci_arch }}-${{ env.SHORT_SHA }}'
          path: '**/*.apk'

      - uses: actions/upload-artifact@v4
        if: env.ci_artifacts == 'true' && matrix.ci_platform == 'ios'
        with:
          name: 'rbfx-iOS-${{ env.ci_lib_type }}-${{ env.SHORT_SHA }}'
          path: '**/*.app'

      # Test projects (Desktop/UWP/Web only): Empty project using current branch (if present)
      - uses: actions/checkout@v5
        if: matrix.ci_platform == 'windows' || matrix.ci_platform == 'linux' || matrix.ci_platform == 'macos' || matrix.ci_platform == 'uwp' || matrix.ci_platform == 'web'
        id: empty_project_checkout
        continue-on-error: true
        with:
          repository: rbfx/empty-project
          path: ${{ github.workspace }}/empty-project
          ref: ${{ env.SOURCE_REF }}
          fetch-depth: 1
          submodules: true

      # Empty project using master branch
      - uses: actions/checkout@v5
        if: (matrix.ci_platform == 'windows' || matrix.ci_platform == 'linux' || matrix.ci_platform == 'macos' || matrix.ci_platform == 'uwp' || matrix.ci_platform == 'web') && steps.empty_project_checkout.outcome != 'success'
        with:
          repository: rbfx/empty-project
          path: ${{ github.workspace }}/empty-project
          ref: 'refs/heads/master'
          fetch-depth: 1
          submodules: true

      - name: Test empty_project build with SDK
        shell: bash
        run: |
          source_dir='${{ github.workspace }}/empty-project'
          build_dir='${{ github.workspace }}/empty-project-sdk-build'
          shared=$([[ '${{ matrix.ci_lib_type }}' == 'dll' ]] && echo ON || echo OFF)

          # Build cmake args array
          cmake_args=(-S "$source_dir" -B "$build_dir" -DBUILD_SHARED_LIBS=$shared -DCMAKE_CONFIGURATION_TYPES="Debug;RelWithDebInfo")

          # Platform-specific configuration
          if [[ "${{ matrix.ci_platform }}" == "windows" ]]; then
            arch=$([[ '${{ matrix.ci_arch }}' == "x86" ]] && echo Win32 || echo x64)
            cmake_args+=(-A "$arch" '-DCMAKE_PREFIX_PATH=${{ env.ci_sdk_dir }}/share')
          elif [[ "${{ matrix.ci_platform }}" == "linux" ]]; then
            export CC=${ci_compiler}
            export CXX=${ci_compiler/gcc/g}++
            cmake_args+=(-G 'Ninja Multi-Config' -DCMAKE_PREFIX_PATH=${{ env.ci_sdk_dir }})
          else  # macOS
            cmake_args+=(-DCMAKE_PREFIX_PATH=${{ env.ci_sdk_dir }})
          fi

          cmake "${cmake_args[@]}"
          cmake --build $build_dir --config Debug
          cmake --build $build_dir --config RelWithDebInfo

      - name: Test empty_project configure with engine source
        shell: bash
        run: |
          source_dir='${{ github.workspace }}/empty-project'
          build_dir='${{ github.workspace }}/empty-project-source-build'
          shared=$([[ '${{ matrix.ci_lib_type }}' == 'dll' ]] && echo ON || echo OFF)

          # Build cmake args array
          cmake_args=(-S "$source_dir" -B "$build_dir" -DBUILD_SHARED_LIBS=$shared -DCMAKE_CONFIGURATION_TYPES="Debug;RelWithDebInfo")

          # Platform-specific configuration
          if [[ "${{ matrix.ci_platform }}" == "windows" ]]; then
            arch=$([[ '${{ matrix.ci_arch }}' == "x86" ]] && echo Win32 || echo x64)
            cmake_args+=(-A "$arch" '-DCMAKE_PREFIX_PATH=${{ env.ci_source_dir }}/CMake')
          elif [[ "${{ matrix.ci_platform }}" == "linux" ]]; then
            export CC=${ci_compiler}
            export CXX=${ci_compiler/gcc/g}++
            cmake_args+=(-G 'Ninja Multi-Config' -DCMAKE_PREFIX_PATH=${{ env.ci_source_dir }}/CMake)
          else  # macOS
            cmake_args+=(-DCMAKE_PREFIX_PATH=${{ env.ci_source_dir }}/CMake)
          fi

          cmake "${cmake_args[@]}"
          # Skip building as it would require full engine build

      # Sample project using current branch (if present)
      - uses: actions/checkout@v5
        id: sample_project_checkout
        continue-on-error: true
        with:
          repository: rbfx/sample-project
          path: ${{ github.workspace }}/sample-project
          ref: ${{ env.SOURCE_REF }}
          fetch-depth: 1
          submodules: true

      # Sample project using master branch
      - uses: actions/checkout@v5
        if: steps.sample_project_checkout.outcome != 'success'
        with:
          repository: rbfx/sample-project
          path: ${{ github.workspace }}/sample-project
          ref: 'refs/heads/master'
          fetch-depth: 1
          submodules: true

      - name: Test sample_project build with SDK
        shell: bash
        run: |
          source_dir='${{ github.workspace }}/sample-project'
          build_dir='${{ github.workspace }}/sample-project-sdk-build'
          shared=$([[ '${{ matrix.ci_lib_type }}' == 'dll' ]] && echo ON || echo OFF)

          # Build cmake args array
          cmake_args=(-S "$source_dir" -B "$build_dir" -DBUILD_SHARED_LIBS=$shared -DCMAKE_CONFIGURATION_TYPES="Debug;RelWithDebInfo")

          # Platform-specific configuration
          if [[ "${{ matrix.ci_platform }}" == "windows" ]]; then
            arch=$([[ '${{ matrix.ci_arch }}' == "x86" ]] && echo Win32 || echo x64)
            cmake_args+=(-A "$arch" '-DCMAKE_PREFIX_PATH=${{ env.ci_sdk_dir }}/share')
          elif [[ "${{ matrix.ci_platform }}" == "linux" ]]; then
            export CC=${ci_compiler}
            export CXX=${ci_compiler/gcc/g}++
            cmake_args+=(-G 'Ninja Multi-Config' -DCMAKE_PREFIX_PATH=${{ env.ci_sdk_dir }})
          else  # macOS
            cmake_args+=(-DCMAKE_PREFIX_PATH=${{ env.ci_sdk_dir }})
          fi

          cmake "${cmake_args[@]}"
          cmake --build $build_dir --config Debug
          cmake --build $build_dir --config RelWithDebInfo

      - name: Test sample_project configure with engine source
        shell: bash
        run: |
          source_dir='${{ github.workspace }}/sample-project'
          build_dir='${{ github.workspace }}/sample-project-source-build'
          shared=$([[ '${{ matrix.ci_lib_type }}' == 'dll' ]] && echo ON || echo OFF)

          # Build cmake args array
          cmake_args=(-S "$source_dir" -B "$build_dir" -DBUILD_SHARED_LIBS=$shared -DCMAKE_CONFIGURATION_TYPES="Debug;RelWithDebInfo")

          # Platform-specific configuration
          if [[ "${{ matrix.ci_platform }}" == "windows" ]]; then
            arch=$([[ '${{ matrix.ci_arch }}' == "x86" ]] && echo Win32 || echo x64)
            cmake_args+=(-A "$arch" '-DCMAKE_PREFIX_PATH=${{ env.ci_source_dir }}/CMake')
          elif [[ "${{ matrix.ci_platform }}" == "linux" ]]; then
            export CC=${ci_compiler}
            export CXX=${ci_compiler/gcc/g}++
            cmake_args+=(-G 'Ninja Multi-Config' -DCMAKE_PREFIX_PATH=${{ env.ci_source_dir }}/CMake)
          else  # macOS
            cmake_args+=(-DCMAKE_PREFIX_PATH=${{ env.ci_source_dir }}/CMake)
          fi

          cmake "${cmake_args[@]}"
          # Skip building as it would require full engine build

      - name: Zip SDK
        if: ${{ env.ci_release_sdk == 'true' }}
        uses: TheDoctor0/zip-release@0.7.6
        with:
          directory: ${{ github.workspace }}
          filename: ${{ github.workspace }}/SDK.zip
          path: 'SDK'
          exclusions: "${{ matrix.ci_platform == 'windows' && 'SDK/cmake-build' || '/SDK/cmake-build/*' }}"

      - name: Release SDK
        if: ${{ env.ci_release_sdk == 'true' }}
        uses: WebFreak001/deploy-nightly@v3.0.0
        with:
          upload_url: ${{ env.ci_latest_release_url }}
          release_id: ${{ env.ci_latest_release_id }}
          asset_path: ${{ github.workspace }}/SDK.zip
          asset_name: 'rebelfork-sdk-${{ matrix.job_name }}-${{ matrix.ci_compiler }}-${{ matrix.ci_lib_type }}-${{ matrix.ci_arch }}-latest.zip'
          asset_content_type: application/zip
          max_releases: 1

      - name: Zip binaries
        if: ${{ env.ci_release_bin == 'true' }}
        uses: TheDoctor0/zip-release@0.7.6
        with:
          directory: ${{ matrix.ci_platform == 'windows' && format('{0}/SDK/bin/RelWithDebInfo/', github.workspace) || format('{0}/SDK/bin/', github.workspace) }}
          filename: ${{ github.workspace }}/SDK-bin.zip
          path: '.'
          exclusions: "${{ matrix.ci_platform == 'windows' && '.' || '/Autoload/* /CoreData/* /Data/* /EditorData/* /shell.html' }}"

      - name: Release binaries
        if: ${{ env.ci_release_bin == 'true' }}
        uses: WebFreak001/deploy-nightly@v3.0.0
        with:
          upload_url: ${{ env.ci_latest_release_url }}
          release_id: ${{ env.ci_latest_release_id }}
          asset_path: ${{ github.workspace }}/SDK-bin.zip
          asset_name: 'rebelfork-bin-${{ matrix.job_name }}-${{ matrix.ci_compiler }}-${{ matrix.ci_lib_type }}-${{ matrix.ci_arch }}-latest.zip'
          asset_content_type: application/zip
          max_releases: 1

      - name: Publish to itch.io
        if: ${{ (env.ci_itch == 'true') && (vars.DISABLE_ITCH != 'true') }}
        shell: bash
        run: ${{ env.ci_build_script }} publish-to-itch

      - uses: actions/upload-artifact@v4
        if: ${{ env.CCACHE_DEBUG == '1' }}
        with:
          name: 'ccache-debug-${{ env.BUILD_ID }}-${{ github.run_id }}'
          path: ${{ env.CCACHE_DEBUGDIR }}
          if-no-files-found: ignore

  NuGet:
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/tags/nuget/') || startsWith(github.ref, 'refs/heads/nuget/') }}
    needs:
      - Build
    continue-on-error: true
    steps:
      - uses: actions/checkout@v5
        with:
          path: source-code
          fetch-depth: 1

      - name: Get short SHA
        id: vars
        run: echo "sha_short=$(echo ${GITHUB_SHA} | cut -c1-7)" >> $GITHUB_OUTPUT

      - uses: actions/download-artifact@v4
        with:
          path: source-code/packaging/nuget/

      - name: Nuget
        shell: bash
        working-directory: source-code/packaging/nuget/
        run: |
          ./package.sh
          for pkg in out/*.nupkg;
          do
            dotnet nuget push $pkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json
          done

  Docs:
    runs-on: ubuntu-latest
    if: github.repository == 'rbfx/rbfx' && github.ref == 'refs/heads/master'
    needs:
      - Build
      - CheckSkipCI
    env:
      GH_TOKEN: ${{ secrets.RBFX_DOCS_DEPLOY_TOKEN }}

    steps:
      - name: Trigger
        shell: bash
        run: |
          gh workflow run --repo rbfx/rbfx-docs Documentation

  BuildSummary:
    name: Build Summary
    runs-on: ubuntu-latest
    if: always()
    needs:
      - Build
      - Tools

    steps:
      - name: Generate Build Summary
        uses: actions/github-script@v7
        with:
          script: |
            const jobs = context.workflow_run ? context.workflow_run.jobs : [];

            // Get job information from the workflow run
            const workflowRun = await github.rest.actions.listJobsForWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId
            });

            // Create summary table
            let summary = '## Build Summary\n\n';
            summary += '| Job | Status | Duration |\n';
            summary += '|-----|--------|----------|\n';

            // Filter and sort jobs (exclude utility jobs)
            const buildJobs = workflowRun.data.jobs.filter(job =>
              !['CheckSkipCI', 'Web Hooks', "Release 'latest'", 'Build Summary', 'Docs', 'NuGet'].includes(job.name)
            ).sort((a, b) => a.name.localeCompare(b.name));

            for (const job of buildJobs) {
              const status = job.conclusion || job.status;
              let statusIcon = ';

              switch (status) {
                case 'success':
                  statusIcon = '✅';
                  break;
                case 'failure':
                  statusIcon = '❌';
                  break;
                case 'cancelled':
                  statusIcon = '🚫';
                  break;
                case 'skipped':
                  statusIcon = '⏭️';
                  break;
                default:
                  statusIcon = '⏳';
              }

              // Calculate duration
              let duration = 'N/A';
              if (job.started_at && job.completed_at) {
                const start = new Date(job.started_at);
                const end = new Date(job.completed_at);
                const durationMs = end - start;
                const minutes = Math.floor(durationMs / 60000);
                const seconds = Math.floor((durationMs % 60000) / 1000);
                duration = `${minutes}m ${seconds}s`;
              } else if (job.started_at) {
                duration = 'In progress...';
              }

              summary += `| ${job.name} | ${statusIcon} ${status} | ${duration} |\n`;
            }

            // Add summary statistics
            const successCount = buildJobs.filter(j => j.conclusion === 'success').length;
            const failureCount = buildJobs.filter(j => j.conclusion === 'failure').length;
            const totalCount = buildJobs.length;

            summary += '\n### Summary Statistics\n\n';
            summary += `- Total build jobs: ${totalCount}\n`;
            summary += `- Successful: ${successCount}\n`;
            summary += `- Failed: ${failureCount}\n`;

            // Write to job summary
            await core.summary
              .addRaw(summary)
              .write();
