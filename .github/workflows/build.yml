name: Build
on:
  push:
    branches-ignore:
      - 'no-ci-**'
      - 'skip-ci-**'
  pull_request:
  workflow_dispatch:
    inputs:
      # ci_jobs: Control which jobs run via manual workflow dispatch
      # Go to Actions -> Build -> Run workflow -> enter job names in ci_jobs field
      # If not set or empty, all jobs run. Dependencies are automatically included.
      # Examples:
      #   ci_jobs: "Linux"          # Runs only Linux job
      #   ci_jobs: "Linux,Windows"  # Runs Linux and Windows jobs
      #   ci_jobs: "Android"        # Runs Android and its dependency Linux-Tools
      ci_jobs:
        description: 'Comma-separated list of jobs to run (e.g., "Linux,Android"). Leave empty to run all jobs.'
        required: false
        default: ''
        type: string

env:
  # common settings
  URHO3D_ENABLE_ALL: ON
  URHO3D_SAMPLES: ON
  URHO3D_TESTING: ON
  URHO3D_PROFILING_FALLBACK: ON
  URHO3D_PRISTINE_FULL_BUILDS: ON
  DOTNET_VERSION: '8.0'
  CMAKE_VERSION: 3.24.x
  CMAKE_PREFIX_PATH: ${{ github.workspace }}/cached-sdk
  # ccache configuration
  ccache_prefix: ${{ secrets.CACHE_VERSION }}-master
  CCACHE_DIR: ${{ github.workspace }}/.ccache
  CCACHE_COMPRESS: true
  CCACHE_COMPRESSLEVEL: 9
  CCACHE_DEPEND: true
  CCACHE_HARDLINK: true
  CCACHE_SLOPPINESS: pch_defines,time_macros,include_file_mtime,include_file_ctime
  CCACHE_NOHASHDIR: true
  CCACHE_MAXSIZE: 5G
  CCACHE_LIMIT_MULTIPLE: 0.6
  # paths
  ci_workspace_dir: ${{ github.workspace }}
  ci_source_dir: ${{ github.workspace }}/source-code
  ci_build_script: ./source-code/script/ci_build.sh
  ci_build_dir: ${{ github.workspace }}/cmake-build
  ci_sdk_dir: ${{ github.workspace }}/SDK
  ci_latest_release_url: https://uploads.github.com/repos/rbfx/rbfx/releases/129063815/assets{?name,label}
  ci_latest_release_id: 129063815
  # etc
  TRACY_TIMER_FALLBACK: 1

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  CheckSkipCI:
    runs-on: ubuntu-latest
    # Skip CI if:
    # - pull request is from rbfx/rbfx repository branch
    if: |
      !(github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == 'rbfx/rbfx')
    steps:
      - run: exit 0

  WebHooks:
    name: Web Hooks
    runs-on: ubuntu-latest
    continue-on-error: true
    if: github.repository == 'rbfx/rbfx' && github.ref == 'refs/heads/master'
    steps:
      - name: Discord Commits
        uses: rbfx/github_discord_notifier@latest
        with:
          discord-webhook: ${{ secrets.DISCORD_WEBHOOK_COMMITS }}
          github-token: ${{ github.token }}
          action-task: discord-commits
          discord-username: GitHub

  Release-Latest:
    name: Release 'latest'
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v5

      - name: Create and Push Tag
        run: |
          git tag -f latest
          git push -f origin latest

  Windows-Tools:
    if: |
      github.event.pull_request.draft == false &&
      (inputs.ci_jobs == '' ||
       contains(inputs.ci_jobs, 'Windows-Tools') ||
       contains(inputs.ci_jobs, 'UWP'))
    runs-on: windows-2022
    needs: [CheckSkipCI]
    env:
      BUILD_SHARED_LIBS: ON
      URHO3D_GRAPHICS_API: OpenGL
      URHO3D_ENABLE_ALL: OFF
      URHO3D_SAMPLES: OFF
      URHO3D_TESTING: OFF
      URHO3D_SHADER_TRANSLATOR: OFF
      URHO3D_SHADER_OPTIMIZER: OFF
      URHO3D_TOOLS: "swig;PackageTool"

    steps:
      - uses: actions/checkout@v5
        with:
          path: ${{ env.ci_source_dir }}
          fetch-depth: 1

      - name: Gather information
        shell: bash
        run: |
          # Gather values
          SHORT_SHA=$(echo ${GITHUB_SHA} | cut -c1-8)
          BUILD_ID='${{ github.job }}'
          CACHE_ID="${{ env.ccache_prefix }}-$BUILD_ID"
          HASH_THIRDPARTY=$(cmake -DDIRECTORY_PATH="${{ env.ci_source_dir }}/Source/ThirdParty" -DHASH_FORMAT=short -P "${{ env.ci_source_dir }}/CMake/Modules/GetThirdPartyHash.cmake" 2>&1)
          HASH_TOOLS=$(cmake -DDIRECTORY_PATH="${{ env.ci_source_dir }}/Source/Tools" -DHASH_FORMAT=short -P "${{ env.ci_source_dir }}/CMake/Modules/GetThirdPartyHash.cmake" 2>&1)
          ARTIFACT_ID_TOOLS="rbfx-$BUILD_ID-$HASH_TOOLS-$HASH_THIRDPARTY"

          # Display values
          echo "SHORT_SHA=$SHORT_SHA"
          echo "BUILD_ID=$BUILD_ID"
          echo "CACHE_ID=$CACHE_ID"
          echo "HASH_THIRDPARTY=$HASH_THIRDPARTY"
          echo "HASH_TOOLS=$HASH_TOOLS"
          echo "ARTIFACT_ID_TOOLS=$ARTIFACT_ID_TOOLS"

          # Save values to environment
          echo "SHORT_SHA=$SHORT_SHA" >> $GITHUB_ENV
          echo "BUILD_ID=$BUILD_ID" >> $GITHUB_ENV
          echo "CACHE_ID=$CACHE_ID" >> $GITHUB_ENV
          echo "HASH_THIRDPARTY=$HASH_THIRDPARTY" >> $GITHUB_ENV
          echo "HASH_TOOLS=$HASH_TOOLS" >> $GITHUB_ENV
          echo "ARTIFACT_ID_TOOLS=$ARTIFACT_ID_TOOLS" >> $GITHUB_ENV

      - name: Check for cached build
        id: cache-check
        shell: bash
        run: echo "is-cached=$(bash '${{ env.ci_source_dir }}/script/ci_download_artifact.sh' '${{ env.ARTIFACT_ID_TOOLS }}' '${{ github.token }}' '${{ github.repository }}' '${{ github.workspace }}/cached-sdk' --check-only)" >> "$GITHUB_OUTPUT"

      - name: Build Cache
        uses: actions/cache@v4
        if: ${{ steps.cache-check.outputs.is-cached != 'true' }}
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ env.CACHE_ID }}-${{ env.SHORT_SHA }}
          restore-keys: ${{ env.CACHE_ID }}

      - name: Setup cmake
        if: ${{ steps.cache-check.outputs.is-cached != 'true' }}
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: '${{ env.CMAKE_VERSION }}'

      - name: Generate
        if: ${{ steps.cache-check.outputs.is-cached != 'true' }}
        shell: bash
        run: cmake '-S${{ env.ci_source_dir }}' '-B${{ env.ci_build_dir }}' '-DCMAKE_INSTALL_PREFIX=${{ env.ci_sdk_dir }}' -DCMAKE_BUILD_TYPE=Release -DURHO3D_PARALLEL_BUILD=$NUMBER_OF_PROCESSORS

      - name: Build
        if: ${{ steps.cache-check.outputs.is-cached != 'true' }}
        shell: bash
        run: cmake --build '${{ env.ci_build_dir }}' --config Release --parallel $NUMBER_OF_PROCESSORS

      - name: Install
        if: ${{ steps.cache-check.outputs.is-cached != 'true' }}
        shell: bash
        run: cmake --install '${{ env.ci_build_dir }}' --config Release

      - uses: actions/upload-artifact@v4
        if: ${{ steps.cache-check.outputs.is-cached != 'true' }}
        with:
          name: '${{ env.ARTIFACT_ID_TOOLS }}-${{ env.SHORT_SHA }}'
          path: ${{ env.ci_sdk_dir }}

  Linux-Tools:
    if: |
      github.event.pull_request.draft == false &&
      (inputs.ci_jobs == '' ||
       contains(inputs.ci_jobs, 'Linux-Tools') ||
       contains(inputs.ci_jobs, 'Android') ||
       contains(inputs.ci_jobs, 'Web'))
    runs-on: ubuntu-latest
    needs: [CheckSkipCI]
    env:
      BUILD_SHARED_LIBS: ON
      URHO3D_GRAPHICS_API: OpenGL
      URHO3D_ENABLE_ALL: OFF
      URHO3D_SAMPLES: OFF
      URHO3D_TESTING: OFF
      URHO3D_SHADER_TRANSLATOR: OFF
      URHO3D_SHADER_OPTIMIZER: OFF
      URHO3D_TOOLS: "swig;PackageTool"

    steps:
      - uses: actions/checkout@v5
        with:
          path: ${{ env.ci_source_dir }}
          fetch-depth: 1

      - name: Gather information
        shell: bash
        run: |
          # Gather values
          SHORT_SHA=$(echo ${GITHUB_SHA} | cut -c1-8)
          BUILD_ID='${{ github.job }}'
          CACHE_ID="${{ env.ccache_prefix }}-$BUILD_ID"
          HASH_THIRDPARTY=$(cmake -DDIRECTORY_PATH="${{ env.ci_source_dir }}/Source/ThirdParty" -DHASH_FORMAT=short -P "${{ env.ci_source_dir }}/CMake/Modules/GetThirdPartyHash.cmake" 2>&1)
          HASH_TOOLS=$(cmake -DDIRECTORY_PATH="${{ env.ci_source_dir }}/Source/Tools" -DHASH_FORMAT=short -P "${{ env.ci_source_dir }}/CMake/Modules/GetThirdPartyHash.cmake" 2>&1)
          ARTIFACT_ID_TOOLS="rbfx-$BUILD_ID-$HASH_TOOLS-$HASH_THIRDPARTY"

          # Display values
          echo "SHORT_SHA=$SHORT_SHA"
          echo "BUILD_ID=$BUILD_ID"
          echo "CACHE_ID=$CACHE_ID"
          echo "HASH_THIRDPARTY=$HASH_THIRDPARTY"
          echo "HASH_TOOLS=$HASH_TOOLS"
          echo "ARTIFACT_ID_TOOLS=$ARTIFACT_ID_TOOLS"

          # Save values to environment
          echo "SHORT_SHA=$SHORT_SHA" >> $GITHUB_ENV
          echo "BUILD_ID=$BUILD_ID" >> $GITHUB_ENV
          echo "CACHE_ID=$CACHE_ID" >> $GITHUB_ENV
          echo "HASH_THIRDPARTY=$HASH_THIRDPARTY" >> $GITHUB_ENV
          echo "HASH_TOOLS=$HASH_TOOLS" >> $GITHUB_ENV
          echo "ARTIFACT_ID_TOOLS=$ARTIFACT_ID_TOOLS" >> $GITHUB_ENV

      - name: Check for cached build
        id: cache-check
        shell: bash
        run: echo "is-cached=$(bash '${{ env.ci_source_dir }}/script/ci_download_artifact.sh' '${{ env.ARTIFACT_ID_TOOLS }}' '${{ github.token }}' '${{ github.repository }}' '${{ github.workspace }}/cached-sdk' --check-only)" >> "$GITHUB_OUTPUT"

      - name: Build Cache
        uses: actions/cache@v4
        if: ${{ steps.cache-check.outputs.is-cached != 'true' }}
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ env.CACHE_ID }}-${{ env.SHORT_SHA }}
          restore-keys: ${{ env.CACHE_ID }}

      - name: Setup cmake
        if: ${{ steps.cache-check.outputs.is-cached != 'true' }}
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: '${{ env.CMAKE_VERSION }}'

      - name: Dependencies
        if: ${{ steps.cache-check.outputs.is-cached != 'true' }}
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build ccache xvfb libgl1-mesa-dev libxcursor-dev libxi-dev libxinerama-dev libxrandr-dev \
            libxrender-dev libxss-dev libasound2-dev libpulse-dev libibus-1.0-dev libdbus-1-dev libreadline6-dev libudev-dev uuid-dev libtbb-dev

      - name: Generate
        if: ${{ steps.cache-check.outputs.is-cached != 'true' }}
        shell: bash
        run: cmake '-S${{ env.ci_source_dir }}' '-B${{ env.ci_build_dir }}' '-DCMAKE_INSTALL_PREFIX=${{ env.ci_sdk_dir }}' -DCMAKE_BUILD_TYPE=Release

      - name: Build
        if: ${{ steps.cache-check.outputs.is-cached != 'true' }}
        shell: bash
        run: cmake --build '${{ env.ci_build_dir }}' --config Release --parallel $(nproc)

      - name: Install
        if: ${{ steps.cache-check.outputs.is-cached != 'true' }}
        shell: bash
        run: cmake --install '${{ env.ci_build_dir }}' --config Release

      - uses: actions/upload-artifact@v4
        if: ${{ steps.cache-check.outputs.is-cached != 'true' }}
        with:
          name: '${{ env.ARTIFACT_ID_TOOLS }}-${{ env.SHORT_SHA }}'
          path: ${{ env.ci_sdk_dir }}

  MacOS-Tools:
    if: |
      github.event.pull_request.draft == false &&
      (inputs.ci_jobs == '' ||
       contains(inputs.ci_jobs, 'MacOS-Tools') ||
       contains(inputs.ci_jobs, 'iOS'))
    runs-on: macos-13
    needs: [CheckSkipCI]
    env:
      BUILD_SHARED_LIBS: ON
      URHO3D_GRAPHICS_API: OpenGL
      URHO3D_ENABLE_ALL: OFF
      URHO3D_SAMPLES: OFF
      URHO3D_TESTING: OFF
      URHO3D_SHADER_TRANSLATOR: OFF
      URHO3D_SHADER_OPTIMIZER: OFF
      URHO3D_TOOLS: "swig;PackageTool"

    steps:
      - uses: actions/checkout@v5
        with:
          path: ${{ env.ci_source_dir }}
          fetch-depth: 1

      - name: Gather information
        shell: bash
        run: |
          # Gather values
          SHORT_SHA=$(echo ${GITHUB_SHA} | cut -c1-8)
          BUILD_ID='${{ github.job }}'
          CACHE_ID="${{ env.ccache_prefix }}-$BUILD_ID"
          HASH_THIRDPARTY=$(cmake -DDIRECTORY_PATH="${{ env.ci_source_dir }}/Source/ThirdParty" -DHASH_FORMAT=short -P "${{ env.ci_source_dir }}/CMake/Modules/GetThirdPartyHash.cmake" 2>&1)
          HASH_TOOLS=$(cmake -DDIRECTORY_PATH="${{ env.ci_source_dir }}/Source/Tools" -DHASH_FORMAT=short -P "${{ env.ci_source_dir }}/CMake/Modules/GetThirdPartyHash.cmake" 2>&1)
          ARTIFACT_ID_TOOLS="rbfx-$BUILD_ID-$HASH_TOOLS-$HASH_THIRDPARTY"

          # Display values
          echo "SHORT_SHA=$SHORT_SHA"
          echo "BUILD_ID=$BUILD_ID"
          echo "CACHE_ID=$CACHE_ID"
          echo "HASH_THIRDPARTY=$HASH_THIRDPARTY"
          echo "HASH_TOOLS=$HASH_TOOLS"
          echo "ARTIFACT_ID_TOOLS=$ARTIFACT_ID_TOOLS"

          # Save values to environment
          echo "SHORT_SHA=$SHORT_SHA" >> $GITHUB_ENV
          echo "BUILD_ID=$BUILD_ID" >> $GITHUB_ENV
          echo "CACHE_ID=$CACHE_ID" >> $GITHUB_ENV
          echo "HASH_THIRDPARTY=$HASH_THIRDPARTY" >> $GITHUB_ENV
          echo "HASH_TOOLS=$HASH_TOOLS" >> $GITHUB_ENV
          echo "ARTIFACT_ID_TOOLS=$ARTIFACT_ID_TOOLS" >> $GITHUB_ENV

      - name: Check for cached build
        id: cache-check
        shell: bash
        run: echo "is-cached=$(bash '${{ env.ci_source_dir }}/script/ci_download_artifact.sh' '${{ env.ARTIFACT_ID_TOOLS }}' '${{ github.token }}' '${{ github.repository }}' '${{ github.workspace }}/cached-sdk' --check-only)" >> "$GITHUB_OUTPUT"

      - name: Build Cache
        if: ${{ steps.cache-check.outputs.is-cached != 'true' }}
        uses: actions/cache@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ env.CACHE_ID }}-${{ env.SHORT_SHA }}
          restore-keys: ${{ env.CACHE_ID }}

      - name: Setup cmake
        if: ${{ steps.cache-check.outputs.is-cached != 'true' }}
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: '${{ env.CMAKE_VERSION }}'

      - name: Generate
        if: ${{ steps.cache-check.outputs.is-cached != 'true' }}
        shell: bash
        run: cmake -S${{ env.ci_source_dir }} -B${{ env.ci_build_dir }} '-DCMAKE_INSTALL_PREFIX=${{ env.ci_sdk_dir }}' -DCMAKE_BUILD_TYPE=Release

      - name: Build
        if: ${{ steps.cache-check.outputs.is-cached != 'true' }}
        shell: bash
        run: cmake --build '${{ env.ci_build_dir }}' --config Release --parallel $(sysctl -n hw.ncpu)

      - name: Install
        if: ${{ steps.cache-check.outputs.is-cached != 'true' }}
        shell: bash
        run: cmake --install '${{ env.ci_build_dir }}' --config Release

      - uses: actions/upload-artifact@v4
        if: ${{ steps.cache-check.outputs.is-cached != 'true' }}
        with:
          name: '${{ env.ARTIFACT_ID_TOOLS }}-${{ env.SHORT_SHA }}'
          path: ${{ env.ci_sdk_dir }}

  Windows:
    if: |
      github.event.pull_request.draft == false &&
      (inputs.ci_jobs == '' ||
       contains(inputs.ci_jobs, 'Windows'))
    runs-on: windows-2022
    needs: [CheckSkipCI]

    strategy:
      fail-fast: false
      matrix:
        ci_arch:
          - x64
          - x86
        ci_lib_type:
          - dll
          - lib
        ci_compiler:
          - msvc
          # TODO: Enable MinGW when the issue with crnlib is fixed
          # - mingw
        # MinGW debug builds require too much memory
        #exclude:
        #  - ci_compiler: mingw
        #    ci_build_type: dbg
    env:
      ci_platform: windows
      ci_arch: ${{ matrix.ci_arch }}
      ci_lib_type: ${{ matrix.ci_lib_type }}
      ci_compiler: ${{ matrix.ci_compiler }}
      ci_release_sdk: ${{
                        (matrix.ci_arch == 'x64')           &&
                        (matrix.ci_lib_type == 'dll')       &&
                        (github.repository == 'rbfx/rbfx')  &&
                        (github.ref == 'refs/heads/master')
                      }}
      ci_release_bin: ${{
                        (matrix.ci_arch == 'x64')           &&
                        (matrix.ci_lib_type == 'dll')       &&
                        (github.repository == 'rbfx/rbfx')  &&
                        (github.ref == 'refs/heads/master')
                      }}
      ci_itch: ${{ (github.ref == 'refs/heads/master') }}
      BUTLER_API_KEY: ${{ secrets.BUTLER_API_KEY }}
      CMAKE_PREFIX_PATH: ${{ github.workspace }}/cached-sdk

    steps:
      - uses: actions/checkout@v5
        with:
          path: ${{ env.ci_source_dir }}
          fetch-depth: 1

      - name: Gather information
        shell: bash
        run: |
          # Gather values
          SHORT_SHA=$(echo ${GITHUB_SHA} | cut -c1-8)
          BUILD_ID='${{ github.job }}-${{ matrix.ci_compiler }}-${{ matrix.ci_lib_type }}-${{ matrix.ci_arch }}'
          CACHE_ID="${{ env.ccache_prefix }}-$BUILD_ID"
          HASH_THIRDPARTY=$(cmake -DDIRECTORY_PATH="${{ env.ci_source_dir }}/Source/ThirdParty" -DHASH_FORMAT=short -P "${{ env.ci_source_dir }}/CMake/Modules/GetThirdPartyHash.cmake" 2>&1)
          ARTIFACT_ID_SDK="rbfx-$BUILD_ID-$HASH_THIRDPARTY"

          # Display values
          echo "SHORT_SHA=$SHORT_SHA"
          echo "BUILD_ID=$BUILD_ID"
          echo "CACHE_ID=$CACHE_ID"
          echo "HASH_THIRDPARTY=$HASH_THIRDPARTY"
          echo "ARTIFACT_ID_SDK=$ARTIFACT_ID_SDK"

          # Save values to environment
          echo "SHORT_SHA=$SHORT_SHA" >> $GITHUB_ENV
          echo "BUILD_ID=$BUILD_ID" >> $GITHUB_ENV
          echo "CACHE_ID=$CACHE_ID" >> $GITHUB_ENV
          echo "HASH_THIRDPARTY=$HASH_THIRDPARTY" >> $GITHUB_ENV
          echo "ARTIFACT_ID_SDK=$ARTIFACT_ID_SDK" >> $GITHUB_ENV

      - name: Set up butler
        if: ${{ (env.ci_itch == 'true') && (vars.DISABLE_ITCH != 'true') }}
        uses: jdno/setup-butler@v1

      - name: Build Cache
        uses: actions/cache@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ env.CACHE_ID }}-${{ env.SHORT_SHA }}
          restore-keys: |
            ${{ env.CACHE_ID }}

      - name: Setup dotnet
        uses: actions/setup-dotnet@v4
        if: matrix.ci_lib_type == 'dll'
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Setup cmake
        # FIXME: CMake installed by this action fails with MinGW because it can find 'C:/Program Files/Git/usr/bin/sh.exe' on PATH.
        if: matrix.ci_compiler != 'mingw'
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: '${{ env.CMAKE_VERSION }}'

      - name: Download cached SDK
        id: cached_sdk
        if: ${{ !contains(github.event.head_commit.message, '#skip-thirdparty') }}
        shell: bash
        run: echo "sdk-cached=$(bash '${{ env.ci_source_dir }}/script/ci_download_artifact.sh' "$ARTIFACT_ID_SDK" '${{ github.token }}' '${{ github.repository }}' '${{ github.workspace }}/cached-sdk')" >> "$GITHUB_OUTPUT"

      - name: Dependencies
        shell: bash
        run: ${{ env.ci_build_script }} dependencies

      - name: Generate
        shell: bash
        run: ${{ env.ci_build_script }} generate

      - name: Build Debug
        shell: bash
        run: ${{ env.ci_build_script }} build dbg

      - name: Test Debug (Native)
        if: matrix.ci_compiler == 'msvc'
        shell: bash
        run: ${{ env.ci_build_script }} test dbg

      - name: Test Debug (Managed)
        # TODO: Fix C# on x86, issue #733.
        if: (matrix.ci_compiler == 'msvc') && (matrix.ci_lib_type == 'dll') && (matrix.ci_arch == 'x64')
        shell: bash
        run: ${{ env.ci_build_script }} cstest dbg

      - name: Install Debug
        if: steps.cached_sdk.outputs.sdk-cached != 'true'
        shell: bash
        run: ${{ env.ci_build_script }} install dbg

      - name: Build Release
        shell: bash
        run: ${{ env.ci_build_script }} build rel

      - name: Test Release (Native)
        if: matrix.ci_compiler == 'msvc'
        shell: bash
        run: ${{ env.ci_build_script }} test rel

      - name: Test Release (Managed)
        # TODO: Fix C# on x86, issue #733.
        if: (matrix.ci_compiler == 'msvc') && (matrix.ci_lib_type == 'dll') && (matrix.ci_arch == 'x64')
        shell: bash
        run: ${{ env.ci_build_script }} cstest rel

      - name: Install Release
        if: steps.cached_sdk.outputs.sdk-cached != 'true'
        shell: bash
        run: ${{ env.ci_build_script }} install rel

      - uses: actions/upload-artifact@v4
        if: steps.cached_sdk.outputs.sdk-cached != 'true'
        with:
          name: '${{ env.ARTIFACT_ID_SDK }}-${{ env.SHORT_SHA }}'
          path: ${{ env.ci_sdk_dir }}

      - name: Zip SDK
        if: ${{ env.ci_release_sdk == 'true' && steps.cached_sdk.outputs.sdk-cached != 'true' }}
        uses: TheDoctor0/zip-release@0.7.6
        with:
          directory: ${{ github.workspace }}
          filename: ${{ github.workspace }}/SDK.zip
          path: 'SDK'
          exclusions: 'SDK/cmake-build SDK/SDK'

      - name: Release SDK
        if: ${{ env.ci_release_sdk == 'true' && steps.cached_sdk.outputs.sdk-cached != 'true' }}
        uses: WebFreak001/deploy-nightly@v3.0.0
        with:
          upload_url: ${{ env.ci_latest_release_url }}
          release_id: ${{ env.ci_latest_release_id }}
          asset_path: ${{ github.workspace }}/SDK.zip
          asset_name: 'rebelfork-sdk-${{ github.job }}-${{ matrix.ci_compiler }}-${{ matrix.ci_lib_type }}-${{ matrix.ci_arch }}-latest.zip'
          asset_content_type: application/zip
          max_releases: 1

      - name: Zip binaries
        if: ${{ env.ci_release_bin == 'true' }}
        uses: TheDoctor0/zip-release@0.7.6
        with:
          directory: ${{ github.workspace }}/SDK/bin/RelWithDebInfo/
          filename: ${{ github.workspace }}/SDK-bin.zip
          path: '.'

      - name: Release binaries
        if: ${{ env.ci_release_bin == 'true' }}
        uses: WebFreak001/deploy-nightly@v3.0.0
        with:
          upload_url: ${{ env.ci_latest_release_url }}
          release_id: ${{ env.ci_latest_release_id }}
          asset_path: ${{ github.workspace }}/SDK-bin.zip
          asset_name: 'rebelfork-bin-${{ github.job }}-${{ matrix.ci_compiler }}-${{ matrix.ci_lib_type }}-${{ matrix.ci_arch }}-latest.zip'
          asset_content_type: application/zip
          max_releases: 1

      - name: Publish to itch.io
        if: ${{ (env.ci_itch == 'true') && (vars.DISABLE_ITCH != 'true') }}
        shell: bash
        run: ${{ env.ci_build_script }} publish-to-itch

  UWP:
    if: |
      github.event.pull_request.draft == false &&
      (inputs.ci_jobs == '' ||
       contains(inputs.ci_jobs, 'UWP'))
    runs-on: windows-2022
    needs: [CheckSkipCI, Windows-Tools]

    strategy:
      fail-fast: false
      matrix:
        ci_arch:
          - x64
          - arm64
        ci_lib_type:
          - dll
          - lib
        ci_compiler:
          - msvc

    env:
      ci_platform: uwp
      ci_arch: ${{ matrix.ci_arch }}
      ci_lib_type: ${{ matrix.ci_lib_type }}
      ci_compiler: ${{ matrix.ci_compiler }}
      CMAKE_PREFIX_PATH: ${{ github.workspace }}/host-sdk

    steps:
      - uses: actions/checkout@v5
        with:
          path: ${{ env.ci_source_dir }}
          fetch-depth: 1

      - name: Gather information
        shell: bash
        run: |
          # Gather values
          SHORT_SHA=$(echo ${GITHUB_SHA} | cut -c1-8)
          BUILD_ID='${{ github.job }}-${{ matrix.ci_compiler }}-${{ matrix.ci_lib_type }}-${{ matrix.ci_arch }}'
          CACHE_ID="${{ env.ccache_prefix }}-$BUILD_ID"
          HASH_THIRDPARTY=$(cmake -DDIRECTORY_PATH="${{ env.ci_source_dir }}/Source/ThirdParty" -DHASH_FORMAT=short -P "${{ env.ci_source_dir }}/CMake/Modules/GetThirdPartyHash.cmake" 2>&1)
          HASH_TOOLS=$(cmake -DDIRECTORY_PATH="${{ env.ci_source_dir }}/Source/Tools" -DHASH_FORMAT=short -P "${{ env.ci_source_dir }}/CMake/Modules/GetThirdPartyHash.cmake" 2>&1)
          ARTIFACT_ID_TOOLS="rbfx-Windows-Tools-$HASH_TOOLS-$HASH_THIRDPARTY"
          ARTIFACT_ID_SDK="rbfx-$BUILD_ID-$HASH_THIRDPARTY"

          # Display values
          echo "SHORT_SHA=$SHORT_SHA"
          echo "BUILD_ID=$BUILD_ID"
          echo "CACHE_ID=$CACHE_ID"
          echo "HASH_THIRDPARTY=$HASH_THIRDPARTY"
          echo "HASH_TOOLS=$HASH_TOOLS"
          echo "ARTIFACT_ID_TOOLS=$ARTIFACT_ID_TOOLS"
          echo "ARTIFACT_ID_SDK=$ARTIFACT_ID_SDK"

          # Save values to environment
          echo "SHORT_SHA=$SHORT_SHA" >> $GITHUB_ENV
          echo "BUILD_ID=$BUILD_ID" >> $GITHUB_ENV
          echo "CACHE_ID=$CACHE_ID" >> $GITHUB_ENV
          echo "HASH_THIRDPARTY=$HASH_THIRDPARTY" >> $GITHUB_ENV
          echo "HASH_TOOLS=$HASH_TOOLS" >> $GITHUB_ENV
          echo "ARTIFACT_ID_TOOLS=$ARTIFACT_ID_TOOLS" >> $GITHUB_ENV
          echo "ARTIFACT_ID_SDK=$ARTIFACT_ID_SDK" >> $GITHUB_ENV

      - name: Download cached SDK
        id: cached_sdk
        if: ${{ !contains(github.event.head_commit.message, '#skip-thirdparty') }}
        shell: bash
        run: echo "sdk-cached=$(bash '${{ env.ci_source_dir }}/script/ci_download_artifact.sh' "$ARTIFACT_ID_SDK" '${{ github.token }}' '${{ github.repository }}' '${{ github.workspace }}/cached-sdk')" >> "$GITHUB_OUTPUT"

      - name: Download cached tools
        id: cached_tools
        shell: bash
        run: bash '${{ env.ci_source_dir }}/script/ci_download_artifact.sh' "$ARTIFACT_ID_TOOLS" '${{ github.token }}' '${{ github.repository }}' '${{ github.workspace }}/host-sdk' --required

      - name: Build Cache
        uses: actions/cache@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ env.CACHE_ID }}-${{ env.SHORT_SHA }}
          restore-keys: |
            ${{ env.CACHE_ID }}

      - name: Install Windows 10 SDK 20348
        run: choco install windows-sdk-10-version-2104-all -y

      - name: Setup dotnet
        uses: actions/setup-dotnet@v4
        if: matrix.ci_lib_type == 'dll'
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: '${{ env.CMAKE_VERSION }}'

      - name: Dependencies
        shell: bash
        run: ${{ env.ci_build_script }} dependencies

      - name: Generate
        shell: bash
        run: ${{ env.ci_build_script }} generate

      - name: Build Debug
        shell: bash
        run: ${{ env.ci_build_script }} build dbg

      - name: Install Debug
        if: steps.cached_sdk.outputs.sdk-cached != 'true'
        shell: bash
        run: ${{ env.ci_build_script }} install dbg

      - name: Build Release
        shell: bash
        run: ${{ env.ci_build_script }} build rel

      - name: Install Release
        if: steps.cached_sdk.outputs.sdk-cached != 'true'
        shell: bash
        run: ${{ env.ci_build_script }} install rel

      - uses: actions/upload-artifact@v4
        if: steps.cached_sdk.outputs.sdk-cached != 'true'
        with:
          name: '${{ env.ARTIFACT_ID_SDK }}-${{ env.SHORT_SHA }}'
          path: ${{ env.ci_sdk_dir }}

  Linux:
    if: |
      github.event.pull_request.draft == false &&
      (inputs.ci_jobs == '' ||
       contains(inputs.ci_jobs, 'Linux'))
    runs-on: ubuntu-latest
    needs: [CheckSkipCI]

    strategy:
      fail-fast: false
      matrix:
        ci_arch:
          - x64
          # - x86           # TODO: Build script does not implement this fully.
        ci_lib_type:
          - dll
          - lib
        ci_compiler:
          - gcc
          - clang

    env:
      ci_platform: linux
      ci_arch: ${{ matrix.ci_arch }}
      ci_lib_type: ${{ matrix.ci_lib_type }}
      ci_compiler: ${{ matrix.ci_compiler }}
      ci_release_sdk: ${{
                        (matrix.ci_arch == 'x64')           &&
                        (matrix.ci_lib_type == 'dll')       &&
                        (github.repository == 'rbfx/rbfx')  &&
                        (github.ref == 'refs/heads/master')
                      }}
      ci_release_bin: ${{
                        (matrix.ci_arch == 'x64')           &&
                        (matrix.ci_lib_type == 'dll')       &&
                        (github.repository == 'rbfx/rbfx')  &&
                        (github.ref == 'refs/heads/master')
                      }}
      ci_itch: ${{ (github.ref == 'refs/heads/master') }}
      BUTLER_API_KEY: ${{ secrets.BUTLER_API_KEY }}

    steps:
      - uses: actions/checkout@v5
        with:
          path: ${{ env.ci_source_dir }}
          fetch-depth: 1

      - name: Gather information
        shell: bash
        run: |
          # Gather values
          SHORT_SHA=$(echo ${GITHUB_SHA} | cut -c1-8)
          BUILD_ID='${{ github.job }}-${{ matrix.ci_compiler }}-${{ matrix.ci_lib_type }}-${{ matrix.ci_arch }}'
          CACHE_ID="${{ env.ccache_prefix }}-$BUILD_ID"
          HASH_THIRDPARTY=$(cmake -DDIRECTORY_PATH="${{ env.ci_source_dir }}/Source/ThirdParty" -DHASH_FORMAT=short -P "${{ env.ci_source_dir }}/CMake/Modules/GetThirdPartyHash.cmake" 2>&1)
          ARTIFACT_ID_SDK="rbfx-$BUILD_ID-$HASH_THIRDPARTY"

          # Display values
          echo "SHORT_SHA=$SHORT_SHA"
          echo "BUILD_ID=$BUILD_ID"
          echo "CACHE_ID=$CACHE_ID"
          echo "HASH_THIRDPARTY=$HASH_THIRDPARTY"
          echo "ARTIFACT_ID_SDK=$ARTIFACT_ID_SDK"

          # Save values to environment
          echo "SHORT_SHA=$SHORT_SHA" >> $GITHUB_ENV
          echo "BUILD_ID=$BUILD_ID" >> $GITHUB_ENV
          echo "CACHE_ID=$CACHE_ID" >> $GITHUB_ENV
          echo "HASH_THIRDPARTY=$HASH_THIRDPARTY" >> $GITHUB_ENV
          echo "ARTIFACT_ID_SDK=$ARTIFACT_ID_SDK" >> $GITHUB_ENV

      - name: Set up butler
        if: ${{ (env.ci_itch == 'true') && (vars.DISABLE_ITCH != 'true') }}
        uses: jdno/setup-butler@v1

      - name: Build Cache
        uses: actions/cache@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ env.CACHE_ID }}-${{ env.SHORT_SHA }}
          restore-keys: |
            ${{ env.CACHE_ID }}

      - name: Download cached SDK
        id: cached_sdk
        if: ${{ !contains(github.event.head_commit.message, '#skip-thirdparty') }}
        shell: bash
        run: echo "sdk-cached=$(bash '${{ env.ci_source_dir }}/script/ci_download_artifact.sh' "$ARTIFACT_ID_SDK" '${{ github.token }}' '${{ github.repository }}' '${{ github.workspace }}/cached-sdk')" >> "$GITHUB_OUTPUT"

      - name: Setup dotnet
        uses: actions/setup-dotnet@v4
        if: matrix.ci_lib_type == 'dll'
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: '${{ env.CMAKE_VERSION }}'

      - name: Dependencies
        shell: bash
        run: ${{ env.ci_build_script }} dependencies

      - name: Generate
        shell: bash
        run: ${{ env.ci_build_script }} generate

      - name: Build Debug
        shell: bash
        run: ${{ env.ci_build_script }} build dbg

      - name: Test Debug (Native)
        shell: bash
        run: ${{ env.ci_build_script }} test dbg

      - name: Install Debug
        if: steps.cached_sdk.outputs.sdk-cached != 'true'
        shell: bash
        run: ${{ env.ci_build_script }} install dbg

      - name: Build Release
        shell: bash
        run: ${{ env.ci_build_script }} build rel

      - name: Test Release (Native)
        shell: bash
        run: ${{ env.ci_build_script }} test rel

      - name: Install Release
        if: steps.cached_sdk.outputs.sdk-cached != 'true'
        shell: bash
        run: ${{ env.ci_build_script }} install rel

      - uses: actions/upload-artifact@v4
        if: steps.cached_sdk.outputs.sdk-cached != 'true'
        with:
          name: '${{ env.ARTIFACT_ID_SDK }}-${{ env.SHORT_SHA }}'
          path: ${{ env.ci_sdk_dir }}

      - name: Zip SDK
        if: ${{ env.ci_release_sdk == 'true' && steps.cached_sdk.outputs.sdk-cached != 'true' }}
        uses: TheDoctor0/zip-release@0.7.6
        with:
          directory: ${{ github.workspace }}
          filename: ${{ github.workspace }}/SDK.zip
          path: 'SDK'
          exclusions: '/SDK/cmake-build/* /SDK/SDK/*'

      - name: Release SDK
        if: ${{ env.ci_release_sdk == 'true' && steps.cached_sdk.outputs.sdk-cached != 'true' }}
        uses: WebFreak001/deploy-nightly@v3.0.0
        with:
          upload_url: ${{ env.ci_latest_release_url }}
          release_id: ${{ env.ci_latest_release_id }}
          asset_path: ${{ github.workspace }}/SDK.zip
          asset_name: 'rebelfork-sdk-${{ github.job }}-${{ matrix.ci_compiler }}-${{ matrix.ci_lib_type }}-${{ matrix.ci_arch }}-latest.zip'
          asset_content_type: application/zip
          max_releases: 1

      - name: Zip binaries
        if: ${{ env.ci_release_bin == 'true' }}
        uses: TheDoctor0/zip-release@0.7.6
        with:
          directory: ${{ github.workspace }}/SDK/bin/
          filename: ${{ github.workspace }}/SDK-bin.zip
          path: '.'
          exclusions: '/Autoload/* /CoreData/* /Data/* /EditorData/* /shell.html'

      - name: Release binaries
        if: ${{ env.ci_release_bin == 'true' }}
        uses: WebFreak001/deploy-nightly@v3.0.0
        with:
          upload_url: ${{ env.ci_latest_release_url }}
          release_id: ${{ env.ci_latest_release_id }}
          asset_path: ${{ env.ci_sdk_dir }}-bin.zip
          asset_name: 'rebelfork-bin-${{ github.job }}-${{ matrix.ci_compiler }}-${{ matrix.ci_lib_type }}-${{ matrix.ci_arch }}-latest.zip'
          asset_content_type: application/zip
          max_releases: 1

      - name: Publish to itch.io
        if: ${{ (env.ci_itch == 'true') && (vars.DISABLE_ITCH != 'true') }}
        shell: bash
        run: ${{ env.ci_build_script }} publish-to-itch

  MacOS:
    if: |
      github.event.pull_request.draft == false &&
      (inputs.ci_jobs == '' ||
       contains(inputs.ci_jobs, 'MacOS'))
    runs-on: macos-13
    needs: [CheckSkipCI]

    strategy:
      fail-fast: false
      matrix:
        ci_arch:
          - x64
          # - x86           # TODO: Untested.
        ci_lib_type:
          - dll
          - lib
        ci_compiler:
          - clang

    env:
      ci_platform: macos
      ci_arch: ${{ matrix.ci_arch }}
      ci_lib_type: ${{ matrix.ci_lib_type }}
      ci_compiler: ${{ matrix.ci_compiler }}
      ci_release_sdk: ${{
                        (matrix.ci_arch == 'x64')           &&
                        (matrix.ci_lib_type == 'dll')       &&
                        (github.repository == 'rbfx/rbfx')  &&
                        (github.ref == 'refs/heads/master')
                      }}
      ci_release_bin: ${{
                        (matrix.ci_arch == 'x64')           &&
                        (matrix.ci_lib_type == 'dll')       &&
                        (github.repository == 'rbfx/rbfx')  &&
                        (github.ref == 'refs/heads/master')
                      }}
      ci_itch: ${{ (github.ref == 'refs/heads/master') }}
      BUTLER_API_KEY: ${{ secrets.BUTLER_API_KEY }}

    steps:
      - uses: actions/checkout@v5
        with:
          path: ${{ env.ci_source_dir }}
          fetch-depth: 1

      - name: Gather information
        shell: bash
        run: |
          # Gather values
          SHORT_SHA=$(echo ${GITHUB_SHA} | cut -c1-8)
          BUILD_ID='${{ github.job }}-${{ matrix.ci_compiler }}-${{ matrix.ci_lib_type }}-${{ matrix.ci_arch }}'
          CACHE_ID="${{ env.ccache_prefix }}-$BUILD_ID"
          HASH_THIRDPARTY=$(cmake -DDIRECTORY_PATH="${{ env.ci_source_dir }}/Source/ThirdParty" -DHASH_FORMAT=short -P "${{ env.ci_source_dir }}/CMake/Modules/GetThirdPartyHash.cmake" 2>&1)
          ARTIFACT_ID_SDK="rbfx-$BUILD_ID-$HASH_THIRDPARTY"

          # Display values
          echo "SHORT_SHA=$SHORT_SHA"
          echo "BUILD_ID=$BUILD_ID"
          echo "CACHE_ID=$CACHE_ID"
          echo "HASH_THIRDPARTY=$HASH_THIRDPARTY"
          echo "ARTIFACT_ID_SDK=$ARTIFACT_ID_SDK"

          # Save values to environment
          echo "SHORT_SHA=$SHORT_SHA" >> $GITHUB_ENV
          echo "BUILD_ID=$BUILD_ID" >> $GITHUB_ENV
          echo "CACHE_ID=$CACHE_ID" >> $GITHUB_ENV
          echo "HASH_THIRDPARTY=$HASH_THIRDPARTY" >> $GITHUB_ENV
          echo "ARTIFACT_ID_SDK=$ARTIFACT_ID_SDK" >> $GITHUB_ENV

      - name: Set up butler
        if: ${{ (env.ci_itch == 'true') && (vars.DISABLE_ITCH != 'true') }}
        uses: jdno/setup-butler@v1

      - name: Build Cache
        uses: actions/cache@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ env.CACHE_ID }}-${{ env.SHORT_SHA }}
          restore-keys: |
            ${{ env.CACHE_ID }}

      - name: Bash
        shell: bash
        run: brew install bash

      - name: Setup dotnet
        uses: actions/setup-dotnet@v4
        if: matrix.ci_lib_type == 'dll'
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: '${{ env.CMAKE_VERSION }}'

      - name: Download cached SDK
        id: cached_sdk
        if: ${{ !contains(github.event.head_commit.message, '#skip-thirdparty') }}
        shell: bash
        run: echo "sdk-cached=$(bash '${{ env.ci_source_dir }}/script/ci_download_artifact.sh' "$ARTIFACT_ID_SDK" '${{ github.token }}' '${{ github.repository }}' '${{ github.workspace }}/cached-sdk')" >> "$GITHUB_OUTPUT"

      - name: Dependencies
        shell: bash
        run: ${{ env.ci_build_script }} dependencies

      - name: Generate
        shell: bash
        run: ${{ env.ci_build_script }} generate

      - name: Build Debug
        shell: bash
        run: ${{ env.ci_build_script }} build dbg

      - name: Install Debug
        if: steps.cached_sdk.outputs.sdk-cached != 'true'
        shell: bash
        run: ${{ env.ci_build_script }} install dbg

      - name: Build Release
        shell: bash
        run: ${{ env.ci_build_script }} build rel

      - name: Install Release
        if: steps.cached_sdk.outputs.sdk-cached != 'true'
        shell: bash
        run: ${{ env.ci_build_script }} install rel

      - uses: actions/upload-artifact@v4
        if: steps.cached_sdk.outputs.sdk-cached != 'true'
        with:
          name: '${{ env.ARTIFACT_ID_SDK }}-${{ env.SHORT_SHA }}'
          path: ${{ env.ci_sdk_dir }}

      - name: Zip SDK
        if: ${{ env.ci_release_sdk == 'true' && steps.cached_sdk.outputs.sdk-cached != 'true' }}
        uses: TheDoctor0/zip-release@0.7.6
        with:
          directory: ${{ github.workspace }}
          filename: ${{ github.workspace }}/SDK.zip
          path: 'SDK'
          exclusions: '/SDK/cmake-build/* /SDK/obj/*'

      - name: Release SDK
        if: ${{ env.ci_release_sdk == 'true' && steps.cached_sdk.outputs.sdk-cached != 'true' }}
        uses: WebFreak001/deploy-nightly@v3.0.0
        with:
          upload_url: ${{ env.ci_latest_release_url }}
          release_id: ${{ env.ci_latest_release_id }}
          asset_path: ${{ env.ci_sdk_dir }}.zip
          asset_name: 'rebelfork-sdk-${{ github.job }}-${{ matrix.ci_compiler }}-${{ matrix.ci_lib_type }}-${{ matrix.ci_arch }}-latest.zip'
          asset_content_type: application/zip
          max_releases: 1

      - name: Zip binaries
        if: ${{ env.ci_release_bin == 'true' }}
        uses: TheDoctor0/zip-release@0.7.6
        with:
          directory: ${{ github.workspace }}/SDK/bin/
          filename: ${{ github.workspace }}/SDK-bin.zip
          path: '.'
          exclusions: '/Autoload/* /CoreData/* /Data/* /EditorData/* /shell.html'

      - name: Release binaries
        if: ${{ env.ci_release_bin == 'true' }}
        uses: WebFreak001/deploy-nightly@v3.0.0
        with:
          upload_url: ${{ env.ci_latest_release_url }}
          release_id: ${{ env.ci_latest_release_id }}
          asset_path: ${{ env.ci_sdk_dir }}-bin.zip
          asset_name: 'rebelfork-bin-${{ github.job }}-${{ matrix.ci_compiler }}-${{ matrix.ci_lib_type }}-${{ matrix.ci_arch }}-latest.zip'
          asset_content_type: application/zip
          max_releases: 1

      - name: Publish to itch.io
        if: ${{ (env.ci_itch == 'true') && (vars.DISABLE_ITCH != 'true') }}
        shell: bash
        run: ${{ env.ci_build_script }} publish-to-itch

  Android:
    if: |
      github.event.pull_request.draft == false &&
      (inputs.ci_jobs == '' ||
       contains(inputs.ci_jobs, 'Android'))
    runs-on: ubuntu-latest
    needs: [CheckSkipCI, Linux-Tools]

    env:
      ci_platform: android
      CMAKE_PREFIX_PATH: ${{ github.workspace }}/host-sdk

    steps:
      - uses: actions/checkout@v5
        with:
          path: ${{ env.ci_source_dir }}
          fetch-depth: 1

      - name: Gather information
        shell: bash
        run: |
          # Gather values
          SHORT_SHA=$(echo ${GITHUB_SHA} | cut -c1-8)
          BUILD_ID='${{ github.job }}'
          CACHE_ID="${{ env.ccache_prefix }}-$BUILD_ID"
          HASH_THIRDPARTY=$(cmake -DDIRECTORY_PATH="${{ env.ci_source_dir }}/Source/ThirdParty" -DHASH_FORMAT=short -P "${{ env.ci_source_dir }}/CMake/Modules/GetThirdPartyHash.cmake" 2>&1)
          HASH_TOOLS=$(cmake -DDIRECTORY_PATH="${{ env.ci_source_dir }}/Source/Tools" -DHASH_FORMAT=short -P "${{ env.ci_source_dir }}/CMake/Modules/GetThirdPartyHash.cmake" 2>&1)
          ARTIFACT_ID_SDK="rbfx-$BUILD_ID-$HASH_THIRDPARTY"
          ARTIFACT_ID_TOOLS="rbfx-Linux-Tools-$HASH_TOOLS-$HASH_THIRDPARTY"

          # Display values
          echo "SHORT_SHA=$SHORT_SHA"
          echo "BUILD_ID=$BUILD_ID"
          echo "CACHE_ID=$CACHE_ID"
          echo "HASH_THIRDPARTY=$HASH_THIRDPARTY"
          echo "HASH_TOOLS=$HASH_TOOLS"
          echo "ARTIFACT_ID_SDK=$ARTIFACT_ID_SDK"
          echo "ARTIFACT_ID_TOOLS=$ARTIFACT_ID_TOOLS"

          # Save values to environment
          echo "SHORT_SHA=$SHORT_SHA" >> $GITHUB_ENV
          echo "BUILD_ID=$BUILD_ID" >> $GITHUB_ENV
          echo "CACHE_ID=$CACHE_ID" >> $GITHUB_ENV
          echo "HASH_THIRDPARTY=$HASH_THIRDPARTY" >> $GITHUB_ENV
          echo "HASH_TOOLS=$HASH_TOOLS" >> $GITHUB_ENV
          echo "ARTIFACT_ID_SDK=$ARTIFACT_ID_SDK" >> $GITHUB_ENV
          echo "ARTIFACT_ID_TOOLS=$ARTIFACT_ID_TOOLS" >> $GITHUB_ENV

      - name: Build Cache
        uses: actions/cache@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ env.CACHE_ID }}-${{ env.SHORT_SHA }}
          restore-keys: |
            ${{ env.CACHE_ID }}

      - name: Download cached SDK
        id: cached_sdk
        if: ${{ !contains(github.event.head_commit.message, '#skip-thirdparty') }}
        shell: bash
        run: echo "sdk-cached=$(bash '${{ env.ci_source_dir }}/script/ci_download_artifact.sh' "$ARTIFACT_ID_SDK" '${{ github.token }}' '${{ github.repository }}' '${{ github.workspace }}/cached-sdk')" >> "$GITHUB_OUTPUT"

      - name: Download cached tools
        id: cached_tools
        shell: bash
        run: bash '${{ env.ci_source_dir }}/script/ci_download_artifact.sh' "$ARTIFACT_ID_TOOLS" '${{ github.token }}' '${{ github.repository }}' '${{ github.workspace }}/host-sdk' --required

      - name: Setup dotnet
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          gradle-version: '8.14.3'

      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: '${{ env.CMAKE_VERSION }}'

      - name: Dependencies
        shell: bash
        run: ${{ env.ci_build_script }} dependencies

      # Not applicable on Android, because build is performed through Gradle.
      #- name: Generate
      #  shell: bash
      #  run: ${{ env.ci_build_script }} generate

      - name: Build Debug
        shell: bash
        run: ${{ env.ci_build_script }} build dbg

      - name: Build Release
        shell: bash
        run: ${{ env.ci_build_script }} build rel

      - name: Install Android SDKs
        if: steps.cached_sdk.outputs.sdk-cached != 'true'
        shell: bash
        run: |
          echo "Installing Android SDKs from CMake build directories..."

          # Find all CMake build directories and install SDKs
          # Directory structure: ${{ env.ci_source_dir }}/android/.cxx/<BuildType>/<RandomString>/<Architecture>
          for build_type in Debug RelWithDebInfo; do
            for random_dir in ${{ env.ci_source_dir }}/android/.cxx/$build_type/*/; do
              if [ -d "$random_dir" ]; then
                echo "Found build directory: $random_dir"

                # Process each architecture within the random directory
                for arch in arm64-v8a x86_64 armeabi-v7a; do
                  arch_path="${random_dir}${arch}"
                  if [ -d "$arch_path" ]; then
                    # Create install directory for this specific combination
                    install_dir="${{ github.workspace }}/android-sdk-${build_type}-${arch}"
                    echo "Installing SDK for $build_type $arch to $install_dir..."
                    cmake --install "$arch_path" --config $build_type --prefix "$install_dir" || echo "Warning: Install failed for $build_type $arch"
                  fi
                done
              fi
            done
          done

          echo "Android SDK installation complete."

      - uses: actions/upload-artifact@v4
        with:
          name: 'rbfx-${{ github.job }}-apks-${{ github.sha }}'
          path: '**/*.apk'

      # Upload Android SDKs as separate artifacts
      - uses: actions/upload-artifact@v4
        if: steps.cached_sdk.outputs.sdk-cached != 'true'
        with:
          name: 'rbfx-${{ github.job }}-sdk-Debug-arm64-v8a-${{ github.sha }}'
          path: '${{ github.workspace }}/android-sdk-Debug-arm64-v8a'
          if-no-files-found: warn

      - uses: actions/upload-artifact@v4
        if: steps.cached_sdk.outputs.sdk-cached != 'true'
        with:
          name: 'rbfx-${{ github.job }}-sdk-Debug-x86_64-${{ github.sha }}'
          path: '${{ github.workspace }}/android-sdk-Debug-x86_64'
          if-no-files-found: warn

      - uses: actions/upload-artifact@v4
        if: steps.cached_sdk.outputs.sdk-cached != 'true'
        with:
          name: 'rbfx-${{ github.job }}-sdk-Debug-armeabi-v7a-${{ github.sha }}'
          path: '${{ github.workspace }}/android-sdk-Debug-armeabi-v7a'
          if-no-files-found: warn

      - uses: actions/upload-artifact@v4
        if: steps.cached_sdk.outputs.sdk-cached != 'true'
        with:
          name: 'rbfx-${{ github.job }}-sdk-RelWithDebInfo-arm64-v8a-${{ github.sha }}'
          path: '${{ github.workspace }}/android-sdk-RelWithDebInfo-arm64-v8a'
          if-no-files-found: warn

      - uses: actions/upload-artifact@v4
        if: steps.cached_sdk.outputs.sdk-cached != 'true'
        with:
          name: 'rbfx-${{ github.job }}-sdk-RelWithDebInfo-x86_64-${{ github.sha }}'
          path: '${{ github.workspace }}/android-sdk-RelWithDebInfo-x86_64'
          if-no-files-found: warn

      - uses: actions/upload-artifact@v4
        if: steps.cached_sdk.outputs.sdk-cached != 'true'
        with:
          name: 'rbfx-${{ github.job }}-sdk-RelWithDebInfo-armeabi-v7a-${{ github.sha }}'
          path: '${{ github.workspace }}/android-sdk-RelWithDebInfo-armeabi-v7a'
          if-no-files-found: warn

  iOS:
    if: |
      github.event.pull_request.draft == false &&
      (inputs.ci_jobs == '' ||
       contains(inputs.ci_jobs, 'iOS'))
    runs-on: macos-13
    needs: [CheckSkipCI, MacOS-Tools]

    strategy:
      fail-fast: false
      matrix:
        ci_lib_type:
          # - dll           # TODO: Linker error failing to find SDL_main.
          - lib

    env:
      ci_platform: ios
      ci_lib_type: ${{ matrix.ci_lib_type }}
      ci_artifacts: ${{ (
                          github.ref == 'refs/heads/master'           ||
                          startsWith(github.ref, 'refs/tags/nuget/')  ||
                          startsWith(github.ref, 'refs/heads/nuget/')
                        )
                    }}
      CMAKE_PREFIX_PATH: ${{ github.workspace }}/host-sdk

    steps:
      - uses: actions/checkout@v5
        with:
          path: ${{ env.ci_source_dir }}
          fetch-depth: 1

      - name: Gather information
        shell: bash
        run: |
          # Gather values
          SHORT_SHA=$(echo ${GITHUB_SHA} | cut -c1-8)
          BUILD_ID='${{ github.job }}-${{ matrix.ci_lib_type }}'
          CACHE_ID="${{ env.ccache_prefix }}-$BUILD_ID"
          HASH_THIRDPARTY=$(cmake -DDIRECTORY_PATH="${{ env.ci_source_dir }}/Source/ThirdParty" -DHASH_FORMAT=short -P "${{ env.ci_source_dir }}/CMake/Modules/GetThirdPartyHash.cmake" 2>&1)
          HASH_TOOLS=$(cmake -DDIRECTORY_PATH="${{ env.ci_source_dir }}/Source/Tools" -DHASH_FORMAT=short -P "${{ env.ci_source_dir }}/CMake/Modules/GetThirdPartyHash.cmake" 2>&1)
          ARTIFACT_ID_SDK="rbfx-$BUILD_ID-$HASH_THIRDPARTY"
          ARTIFACT_ID_TOOLS="rbfx-MacOS-Tools-$HASH_TOOLS-$HASH_THIRDPARTY"

          # Display values
          echo "SHORT_SHA=$SHORT_SHA"
          echo "BUILD_ID=$BUILD_ID"
          echo "CACHE_ID=$CACHE_ID"
          echo "HASH_THIRDPARTY=$HASH_THIRDPARTY"
          echo "HASH_TOOLS=$HASH_TOOLS"
          echo "ARTIFACT_ID_SDK=$ARTIFACT_ID_SDK"
          echo "ARTIFACT_ID_TOOLS=$ARTIFACT_ID_TOOLS"

          # Save values to environment
          echo "SHORT_SHA=$SHORT_SHA" >> $GITHUB_ENV
          echo "BUILD_ID=$BUILD_ID" >> $GITHUB_ENV
          echo "CACHE_ID=$CACHE_ID" >> $GITHUB_ENV
          echo "HASH_THIRDPARTY=$HASH_THIRDPARTY" >> $GITHUB_ENV
          echo "HASH_TOOLS=$HASH_TOOLS" >> $GITHUB_ENV
          echo "ARTIFACT_ID_SDK=$ARTIFACT_ID_SDK" >> $GITHUB_ENV
          echo "ARTIFACT_ID_TOOLS=$ARTIFACT_ID_TOOLS" >> $GITHUB_ENV

      - name: Build Cache
        uses: actions/cache@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ env.CACHE_ID }}-${{ env.SHORT_SHA }}
          restore-keys: |
            ${{ env.CACHE_ID }}

      - name: Download cached SDK
        id: cached_sdk
        if: ${{ !contains(github.event.head_commit.message, '#skip-thirdparty') }}
        shell: bash
        run: echo "sdk-cached=$(bash '${{ env.ci_source_dir }}/script/ci_download_artifact.sh' "$ARTIFACT_ID_SDK" '${{ github.token }}' '${{ github.repository }}' '${{ github.workspace }}/cached-sdk')" >> "$GITHUB_OUTPUT"

      - name: Download cached tools
        id: cached_tools
        shell: bash
        run: bash '${{ env.ci_source_dir }}/script/ci_download_artifact.sh' "$ARTIFACT_ID_TOOLS" '${{ github.token }}' '${{ github.repository }}' '${{ github.workspace }}/host-sdk' --required

      - name: Setup dotnet
        uses: actions/setup-dotnet@v4
        if: matrix.ci_lib_type == 'dll'
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: '${{ env.CMAKE_VERSION }}'

      - name: Bash
        shell: bash
        run: brew install bash

      - name: Dependencies
        shell: bash
        run: ${{ env.ci_build_script }} dependencies

      - name: Generate
        shell: bash
        run: ${{ env.ci_build_script }} generate

      - name: Build Debug
        shell: bash
        run: ${{ env.ci_build_script }} build dbg

      - name: Build Release
        shell: bash
        run: ${{ env.ci_build_script }} build rel

      - uses: actions/upload-artifact@v4
        if: env.ci_artifacts == 'true'
        with:
          name: 'rbfx-${{ github.job }}-${{ env.ci_lib_type }}-${{ github.sha }}'
          path: '**/*.app'

  Web:
    if: |
      github.event.pull_request.draft == false &&
      (inputs.ci_jobs == '' ||
       contains(inputs.ci_jobs, 'Web'))
    runs-on: ubuntu-latest
    needs: [CheckSkipCI, Linux-Tools]

    strategy:
      fail-fast: false
      matrix:
        ci_lib_type:
          - lib
        ci_emsdk_version:
          - latest

    env:
      BINARYEN_CORES: 1
      ci_platform: web
      ci_lib_type: ${{ matrix.ci_lib_type }}
      ci_release_sdk: ${{
                        (github.repository == 'rbfx/rbfx')  &&
                        (github.ref == 'refs/heads/master')
                      }}
      CMAKE_PREFIX_PATH: ${{ github.workspace }}/host-sdk

    steps:
      - name: Checkout emsdk
        uses: actions/checkout@v5
        with:
          repository: emscripten-core/emsdk
          path: ${{ github.workspace }}/emsdk

      - name: Setup emsdk
        shell: bash
        run: |
          cd ${{ github.workspace }}/emsdk
          ./emsdk install ${{ matrix.ci_emsdk_version }}
          ./emsdk activate ${{ matrix.ci_emsdk_version }}
          echo "PATH=$PATH:${{ github.workspace }}/emsdk:${{ github.workspace }}/emsdk/upstream/emscripten" >> $GITHUB_ENV
          echo "EMSDK=${{ github.workspace }}/emsdk" >> $GITHUB_ENV

      - uses: actions/checkout@v5
        with:
          path: ${{ env.ci_source_dir }}
          fetch-depth: 1

      - name: Gather information
        shell: bash
        run: |
          # Gather values
          SHORT_SHA=$(echo ${GITHUB_SHA} | cut -c1-8)
          BUILD_ID='${{ github.job }}-${{ matrix.ci_lib_type }}'
          CACHE_ID="${{ env.ccache_prefix }}-$BUILD_ID"
          HASH_THIRDPARTY=$(cmake -DDIRECTORY_PATH="${{ env.ci_source_dir }}/Source/ThirdParty" -DHASH_FORMAT=short -P "${{ env.ci_source_dir }}/CMake/Modules/GetThirdPartyHash.cmake" 2>&1)
          HASH_TOOLS=$(cmake -DDIRECTORY_PATH="${{ env.ci_source_dir }}/Source/Tools" -DHASH_FORMAT=short -P "${{ env.ci_source_dir }}/CMake/Modules/GetThirdPartyHash.cmake" 2>&1)
          ARTIFACT_ID_SDK="rbfx-$BUILD_ID-$HASH_THIRDPARTY"
          ARTIFACT_ID_TOOLS="rbfx-Linux-Tools-$HASH_TOOLS-$HASH_THIRDPARTY"

          # Display values
          echo "SHORT_SHA=$SHORT_SHA"
          echo "BUILD_ID=$BUILD_ID"
          echo "CACHE_ID=$CACHE_ID"
          echo "HASH_THIRDPARTY=$HASH_THIRDPARTY"
          echo "HASH_TOOLS=$HASH_TOOLS"
          echo "ARTIFACT_ID_SDK=$ARTIFACT_ID_SDK"
          echo "ARTIFACT_ID_TOOLS=$ARTIFACT_ID_TOOLS"

          # Save values to environment
          echo "SHORT_SHA=$SHORT_SHA" >> $GITHUB_ENV
          echo "BUILD_ID=$BUILD_ID" >> $GITHUB_ENV
          echo "CACHE_ID=$CACHE_ID" >> $GITHUB_ENV
          echo "HASH_THIRDPARTY=$HASH_THIRDPARTY" >> $GITHUB_ENV
          echo "HASH_TOOLS=$HASH_TOOLS" >> $GITHUB_ENV
          echo "ARTIFACT_ID_SDK=$ARTIFACT_ID_SDK" >> $GITHUB_ENV
          echo "ARTIFACT_ID_TOOLS=$ARTIFACT_ID_TOOLS" >> $GITHUB_ENV

      - name: Build Cache
        uses: actions/cache@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ env.CACHE_ID }}-${{ env.SHORT_SHA }}
          restore-keys: |
            ${{ env.CACHE_ID }}

      - name: Download cached SDK
        id: cached_sdk
        if: ${{ !contains(github.event.head_commit.message, '#skip-thirdparty') }}
        shell: bash
        run: echo "sdk-cached=$(bash '${{ env.ci_source_dir }}/script/ci_download_artifact.sh' "$ARTIFACT_ID_SDK" '${{ github.token }}' '${{ github.repository }}' '${{ github.workspace }}/cached-sdk')" >> "$GITHUB_OUTPUT"

      - name: Download cached tools
        id: cached_tools
        shell: bash
        run: bash '${{ env.ci_source_dir }}/script/ci_download_artifact.sh' "$ARTIFACT_ID_TOOLS" '${{ github.token }}' '${{ github.repository }}' '${{ github.workspace }}/host-sdk' --required

      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: '${{ env.CMAKE_VERSION }}'

      - name: Dependencies
        shell: bash
        run: ${{ env.ci_build_script }} dependencies

      - name: Generate
        shell: bash
        run: ${{ env.ci_build_script }} generate

      - name: Build Debug
        shell: bash
        run: ${{ env.ci_build_script }} build dbg

      - name: Install Debug
        if: steps.cached_sdk.outputs.sdk-cached != 'true'
        shell: bash
        run: ${{ env.ci_build_script }} install dbg

      - name: Build Release
        shell: bash
        run: ${{ env.ci_build_script }} build rel

      - name: Install Release
        if: steps.cached_sdk.outputs.sdk-cached != 'true'
        shell: bash
        run: ${{ env.ci_build_script }} install rel

      - name: Deploy
        if: github.repository == 'rbfx/rbfx' && github.ref == 'refs/heads/master'
        uses: peaceiris/actions-gh-pages@v3
        with:
          personal_token: ${{ secrets.RBFX_DOCS_DEPLOY_TOKEN }}
          external_repository: rbfx/rbfx.github.io
          destination_dir: samples
          cname: rebelfork.io
          publish_dir: ${{ env.ci_sdk_dir }}/deploy
          publish_branch: master

      - uses: actions/upload-artifact@v4
        if: steps.cached_sdk.outputs.sdk-cached != 'true'
        with:
          name: '${{ env.ARTIFACT_ID_SDK }}-${{ env.SHORT_SHA }}'
          path: ${{ env.ci_sdk_dir }}

      - name: Zip SDK
        if: ${{ env.ci_release_sdk == 'true' && steps.cached_sdk.outputs.sdk-cached != 'true' }}
        uses: TheDoctor0/zip-release@0.7.6
        with:
          directory: ${{ github.workspace }}
          filename: ${{ github.workspace }}/SDK.zip
          path: 'SDK'
          exclusions: 'SDK/cmake-build SDK/SDK'

      - name: Release SDK
        if: ${{ env.ci_release_sdk == 'true' && steps.cached_sdk.outputs.sdk-cached != 'true' }}
        uses: WebFreak001/deploy-nightly@v3.0.0
        with:
          upload_url: ${{ env.ci_latest_release_url }}
          release_id: ${{ env.ci_latest_release_id }}
          asset_path: ${{ github.workspace }}/SDK.zip
          asset_name: 'rebelfork-sdk-${{ github.job }}-${{ matrix.ci_lib_type }}-latest.zip'
          asset_content_type: application/zip
          max_releases: 1

  NuGet:
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/tags/nuget/') || startsWith(github.ref, 'refs/heads/nuget/') }}
    needs:
      - Windows
      - UWP
      - MacOS
      - Android
      - iOS
      - Web
    continue-on-error: true
    steps:
      - uses: actions/checkout@v5
        with:
          path: source-code
          fetch-depth: 1

      - name: Get short SHA
        id: vars
        run: echo "sha_short=$(echo ${GITHUB_SHA} | cut -c1-7)" >> $GITHUB_OUTPUT

      - uses: actions/download-artifact@v4
        with:
          path: source-code/packaging/nuget/

      - name: Nuget
        shell: bash
        working-directory: source-code/packaging/nuget/
        run: |
          ./package.sh
          for pkg in out/*.nupkg;
          do
            dotnet nuget push $pkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json
          done

  Docs:
    runs-on: ubuntu-latest
    if: github.repository == 'rbfx/rbfx' && github.ref == 'refs/heads/master'
    needs:
      - Windows
      - UWP
      - MacOS
      - Android
      - iOS
      - Web
      - CheckSkipCI
    env:
      GH_TOKEN: ${{ secrets.RBFX_DOCS_DEPLOY_TOKEN }}

    steps:
      - name: Trigger
        shell: bash
        run: |
          gh workflow run --repo rbfx/rbfx-docs Documentation

  BuildSummary:
    name: Build Summary
    runs-on: ubuntu-latest
    if: always()
    needs:
      - Windows
      - UWP
      - Linux
      - MacOS
      - Android
      - iOS
      - Web
      - Windows-Tools
      - Linux-Tools
      - MacOS-Tools

    steps:
      - name: Generate Build Summary
        uses: actions/github-script@v7
        with:
          script: |
            const jobs = context.workflow_run ? context.workflow_run.jobs : [];

            // Get job information from the workflow run
            const workflowRun = await github.rest.actions.listJobsForWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId
            });

            // Create summary table
            let summary = '## Build Summary\n\n';
            summary += '| Job | Status | Duration |\n';
            summary += '|-----|--------|----------|\n';

            // Filter and sort jobs (exclude utility jobs)
            const buildJobs = workflowRun.data.jobs.filter(job =>
              !['CheckSkipCI', 'Web Hooks', "Release 'latest'", 'Build Summary', 'Docs', 'NuGet'].includes(job.name)
            ).sort((a, b) => a.name.localeCompare(b.name));

            for (const job of buildJobs) {
              const status = job.conclusion || job.status;
              let statusIcon = '';

              switch (status) {
                case 'success':
                  statusIcon = '✅';
                  break;
                case 'failure':
                  statusIcon = '❌';
                  break;
                case 'cancelled':
                  statusIcon = '🚫';
                  break;
                case 'skipped':
                  statusIcon = '⏭️';
                  break;
                default:
                  statusIcon = '⏳';
              }

              // Calculate duration
              let duration = 'N/A';
              if (job.started_at && job.completed_at) {
                const start = new Date(job.started_at);
                const end = new Date(job.completed_at);
                const durationMs = end - start;
                const minutes = Math.floor(durationMs / 60000);
                const seconds = Math.floor((durationMs % 60000) / 1000);
                duration = `${minutes}m ${seconds}s`;
              } else if (job.started_at) {
                duration = 'In progress...';
              }

              summary += `| ${job.name} | ${statusIcon} ${status} | ${duration} |\n`;
            }

            // Add summary statistics
            const successCount = buildJobs.filter(j => j.conclusion === 'success').length;
            const failureCount = buildJobs.filter(j => j.conclusion === 'failure').length;
            const totalCount = buildJobs.length;

            summary += '\n### Summary Statistics\n\n';
            summary += `- Total build jobs: ${totalCount}\n`;
            summary += `- Successful: ${successCount}\n`;
            summary += `- Failed: ${failureCount}\n`;

            // Write to job summary
            await core.summary
              .addRaw(summary)
              .write();
