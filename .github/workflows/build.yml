name: Build
on:
  push:
    branches-ignore:
      - 'no-ci-**'
      - 'skip-ci-**'
  pull_request:
  workflow_dispatch:
    inputs:
      # ci_jobs: Control which jobs run via manual workflow dispatch
      # Go to Actions -> Build -> Run workflow -> enter job names in ci_jobs field
      # If not set or empty, all jobs run. Dependencies are automatically included.
      # Examples:
      #   ci_jobs: "Linux"          # Runs only Linux job
      #   ci_jobs: "Linux,Windows"  # Runs Linux and Windows jobs
      #   ci_jobs: "Android"        # Runs Android and its dependency Linux-Tools
      ci_jobs:
        description: 'Comma-separated list of jobs to run (e.g., "Linux,Android"). Leave empty to run all jobs.'
        required: false
        default: ''
        type: string

env:
  # common settings
  URHO3D_ENABLE_ALL: ON
  URHO3D_SAMPLES: ON
  URHO3D_TESTING: ON
  URHO3D_PROFILING_FALLBACK: ON
  URHO3D_PRISTINE_FULL_BUILDS: ON
  DOTNET_VERSION: '8.0'
  CMAKE_VERSION: 3.24.x
  # ccache configuration
  ccache_prefix: ${{ secrets.CACHE_VERSION }}-master
  CCACHE_DIR: ${{ github.workspace }}/.ccache
  CCACHE_COMPRESS: true
  CCACHE_COMPRESSLEVEL: 9
  CCACHE_DEPEND: true
  CCACHE_HARDLINK: true
  CCACHE_SLOPPINESS: pch_defines,time_macros,include_file_mtime,include_file_ctime
  CCACHE_NOHASHDIR: true
  CCACHE_MAXSIZE: 10G
  CCACHE_LIMIT_MULTIPLE: 0.6
  #CCACHE_DEBUG: 1
  CCACHE_DEBUGDIR: ${{ github.workspace }}/ccache-debug
  # paths
  ci_workspace_dir: ${{ github.workspace }}
  ci_source_dir: ${{ github.workspace }}/source-code
  ci_build_script: ./source-code/script/ci_build.sh
  ci_build_dir: ${{ github.workspace }}/cmake-build
  ci_sdk_dir: ${{ github.workspace }}/SDK
  ci_execute_services: ${{ github.repository == 'rbfx/rbfx' && github.ref == 'refs/heads/master' }}
  ci_release_artifacts: ${{ github.repository == 'rokups/rbfx-temp' && github.ref == 'refs/heads/rk/ci-simplify' }}
  # etc
  TRACY_TIMER_FALLBACK: 1
  SOURCE_REF: ${{ github.head_ref || github.ref_name }}

defaults:
  run:
    shell: bash

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  WebHooks:
    name: Web Hooks
    runs-on: ubuntu-latest
    continue-on-error: true
    # if: env.ci_execute_services == 'true'
    if: ${{ github.repository == 'rbfx/rbfx' && github.ref == 'refs/heads/master' }}
    steps:
      - name: Discord Commits
        uses: rbfx/github_discord_notifier@latest
        with:
          discord-webhook: ${{ secrets.DISCORD_WEBHOOK_COMMITS }}
          github-token: ${{ github.token }}
          action-task: discord-commits
          discord-username: GitHub

  Release-Latest:
    name: Release 'latest'
    runs-on: ubuntu-latest
    # if: env.ci_release_artifacts == 'true'
    if: ${{ github.repository == 'rokups/rbfx-temp' && github.ref == 'refs/heads/rk/ci-simplify' }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v5

      - name: Create and Push Tag
        run: |
          git tag -f latest
          git push -f origin latest

  Tools:
    # Skip CI if:
    # - pull request is from rbfx/rbfx repository branch
    # - pull request is draft
    # - ci_jobs input does not include any of the Tools-related jobs
    if: |
      !(github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == 'rokups/rbfx-temp') &&
      github.event.pull_request.draft == false &&
      (inputs.ci_jobs == '' ||
       contains(inputs.ci_jobs, 'windows-tools') ||
       contains(inputs.ci_jobs, 'linux-tools') ||
       contains(inputs.ci_jobs, 'macos-tools') ||
       contains(inputs.ci_jobs, 'uwp') ||
       contains(inputs.ci_jobs, 'android') ||
       contains(inputs.ci_jobs, 'web') ||
       contains(inputs.ci_jobs, 'ios'))
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
          - os: ubuntu-latest
          - os: macos-latest
    env:
      BUILD_SHARED_LIBS: OFF
      URHO3D_GRAPHICS_API: OpenGL
      URHO3D_ENABLE_ALL: OFF
      URHO3D_SAMPLES: OFF
      URHO3D_TESTING: OFF
      URHO3D_SHADER_TRANSLATOR: OFF
      URHO3D_SHADER_OPTIMIZER: OFF
      URHO3D_TOOLS: "swig;PackageTool"
      ci_platform: ${{ matrix.os == 'windows-latest' && 'windows' || (matrix.os == 'ubuntu-latest' && 'linux' || 'macos') }}
      ci_compiler: ${{ matrix.os == 'windows-latest' && 'msvc'    || (matrix.os == 'ubuntu-latest' && 'gcc'   || 'clang') }}
      ci_arch: x64
      ci_lib_type: lib

    steps:
      - uses: actions/checkout@v5
        with:
          path: ${{ env.ci_source_dir }}
          fetch-depth: 1

      - name: Gather information
        run: ${{ env.ci_build_script }} gather-info

      - name: Download cached tools from releases
        id: cache-check
        if: ${{ !contains(github.event.head_commit.message, '#full-build') }}
        continue-on-error: true
        run: |
          if ${{ env.ci_build_script }} download-release -- \
            "https://github.com/${{ github.repository }}/releases/download/latest/${{ env.TOOLS_RELEASE_NAME }}" \
            "${{ github.workspace }}/cached-sdk" \
            "${TOOLS_RELEASE_NAME%.7z}/tools-id.txt" \
            "${{ env.ARTIFACT_ID_TOOLS }}";
          then
            echo "tools-cached=true" >> "$GITHUB_OUTPUT"
          else
            echo "tools-cached=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Build Cache
        uses: actions/cache@v4
        if: ${{ steps.cache-check.outputs.tools-cached != 'true' }}
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ env.CACHE_ID }}-${{ env.SHORT_SHA }}
          restore-keys: ${{ env.CACHE_ID }}

      - name: Setup cmake
        if: ${{ steps.cache-check.outputs.tools-cached != 'true' }}
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: '${{ env.CMAKE_VERSION }}'

      - name: Dependencies
        if: ${{ steps.cache-check.outputs.tools-cached != 'true' }}
        run: ${{ env.ci_build_script }} dependencies

      - name: Generate
        if: ${{ steps.cache-check.outputs.tools-cached != 'true' }}
        run: cmake '-S${{ env.ci_source_dir }}' '-B${{ env.ci_build_dir }}' -DBUILD_SHARED_LIBS=OFF -DCMAKE_BUILD_TYPE=Release -DURHO3D_PARALLEL_BUILD=$NUMBER_OF_PROCESSORS

      - name: Build
        if: ${{ steps.cache-check.outputs.tools-cached != 'true' }}
        run: cmake --build '${{ env.ci_build_dir }}' --config Release --parallel $NUMBER_OF_PROCESSORS

      - name: Install
        if: ${{ steps.cache-check.outputs.tools-cached != 'true' }}
        run: |
          cmake --install '${{ env.ci_build_dir }}' --config Release --component Tools --prefix '${{ env.ci_sdk_dir }}'
          echo "$ARTIFACT_ID_TOOLS" > '${{ env.ci_sdk_dir }}/tools-id.txt'

      - name: Release Tools to latest
        if: ${{ steps.cache-check.outputs.tools-cached != 'true' && github.ref == env.ci_release_artifacts }}
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Rename SDK to match the release name (without .7z), compress with 7z, and rename back
          archive_name="${TOOLS_RELEASE_NAME%.7z}"
          mv SDK "$archive_name"
          7z a -t7z -m0=lzma2 -mx=9 -mfb=64 -md=32m -ms=on "$TOOLS_RELEASE_NAME" "$archive_name"
          gh release upload latest "$TOOLS_RELEASE_NAME" --repo '${{ github.repository }}' --clobber

      - uses: actions/upload-artifact@v4
        if: ${{ env.CCACHE_DEBUG == '1' }}
        with:
          name: 'ccache-debug-tools-${{ env.BUILD_ID }}-${{ github.run_id }}'
          path: ${{ env.CCACHE_DEBUGDIR }}
          if-no-files-found: ignore

  Build:
    # Skip CI if:
    # - pull request is from rbfx/rbfx repository branch
    # - pull request is draft
    # - ci_jobs input does not include this platform
    if: |
      !(github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == 'rokups/rbfx-temp') &&
      github.event.pull_request.draft == false &&
      (inputs.ci_jobs == '' ||
       contains(inputs.ci_jobs, 'windows') ||
       contains(inputs.ci_jobs, 'linux') ||
       contains(inputs.ci_jobs, 'macos') ||
       contains(inputs.ci_jobs, 'uwp') ||
       contains(inputs.ci_jobs, 'android') ||
       contains(inputs.ci_jobs, 'ios') ||
       contains(inputs.ci_jobs, 'web'))
    runs-on: ${{ (matrix.ci_platform == 'windows' || matrix.ci_platform == 'uwp') && 'windows-latest' || ((matrix.ci_platform == 'macos' || matrix.ci_platform == 'ios') && 'macos-13' || 'ubuntu-latest') }}
    needs:
      - Tools

    strategy:
      fail-fast: false
      matrix:
        include:
          # Desktop: Windows builds
          - ci_platform: windows
            ci_arch: x64
            ci_lib_type: dll
            ci_compiler: msvc
          - ci_platform: windows
            ci_arch: x64
            ci_lib_type: lib
            ci_compiler: msvc
          - ci_platform: windows
            ci_arch: x86
            ci_lib_type: dll
            ci_compiler: msvc
          - ci_platform: windows
            ci_arch: x86
            ci_lib_type: lib
            ci_compiler: msvc
          # Desktop: Linux builds
          - ci_platform: linux
            ci_arch: x64
            ci_lib_type: dll
            ci_compiler: gcc
          - ci_platform: linux
            ci_arch: x64
            ci_lib_type: lib
            ci_compiler: gcc
          - ci_platform: linux
            ci_arch: x64
            ci_lib_type: dll
            ci_compiler: clang
          - ci_platform: linux
            ci_arch: x64
            ci_lib_type: lib
            ci_compiler: clang
          # Desktop: MacOS builds
          - ci_platform: macos
            ci_arch: x64
            ci_lib_type: dll
            ci_compiler: clang
          - ci_platform: macos
            ci_arch: x64
            ci_lib_type: lib
            ci_compiler: clang
          # Mobile: UWP builds
          - ci_platform: uwp
            ci_arch: x64
            ci_lib_type: dll
            ci_compiler: msvc
          - ci_platform: uwp
            ci_arch: x64
            ci_lib_type: lib
            ci_compiler: msvc
          # Mobile: Android builds
          - ci_platform: android
            ci_arch: arm64-v8a
            ci_lib_type: dll
            ci_compiler: clang
          - ci_platform: android
            ci_arch: armeabi-v7a
            ci_lib_type: dll
            ci_compiler: clang
          - ci_platform: android
            ci_arch: x86_64
            ci_lib_type: dll
            ci_compiler: clang
          # Mobile: iOS builds
          - ci_platform: ios
            ci_arch: universal
            ci_lib_type: lib
            ci_compiler: clang
          # Web builds
          - ci_platform: web
            ci_arch: wasm
            ci_lib_type: lib
            ci_compiler: emscripten

    env:
      ci_platform: ${{ matrix.ci_platform }}
      ci_arch: ${{ matrix.ci_arch }}
      ci_lib_type: ${{ matrix.ci_lib_type }}
      ci_compiler: ${{ matrix.ci_compiler }}
      BUTLER_API_KEY: ${{ secrets.BUTLER_API_KEY }}
      BINARYEN_CORES: 1

    steps:
      # Mobile-specific: Checkout emsdk (Web only)
      - name: Checkout emsdk
        if: matrix.ci_platform == 'web'
        uses: actions/checkout@v5
        with:
          repository: emscripten-core/emsdk
          path: ${{ github.workspace }}/emsdk

      - name: Setup emsdk
        if: matrix.ci_platform == 'web'
        run: |
          cd ${{ github.workspace }}/emsdk
          ./emsdk install latest
          ./emsdk activate latest
          echo "PATH=$PATH:${{ github.workspace }}/emsdk:${{ github.workspace }}/emsdk/upstream/emscripten" >> $GITHUB_ENV
          echo "EMSDK=${{ github.workspace }}/emsdk" >> $GITHUB_ENV

      - uses: actions/checkout@v5
        with:
          path: ${{ env.ci_source_dir }}
          fetch-depth: 1

      - name: Gather information
        run: ${{ env.ci_build_script }} gather-info

      - name: Set up butler
        if: ${{ (env.ci_execute_services == 'true') && (vars.DISABLE_ITCH != 'true') }}
        uses: jdno/setup-butler@v1

      - name: Build Cache
        uses: actions/cache@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ env.CACHE_ID }}-${{ env.SHORT_SHA }}
          restore-keys: |
            ${{ env.CACHE_ID }}

      - name: Download cached tools from releases
        if: env.PLATFORM_GROUP != 'desktop'
        id: cached_tools
        continue-on-error: true
        run: |
          ${{ env.ci_build_script }} download-release -- \
            "https://github.com/${{ github.repository }}/releases/download/latest/${{ env.TOOLS_RELEASE_NAME }}" \
            "${{ github.workspace }}/host-sdk" \
            "${TOOLS_RELEASE_NAME%.7z}/tools-id.txt" \
            "${{ env.ARTIFACT_ID_TOOLS }}"

      - name: Setup dotnet
        uses: actions/setup-dotnet@v4
        if: matrix.ci_lib_type == 'dll' || matrix.ci_platform == 'android'
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Setup Gradle
        if: matrix.ci_platform == 'android'
        uses: gradle/actions/setup-gradle@v4
        with:
          gradle-version: '8.14.3'
          add-job-summary: 'never'

      - name: Setup cmake
        if: matrix.ci_platform != 'android'
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: '${{ env.CMAKE_VERSION }}'

      - name: Dependencies
        run: ${{ env.ci_build_script }} dependencies

      - name: Download cached SDK from releases
        id: cached_sdk
        if: ${{ !contains(github.event.head_commit.message, '#full-build') }}
        continue-on-error: true
        run: |
          if ${{ env.ci_build_script }} download-release -- \
            "https://github.com/${{ github.repository }}/releases/download/latest/rebelfork-sdk-${{ env.BUILD_ID }}-latest.7z" \
            "${{ github.workspace }}/cached-sdk" \
            "rebelfork-sdk-${{ env.BUILD_ID }}-latest/thirdparty-id.txt" \
            "${{ env.HASH_THIRDPARTY }}"; then
            echo "sdk-cached=true" >> "$GITHUB_OUTPUT"
          else
            echo "sdk-cached=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Generate
        id: generate
        if: matrix.ci_platform != 'android'
        run: |
          ${{ env.ci_build_script }} generate -- -DURHO3D_PARALLEL_BUILD=$NUMBER_OF_PROCESSORS 2>&1 | tee generate.log
          if grep -q "Could NOT find Urho3DThirdParty" generate.log; then
            echo "thirdparty-used=false" >> "$GITHUB_OUTPUT"
            echo "ThirdParty will be built from source"
          else
            echo "thirdparty-used=true" >> "$GITHUB_OUTPUT"
            echo "Using cached Urho3DThirdParty"
          fi

      - name: Build Debug
        run: ${{ env.ci_build_script }} build dbg -- --parallel $NUMBER_OF_PROCESSORS

      - name: Build Release
        run: ${{ env.ci_build_script }} build rel -- --parallel $NUMBER_OF_PROCESSORS

      - name: Test Debug (Native)
        if: (matrix.ci_compiler == 'msvc' || matrix.ci_platform == 'linux')
        run: ${{ env.ci_build_script }} test dbg

      - name: Test Debug (Managed)
        # TODO: Fix C# on x86, issue #733.
        if: matrix.ci_platform == 'windows' && matrix.ci_compiler == 'msvc' && matrix.ci_lib_type == 'dll' && matrix.ci_arch == 'x64'
        run: ${{ env.ci_build_script }} cstest dbg

      - name: Test Release (Native)
        if: (matrix.ci_compiler == 'msvc' || matrix.ci_platform == 'linux')
        run: ${{ env.ci_build_script }} test rel

      - name: Test Release (Managed)
        # TODO: Fix C# on x86, issue #733.
        if: matrix.ci_platform == 'windows' && matrix.ci_compiler == 'msvc' && matrix.ci_lib_type == 'dll' && matrix.ci_arch == 'x64'
        run: ${{ env.ci_build_script }} cstest rel

      - name: Copy cached SDK (ThirdParty component)
        if: steps.cached_sdk.outputs.sdk-cached == 'true' && steps.generate.outputs.thirdparty-used == 'true'
        run: ${{ env.ci_build_script }} copy-cached-sdk '${{ github.workspace }}/cached-sdk' '${{ env.ci_sdk_dir }}'

      - name: Install
        run: |
          # Prepare ThirdParty file manifests
          ${{ env.ci_build_script }} install dbg -- --component ThirdParty --prefix '${{ env.ci_sdk_dir }}'
          ${{ env.ci_build_script }} install rel -- --component ThirdParty --prefix '${{ env.ci_sdk_dir }}'
          echo "${{ env.HASH_THIRDPARTY }}" > '${{ env.ci_sdk_dir }}/thirdparty-id.txt'
          (cd '${{ env.ci_sdk_dir }}' && find . -type f | sed 's|^\./||' > thirdparty-files.txt)

          # Install rest of files
          ${{ env.ci_build_script }} install dbg -- --prefix '${{ env.ci_sdk_dir }}'
          ${{ env.ci_build_script }} install rel -- --prefix '${{ env.ci_sdk_dir }}'

      # Web-specific: Deploy to GitHub Pages
      - name: Deploy to GitHub Pages
        if: matrix.ci_platform == 'web' && env.ci_execute_services == 'true'
        uses: peaceiris/actions-gh-pages@v3
        with:
          personal_token: ${{ secrets.RBFX_DOCS_DEPLOY_TOKEN }}
          external_repository: rbfx/rbfx.github.io
          destination_dir: samples
          cname: rebelfork.io
          publish_dir: ${{ env.ci_sdk_dir }}/deploy
          publish_branch: master

      # Android-specific: Build APK
      - name: Build APK
        if: matrix.ci_platform == 'android'
        run: ${{ env.ci_build_script }} apk rel

      - name: Release Mobile Artifacts
        if: env.PLATFORM_GROUP == 'mobile' && env.ci_release_artifacts == 'true'
        env:
          GH_TOKEN: ${{ github.token }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: ${{ env.ci_build_script }} release-mobile-artifacts

      # Test projects (Desktop/UWP/Web only, excluding Android/iOS)
      - uses: actions/checkout@v5
        if: env.PLATFORM_GROUP != 'mobile'
        id: empty_project_checkout
        continue-on-error: true
        with:
          repository: rbfx/empty-project
          path: ${{ github.workspace }}/empty-project
          ref: ${{ env.SOURCE_REF }}
          fetch-depth: 1
          submodules: true

      - uses: actions/checkout@v5
        if: env.PLATFORM_GROUP != 'mobile' && steps.empty_project_checkout.outcome != 'success'
        with:
          repository: rbfx/empty-project
          path: ${{ github.workspace }}/empty-project
          ref: 'refs/heads/master'
          fetch-depth: 1
          submodules: true

      - name: Test empty-project with SDK
        if: env.PLATFORM_GROUP != 'mobile'
        run: ${{ env.ci_build_script }} test-project empty-project sdk

      - name: Test empty-project with engine source
        if: env.PLATFORM_GROUP != 'mobile'
        run: ${{ env.ci_build_script }} test-project empty-project source

      - uses: actions/checkout@v5
        if: env.PLATFORM_GROUP != 'mobile'
        id: sample_project_checkout
        continue-on-error: true
        with:
          repository: rbfx/sample-project
          path: ${{ github.workspace }}/sample-project
          ref: ${{ env.SOURCE_REF }}
          fetch-depth: 1
          submodules: true

      - uses: actions/checkout@v5
        if: env.PLATFORM_GROUP != 'mobile' && steps.sample_project_checkout.outcome != 'success'
        with:
          repository: rbfx/sample-project
          path: ${{ github.workspace }}/sample-project
          ref: 'refs/heads/master'
          fetch-depth: 1
          submodules: true

      - name: Test sample-project with SDK
        if: env.PLATFORM_GROUP != 'mobile'
        run: ${{ env.ci_build_script }} test-project sample-project sdk

      - name: Test sample-project with engine source
        if: env.PLATFORM_GROUP != 'mobile'
        run: ${{ env.ci_build_script }} test-project sample-project source

      - name: Release SDK
        if: ${{ env.ci_release_artifacts == 'true' }}
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Rename SDK to match the release name (without .7z), compress with 7z max compression
          archive_name="rebelfork-sdk-${{ env.BUILD_ID }}-latest"
          mv SDK "$archive_name"
          7z a -t7z -m0=lzma2 -mx=9 -mfb=64 -md=32m -ms=on "${archive_name}.7z" "$archive_name"
          gh release upload latest "${archive_name}.7z" --repo '${{ github.repository }}' --clobber
          mv "$archive_name" SDK

      - name: Publish to itch.io
        if: ${{ (env.ci_execute_services == 'true') && (vars.DISABLE_ITCH != 'true') }}
        run: ${{ env.ci_build_script }} publish-to-itch

      - uses: actions/upload-artifact@v4
        if: ${{ env.CCACHE_DEBUG == '1' }}
        with:
          name: 'ccache-debug-build-${{ env.BUILD_ID }}-${{ github.run_id }}'
          path: ${{ env.CCACHE_DEBUGDIR }}
          if-no-files-found: ignore

  NuGet:
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/tags/nuget/') || startsWith(github.ref, 'refs/heads/nuget/') }}
    needs:
      - Build
    continue-on-error: true
    steps:
      - uses: actions/checkout@v5
        with:
          path: source-code
          fetch-depth: 1

      - name: Get short SHA
        id: vars
        run: echo "sha_short=$(echo ${GITHUB_SHA} | cut -c1-7)" >> $GITHUB_OUTPUT

      - name: Download SDKs from releases
        env:
          GH_TOKEN: ${{ github.token }}
        working-directory: source-code/packaging/nuget/
        run: ../../${{ env.ci_build_script }} download-nuget-sdks -- '${{ github.repository }}'

      - name: Nuget
        working-directory: source-code/packaging/nuget/
        run: |
          ./package.sh
          for pkg in out/*.nupkg;
          do
            dotnet nuget push $pkg --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json
          done

  Docs:
    runs-on: ubuntu-latest
    # if: env.ci_execute_services == 'true'
    if: ${{ github.repository == 'rbfx/rbfx' && github.ref == 'refs/heads/master' }}
    needs:
      - Build
    env:
      GH_TOKEN: ${{ secrets.RBFX_DOCS_DEPLOY_TOKEN }}

    steps:
      - name: Trigger
        run: gh workflow run --repo rbfx/rbfx-docs Documentation
