# ThirdPartyConfig.cmake - Configuration file for the ThirdParty component

@PACKAGE_INIT@

include(CMakeFindDependencyMacro)

# Find required dependencies
find_dependency(Threads)

# Include the exported targets
if(EXISTS "${CMAKE_CURRENT_LIST_DIR}/Urho3DThirdParty.cmake")
    include("${CMAKE_CURRENT_LIST_DIR}/Urho3DThirdParty.cmake")
endif()

# The third-party libraries are provided through the Urho3DThirdParty export set
set(ThirdParty_FOUND TRUE)

# Provide compatibility variables
set(ThirdParty_INCLUDE_DIRS "@PACKAGE_CMAKE_INSTALL_INCLUDEDIR@")
set(ThirdParty_LIBRARY_DIRS "@PACKAGE_CMAKE_INSTALL_LIBDIR@")

# Export platform detection variables
set(PLATFORM_WIN32 @PLATFORM_WIN32@ CACHE INTERNAL "")
set(PLATFORM_UNIVERSAL_WINDOWS @PLATFORM_UNIVERSAL_WINDOWS@ CACHE INTERNAL "")
set(PLATFORM_LINUX @PLATFORM_LINUX@ CACHE INTERNAL "")
set(PLATFORM_ANDROID @PLATFORM_ANDROID@ CACHE INTERNAL "")
set(PLATFORM_APPLE @PLATFORM_APPLE@ CACHE INTERNAL "")
set(PLATFORM_MACOS @PLATFORM_MACOS@ CACHE INTERNAL "")
set(PLATFORM_IOS @PLATFORM_IOS@ CACHE INTERNAL "")
set(PLATFORM_TVOS @PLATFORM_TVOS@ CACHE INTERNAL "")
set(PLATFORM_EMSCRIPTEN @PLATFORM_EMSCRIPTEN@ CACHE INTERNAL "")

# Export graphics backend support variables
set(D3D11_SUPPORTED @D3D11_SUPPORTED@ CACHE INTERNAL "D3D11 is supported")
set(D3D12_SUPPORTED @D3D12_SUPPORTED@ CACHE INTERNAL "D3D12 is supported")
set(GL_SUPPORTED @GL_SUPPORTED@ CACHE INTERNAL "OpenGL is supported")
set(GLES_SUPPORTED @GLES_SUPPORTED@ CACHE INTERNAL "OpenGL ES is supported")
set(VULKAN_SUPPORTED @VULKAN_SUPPORTED@ CACHE INTERNAL "Vulkan is supported")
set(METAL_SUPPORTED @METAL_SUPPORTED@ CACHE INTERNAL "Metal is supported")
set(WEBGPU_SUPPORTED @WEBGPU_SUPPORTED@ CACHE INTERNAL "WebGPU is supported")
