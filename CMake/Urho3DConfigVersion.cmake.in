# Urho3DConfigVersion.cmake - Custom version file with platform compatibility checking

set(PACKAGE_VERSION "@URHO3D_VERSION@")

# Platform compatibility check for Urho3D
function(urho3d_check_platform_compatibility_version)
    set(CURRENT_PLATFORM_WIN32 FALSE)
    set(CURRENT_PLATFORM_LINUX FALSE)
    set(CURRENT_PLATFORM_ANDROID FALSE)
    set(CURRENT_PLATFORM_APPLE FALSE)
    set(CURRENT_PLATFORM_MACOS FALSE)
    set(CURRENT_PLATFORM_IOS FALSE)
    set(CURRENT_PLATFORM_TVOS FALSE)
    set(CURRENT_PLATFORM_EMSCRIPTEN FALSE)
    set(CURRENT_PLATFORM_UNIVERSAL_WINDOWS FALSE)

    # Detect current platform
    if(WIN32)
        if(CMAKE_SYSTEM_NAME STREQUAL "WindowsStore")
            set(CURRENT_PLATFORM_UNIVERSAL_WINDOWS TRUE)
        else()
            set(CURRENT_PLATFORM_WIN32 TRUE)
        endif()
    elseif(ANDROID)
        set(CURRENT_PLATFORM_ANDROID TRUE)
    elseif(EMSCRIPTEN)
        set(CURRENT_PLATFORM_EMSCRIPTEN TRUE)
    elseif(APPLE)
        set(CURRENT_PLATFORM_APPLE TRUE)
        if(CMAKE_SYSTEM_NAME STREQUAL "Darwin")
            set(CURRENT_PLATFORM_MACOS TRUE)
        elseif(CMAKE_SYSTEM_NAME STREQUAL "iOS")
            set(CURRENT_PLATFORM_IOS TRUE)
        elseif(CMAKE_SYSTEM_NAME STREQUAL "tvOS")
            set(CURRENT_PLATFORM_TVOS TRUE)
        endif()
    elseif(UNIX)
        set(CURRENT_PLATFORM_LINUX TRUE)
    endif()

    # Check if current platform matches any supported platform
    set(PLATFORM_SUPPORTED FALSE)
    if(CURRENT_PLATFORM_WIN32 AND @PLATFORM_WIN32@)
        set(PLATFORM_SUPPORTED TRUE)
    elseif(CURRENT_PLATFORM_UNIVERSAL_WINDOWS AND @PLATFORM_UNIVERSAL_WINDOWS@)
        set(PLATFORM_SUPPORTED TRUE)
    elseif(CURRENT_PLATFORM_LINUX AND @PLATFORM_LINUX@)
        set(PLATFORM_SUPPORTED TRUE)
    elseif(CURRENT_PLATFORM_ANDROID AND @PLATFORM_ANDROID@)
        set(PLATFORM_SUPPORTED TRUE)
    elseif(CURRENT_PLATFORM_APPLE AND ("@PLATFORM_APPLE@" STREQUAL "TRUE"))
        set(PLATFORM_SUPPORTED TRUE)
    elseif(CURRENT_PLATFORM_MACOS AND @PLATFORM_MACOS@)
        set(PLATFORM_SUPPORTED TRUE)
    elseif(CURRENT_PLATFORM_IOS AND @PLATFORM_IOS@)
        set(PLATFORM_SUPPORTED TRUE)
    elseif(CURRENT_PLATFORM_TVOS AND @PLATFORM_TVOS@)
        set(PLATFORM_SUPPORTED TRUE)
    elseif(CURRENT_PLATFORM_EMSCRIPTEN AND @PLATFORM_EMSCRIPTEN@)
        set(PLATFORM_SUPPORTED TRUE)
    endif()

    if(NOT PLATFORM_SUPPORTED)
        set(SUPPORTED_PLATFORMS "")
        if(@PLATFORM_WIN32@)
            list(APPEND SUPPORTED_PLATFORMS "Win32")
        endif()
        if(@PLATFORM_UNIVERSAL_WINDOWS@)
            list(APPEND SUPPORTED_PLATFORMS "UWP")
        endif()
        if(@PLATFORM_LINUX@)
            list(APPEND SUPPORTED_PLATFORMS "Linux")
        endif()
        if(@PLATFORM_ANDROID@)
            list(APPEND SUPPORTED_PLATFORMS "Android")
        endif()
        if("@PLATFORM_APPLE@" STREQUAL "TRUE")
            list(APPEND SUPPORTED_PLATFORMS "Apple")
        endif()
        if(@PLATFORM_MACOS@)
            list(APPEND SUPPORTED_PLATFORMS "macOS")
        endif()
        if(@PLATFORM_IOS@)
            list(APPEND SUPPORTED_PLATFORMS "iOS")
        endif()
        if(@PLATFORM_TVOS@)
            list(APPEND SUPPORTED_PLATFORMS "tvOS")
        endif()
        if(@PLATFORM_EMSCRIPTEN@)
            list(APPEND SUPPORTED_PLATFORMS "Emscripten")
        endif()

        string(JOIN ", " SUPPORTED_PLATFORMS_STR ${SUPPORTED_PLATFORMS})
        set(PACKAGE_VERSION_UNSUITABLE TRUE PARENT_SCOPE)
        set(PACKAGE_VERSION_COMPATIBLE FALSE PARENT_SCOPE)
        if(NOT Urho3D_FIND_QUIETLY)
            message(STATUS "Urho3D: Current platform is not compatible with this Urho3D build. "
                          "Supported platforms: ${SUPPORTED_PLATFORMS_STR}")
        endif()
        return()
    endif()

    # Platform is compatible, continue with version checking
    set(PACKAGE_VERSION_COMPATIBLE TRUE PARENT_SCOPE)
endfunction()

# Perform platform compatibility check
urho3d_check_platform_compatibility_version()

# Only do version checking if platform is compatible
if(PACKAGE_VERSION_COMPATIBLE)
    # Check whether the requested PACKAGE_FIND_VERSION is compatible
    if("@URHO3D_VERSION@" MATCHES "^([0-9]+)\\.")
        set(CVF_VERSION_MAJOR "${CMAKE_MATCH_1}")
        if(PACKAGE_FIND_VERSION_RANGE)
            # both endpoints of the range must have the expected major version
            math(EXPR CVF_VERSION_MAJOR_NEXT "${CVF_VERSION_MAJOR} + 1")
            if (NOT PACKAGE_FIND_VERSION_MIN_MAJOR STREQUAL CVF_VERSION_MAJOR
                OR ((PACKAGE_FIND_VERSION_INCLUDE_MAX
                    AND NOT PACKAGE_FIND_VERSION_MAX_MAJOR STREQUAL CVF_VERSION_MAJOR)
                    OR (NOT PACKAGE_FIND_VERSION_INCLUDE_MAX
                    AND NOT PACKAGE_FIND_VERSION_MAX_MAJOR STREQUAL CVF_VERSION_MAJOR_NEXT)))
                set(PACKAGE_VERSION_COMPATIBLE FALSE)
            endif()
        else()
            if(NOT PACKAGE_FIND_VERSION_MAJOR STREQUAL CVF_VERSION_MAJOR)
                set(PACKAGE_VERSION_COMPATIBLE FALSE)
            endif()
        endif()
    else()
        set(PACKAGE_VERSION_COMPATIBLE FALSE)
    endif()

    # if the installed or the requested version are pre-release versions,
    # exact version match is required
    if("@URHO3D_VERSION@" MATCHES "(.*[-+].+)|([0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+)")
        set(CVF_VERSION_PRERELEASE TRUE)
    else()
        set(CVF_VERSION_PRERELEASE FALSE)
    endif()

    if(PACKAGE_FIND_VERSION MATCHES "(.*[-+].+)|([0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+)")
        set(CVF_VERSION_FIND_PRERELEASE TRUE)
    else()
        set(CVF_VERSION_FIND_PRERELEASE FALSE)
    endif()

    if((CVF_VERSION_PRERELEASE AND NOT CVF_VERSION_FIND_PRERELEASE) OR (CVF_VERSION_FIND_PRERELEASE AND NOT CVF_VERSION_PRERELEASE))
        set(PACKAGE_VERSION_COMPATIBLE FALSE)
    endif()

    if (PACKAGE_FIND_VERSION STREQUAL PACKAGE_VERSION)
        set(PACKAGE_VERSION_EXACT TRUE)
    endif()
endif()
