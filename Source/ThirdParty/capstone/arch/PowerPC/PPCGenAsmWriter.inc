/* Capstone Disassembly Engine, http://www.capstone-engine.org */
/* By Nguyen Anh Quynh <aquynh@gmail.com>, 2013-2019 */

/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|* Assembly Writer Source Fragment                                            *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
static void printInstruction(MCInst *MI, SStream *O)
{
#ifndef CAPSTONE_DIET
  static const char AsmStrs[] = {
  /* 0 */ '#', 'E', 'H', '_', 'S', 'j', 'L', 'j', '_', 'S', 'e', 't', 'u', 'p', 9, 0,
  /* 16 */ 'b', 'd', 'z', 'l', 'a', '+', 32, 0,
  /* 24 */ 'b', 'd', 'n', 'z', 'l', 'a', '+', 32, 0,
  /* 33 */ 'b', 'd', 'z', 'a', '+', 32, 0,
  /* 40 */ 'b', 'd', 'n', 'z', 'a', '+', 32, 0,
  /* 48 */ 'b', 'd', 'z', 'l', '+', 32, 0,
  /* 55 */ 'b', 'd', 'n', 'z', 'l', '+', 32, 0,
  /* 63 */ 'b', 'd', 'z', '+', 32, 0,
  /* 69 */ 'b', 'd', 'n', 'z', '+', 32, 0,
  /* 76 */ 'b', 'c', 'l', 32, '2', '0', ',', 32, '3', '1', ',', 32, 0,
  /* 89 */ 'b', 'c', 't', 'r', 'l', 10, 9, 'l', 'd', 32, '2', ',', 32, 0,
  /* 103 */ 'b', 'c', 32, '1', '2', ',', 32, 0,
  /* 111 */ 'b', 'c', 'l', 32, '1', '2', ',', 32, 0,
  /* 120 */ 'b', 'c', 'l', 'r', 'l', 32, '1', '2', ',', 32, 0,
  /* 131 */ 'b', 'c', 'c', 't', 'r', 'l', 32, '1', '2', ',', 32, 0,
  /* 143 */ 'b', 'c', 'l', 'r', 32, '1', '2', ',', 32, 0,
  /* 153 */ 'b', 'c', 'c', 't', 'r', 32, '1', '2', ',', 32, 0,
  /* 164 */ 'b', 'c', 32, '4', ',', 32, 0,
  /* 171 */ 'b', 'c', 'l', 32, '4', ',', 32, 0,
  /* 179 */ 'b', 'c', 'l', 'r', 'l', 32, '4', ',', 32, 0,
  /* 189 */ 'b', 'c', 'c', 't', 'r', 'l', 32, '4', ',', 32, 0,
  /* 200 */ 'b', 'c', 'l', 'r', 32, '4', ',', 32, 0,
  /* 209 */ 'b', 'c', 'c', 't', 'r', 32, '4', ',', 32, 0,
  /* 219 */ 'm', 't', 's', 'p', 'r', 32, '2', '5', '6', ',', 32, 0,
  /* 231 */ 'b', 'd', 'z', 'l', 'a', '-', 32, 0,
  /* 239 */ 'b', 'd', 'n', 'z', 'l', 'a', '-', 32, 0,
  /* 248 */ 'b', 'd', 'z', 'a', '-', 32, 0,
  /* 255 */ 'b', 'd', 'n', 'z', 'a', '-', 32, 0,
  /* 263 */ 'b', 'd', 'z', 'l', '-', 32, 0,
  /* 270 */ 'b', 'd', 'n', 'z', 'l', '-', 32, 0,
  /* 278 */ 'b', 'd', 'z', '-', 32, 0,
  /* 284 */ 'b', 'd', 'n', 'z', '-', 32, 0,
  /* 291 */ 'p', 's', '_', 'm', 'e', 'r', 'g', 'e', '0', '0', '.', 32, 0,
  /* 304 */ 'p', 's', '_', 'm', 'e', 'r', 'g', 'e', '1', '0', '.', 32, 0,
  /* 317 */ 'p', 's', '_', 's', 'u', 'm', '0', '.', 32, 0,
  /* 327 */ 'p', 's', '_', 'm', 'a', 'd', 'd', 's', '0', '.', 32, 0,
  /* 339 */ 'p', 's', '_', 'm', 'u', 'l', 's', '0', '.', 32, 0,
  /* 350 */ 'p', 's', '_', 'm', 'e', 'r', 'g', 'e', '0', '1', '.', 32, 0,
  /* 363 */ 'p', 's', '_', 'm', 'e', 'r', 'g', 'e', '1', '1', '.', 32, 0,
  /* 376 */ 'p', 's', '_', 's', 'u', 'm', '1', '.', 32, 0,
  /* 386 */ 'p', 's', '_', 'm', 'a', 'd', 'd', 's', '1', '.', 32, 0,
  /* 398 */ 'p', 's', '_', 'm', 'u', 'l', 's', '1', '.', 32, 0,
  /* 409 */ 'v', 'c', 'm', 'p', 'n', 'e', 'b', '.', 32, 0,
  /* 419 */ 'v', 'c', 'm', 'p', 'g', 't', 's', 'b', '.', 32, 0,
  /* 430 */ 'e', 'x', 't', 's', 'b', '.', 32, 0,
  /* 438 */ 'v', 'c', 'm', 'p', 'e', 'q', 'u', 'b', '.', 32, 0,
  /* 449 */ 'p', 's', '_', 's', 'u', 'b', '.', 32, 0,
  /* 458 */ 'f', 's', 'u', 'b', '.', 32, 0,
  /* 465 */ 'p', 's', '_', 'm', 's', 'u', 'b', '.', 32, 0,
  /* 475 */ 'f', 'm', 's', 'u', 'b', '.', 32, 0,
  /* 483 */ 'p', 's', '_', 'n', 'm', 's', 'u', 'b', '.', 32, 0,
  /* 494 */ 'f', 'n', 'm', 's', 'u', 'b', '.', 32, 0,
  /* 503 */ 'v', 'c', 'm', 'p', 'g', 't', 'u', 'b', '.', 32, 0,
  /* 514 */ 'v', 'c', 'm', 'p', 'n', 'e', 'z', 'b', '.', 32, 0,
  /* 525 */ 'a', 'd', 'd', 'c', '.', 32, 0,
  /* 532 */ 'a', 'n', 'd', 'c', '.', 32, 0,
  /* 539 */ 't', 'a', 'b', 'o', 'r', 't', 'd', 'c', '.', 32, 0,
  /* 550 */ 's', 'u', 'b', 'f', 'c', '.', 32, 0,
  /* 558 */ 's', 'u', 'b', 'i', 'c', '.', 32, 0,
  /* 566 */ 'a', 'd', 'd', 'i', 'c', '.', 32, 0,
  /* 574 */ 'r', 'l', 'd', 'i', 'c', '.', 32, 0,
  /* 582 */ 'b', 'c', 'd', 't', 'r', 'u', 'n', 'c', '.', 32, 0,
  /* 593 */ 'b', 'c', 'd', 'u', 't', 'r', 'u', 'n', 'c', '.', 32, 0,
  /* 605 */ 'o', 'r', 'c', '.', 32, 0,
  /* 611 */ 't', 'a', 'b', 'o', 'r', 't', 'w', 'c', '.', 32, 0,
  /* 622 */ 's', 'r', 'a', 'd', '.', 32, 0,
  /* 629 */ 'p', 's', '_', 'a', 'd', 'd', '.', 32, 0,
  /* 638 */ 'f', 'a', 'd', 'd', '.', 32, 0,
  /* 645 */ 'p', 's', '_', 'm', 'a', 'd', 'd', '.', 32, 0,
  /* 655 */ 'f', 'm', 'a', 'd', 'd', '.', 32, 0,
  /* 663 */ 'p', 's', '_', 'n', 'm', 'a', 'd', 'd', '.', 32, 0,
  /* 674 */ 'f', 'n', 'm', 'a', 'd', 'd', '.', 32, 0,
  /* 683 */ 'm', 'u', 'l', 'h', 'd', '.', 32, 0,
  /* 691 */ 'f', 'c', 'f', 'i', 'd', '.', 32, 0,
  /* 699 */ 'f', 'c', 't', 'i', 'd', '.', 32, 0,
  /* 707 */ 'm', 'u', 'l', 'l', 'd', '.', 32, 0,
  /* 715 */ 's', 'l', 'd', '.', 32, 0,
  /* 721 */ 'n', 'a', 'n', 'd', '.', 32, 0,
  /* 728 */ 't', 'e', 'n', 'd', '.', 32, 0,
  /* 735 */ 's', 'r', 'd', '.', 32, 0,
  /* 741 */ 'v', 'c', 'm', 'p', 'g', 't', 's', 'd', '.', 32, 0,
  /* 752 */ 'v', 'c', 'm', 'p', 'e', 'q', 'u', 'd', '.', 32, 0,
  /* 763 */ 'v', 'c', 'm', 'p', 'g', 't', 'u', 'd', '.', 32, 0,
  /* 774 */ 'd', 'i', 'v', 'd', '.', 32, 0,
  /* 781 */ 'c', 'n', 't', 'l', 'z', 'd', '.', 32, 0,
  /* 790 */ 'c', 'n', 't', 't', 'z', 'd', '.', 32, 0,
  /* 799 */ 'a', 'd', 'd', 'e', '.', 32, 0,
  /* 806 */ 'd', 'i', 'v', 'd', 'e', '.', 32, 0,
  /* 814 */ 's', 'u', 'b', 'f', 'e', '.', 32, 0,
  /* 822 */ 'a', 'd', 'd', 'm', 'e', '.', 32, 0,
  /* 830 */ 's', 'u', 'b', 'f', 'm', 'e', '.', 32, 0,
  /* 839 */ 'f', 'r', 'e', '.', 32, 0,
  /* 845 */ 'p', 's', '_', 'r', 's', 'q', 'r', 't', 'e', '.', 32, 0,
  /* 857 */ 'f', 'r', 's', 'q', 'r', 't', 'e', '.', 32, 0,
  /* 867 */ 'p', 'a', 's', 't', 'e', '.', 32, 0,
  /* 875 */ 'd', 'i', 'v', 'w', 'e', '.', 32, 0,
  /* 883 */ 'a', 'd', 'd', 'z', 'e', '.', 32, 0,
  /* 891 */ 's', 'u', 'b', 'f', 'z', 'e', '.', 32, 0,
  /* 900 */ 's', 'u', 'b', 'f', '.', 32, 0,
  /* 907 */ 'm', 't', 'f', 's', 'f', '.', 32, 0,
  /* 915 */ 'p', 's', '_', 'n', 'e', 'g', '.', 32, 0,
  /* 924 */ 'f', 'n', 'e', 'g', '.', 32, 0,
  /* 931 */ 'v', 'c', 'm', 'p', 'n', 'e', 'h', '.', 32, 0,
  /* 941 */ 'v', 'c', 'm', 'p', 'g', 't', 's', 'h', '.', 32, 0,
  /* 952 */ 'e', 'x', 't', 's', 'h', '.', 32, 0,
  /* 960 */ 'v', 'c', 'm', 'p', 'e', 'q', 'u', 'h', '.', 32, 0,
  /* 971 */ 'v', 'c', 'm', 'p', 'g', 't', 'u', 'h', '.', 32, 0,
  /* 982 */ 'v', 'c', 'm', 'p', 'n', 'e', 'z', 'h', '.', 32, 0,
  /* 993 */ 't', 'a', 'b', 'o', 'r', 't', 'd', 'c', 'i', '.', 32, 0,
  /* 1005 */ 't', 'a', 'b', 'o', 'r', 't', 'w', 'c', 'i', '.', 32, 0,
  /* 1017 */ 's', 'r', 'a', 'd', 'i', '.', 32, 0,
  /* 1025 */ 'c', 'l', 'r', 'l', 's', 'l', 'd', 'i', '.', 32, 0,
  /* 1036 */ 'e', 'x', 't', 'l', 'd', 'i', '.', 32, 0,
  /* 1045 */ 'a', 'n', 'd', 'i', '.', 32, 0,
  /* 1052 */ 'c', 'l', 'r', 'r', 'd', 'i', '.', 32, 0,
  /* 1061 */ 'i', 'n', 's', 'r', 'd', 'i', '.', 32, 0,
  /* 1070 */ 'r', 'o', 't', 'r', 'd', 'i', '.', 32, 0,
  /* 1079 */ 'e', 'x', 't', 'r', 'd', 'i', '.', 32, 0,
  /* 1088 */ 'm', 't', 'f', 's', 'f', 'i', '.', 32, 0,
  /* 1097 */ 'e', 'x', 't', 's', 'w', 's', 'l', 'i', '.', 32, 0,
  /* 1108 */ 'r', 'l', 'd', 'i', 'm', 'i', '.', 32, 0,
  /* 1117 */ 'r', 'l', 'w', 'i', 'm', 'i', '.', 32, 0,
  /* 1126 */ 's', 'r', 'a', 'w', 'i', '.', 32, 0,
  /* 1134 */ 'c', 'l', 'r', 'l', 's', 'l', 'w', 'i', '.', 32, 0,
  /* 1145 */ 'i', 'n', 's', 'l', 'w', 'i', '.', 32, 0,
  /* 1154 */ 'e', 'x', 't', 'l', 'w', 'i', '.', 32, 0,
  /* 1163 */ 'c', 'l', 'r', 'r', 'w', 'i', '.', 32, 0,
  /* 1172 */ 'i', 'n', 's', 'r', 'w', 'i', '.', 32, 0,
  /* 1181 */ 'r', 'o', 't', 'r', 'w', 'i', '.', 32, 0,
  /* 1190 */ 'e', 'x', 't', 'r', 'w', 'i', '.', 32, 0,
  /* 1199 */ 'r', 'l', 'd', 'c', 'l', '.', 32, 0,
  /* 1207 */ 'r', 'l', 'd', 'i', 'c', 'l', '.', 32, 0,
  /* 1216 */ 'p', 's', '_', 's', 'e', 'l', '.', 32, 0,
  /* 1225 */ 'f', 's', 'e', 'l', '.', 32, 0,
  /* 1232 */ 'p', 's', '_', 'm', 'u', 'l', '.', 32, 0,
  /* 1241 */ 'f', 'm', 'u', 'l', '.', 32, 0,
  /* 1248 */ 't', 'r', 'e', 'c', 'l', 'a', 'i', 'm', '.', 32, 0,
  /* 1259 */ 'f', 'r', 'i', 'm', '.', 32, 0,
  /* 1266 */ 'r', 'l', 'w', 'i', 'n', 'm', '.', 32, 0,
  /* 1275 */ 'r', 'l', 'w', 'n', 'm', '.', 32, 0,
  /* 1283 */ 'b', 'c', 'd', 'c', 'f', 'n', '.', 32, 0,
  /* 1292 */ 'b', 'c', 'd', 'c', 'p', 's', 'g', 'n', '.', 32, 0,
  /* 1303 */ 'f', 'c', 'p', 's', 'g', 'n', '.', 32, 0,
  /* 1312 */ 'b', 'c', 'd', 's', 'e', 't', 's', 'g', 'n', '.', 32, 0,
  /* 1324 */ 't', 'b', 'e', 'g', 'i', 'n', '.', 32, 0,
  /* 1333 */ 'f', 'r', 'i', 'n', '.', 32, 0,
  /* 1340 */ 'b', 'c', 'd', 'c', 't', 'n', '.', 32, 0,
  /* 1349 */ 'x', 'v', 'c', 'm', 'p', 'g', 'e', 'd', 'p', '.', 32, 0,
  /* 1361 */ 'x', 'v', 'c', 'm', 'p', 'e', 'q', 'd', 'p', '.', 32, 0,
  /* 1373 */ 'x', 'v', 'c', 'm', 'p', 'g', 't', 'd', 'p', '.', 32, 0,
  /* 1385 */ 'v', 'c', 'm', 'p', 'b', 'f', 'p', '.', 32, 0,
  /* 1395 */ 'v', 'c', 'm', 'p', 'g', 'e', 'f', 'p', '.', 32, 0,
  /* 1406 */ 'v', 'c', 'm', 'p', 'e', 'q', 'f', 'p', '.', 32, 0,
  /* 1417 */ 'v', 'c', 'm', 'p', 'g', 't', 'f', 'p', '.', 32, 0,
  /* 1428 */ 'f', 'r', 'i', 'p', '.', 32, 0,
  /* 1435 */ 'x', 'v', 'c', 'm', 'p', 'g', 'e', 's', 'p', '.', 32, 0,
  /* 1447 */ 'x', 'v', 'c', 'm', 'p', 'e', 'q', 's', 'p', '.', 32, 0,
  /* 1459 */ 'f', 'r', 's', 'p', '.', 32, 0,
  /* 1466 */ 'x', 'v', 'c', 'm', 'p', 'g', 't', 's', 'p', '.', 32, 0,
  /* 1478 */ 'i', 'c', 'b', 'l', 'q', '.', 32, 0,
  /* 1486 */ 'b', 'c', 'd', 'c', 'f', 's', 'q', '.', 32, 0,
  /* 1496 */ 'b', 'c', 'd', 'c', 't', 's', 'q', '.', 32, 0,
  /* 1506 */ 'r', 'l', 'd', 'c', 'r', '.', 32, 0,
  /* 1514 */ 'r', 'l', 'd', 'i', 'c', 'r', '.', 32, 0,
  /* 1523 */ 'p', 's', '_', 'm', 'r', '.', 32, 0,
  /* 1531 */ 'f', 'm', 'r', '.', 32, 0,
  /* 1537 */ 'n', 'o', 'r', '.', 32, 0,
  /* 1543 */ 'x', 'o', 'r', '.', 32, 0,
  /* 1549 */ 'b', 'c', 'd', 's', 'r', '.', 32, 0,
  /* 1557 */ 't', 's', 'r', '.', 32, 0,
  /* 1563 */ 'p', 's', '_', 'a', 'b', 's', '.', 32, 0,
  /* 1572 */ 'f', 'a', 'b', 's', '.', 32, 0,
  /* 1579 */ 'p', 's', '_', 'n', 'a', 'b', 's', '.', 32, 0,
  /* 1589 */ 'f', 'n', 'a', 'b', 's', '.', 32, 0,
  /* 1597 */ 'f', 's', 'u', 'b', 's', '.', 32, 0,
  /* 1605 */ 'f', 'm', 's', 'u', 'b', 's', '.', 32, 0,
  /* 1614 */ 'f', 'n', 'm', 's', 'u', 'b', 's', '.', 32, 0,
  /* 1624 */ 'b', 'c', 'd', 's', '.', 32, 0,
  /* 1631 */ 'f', 'a', 'd', 'd', 's', '.', 32, 0,
  /* 1639 */ 'f', 'm', 'a', 'd', 'd', 's', '.', 32, 0,
  /* 1648 */ 'f', 'n', 'm', 'a', 'd', 'd', 's', '.', 32, 0,
  /* 1658 */ 'f', 'c', 'f', 'i', 'd', 's', '.', 32, 0,
  /* 1667 */ 'p', 's', '_', 'r', 'e', 's', '.', 32, 0,
  /* 1676 */ 'f', 'r', 'e', 's', '.', 32, 0,
  /* 1683 */ 'f', 'r', 's', 'q', 'r', 't', 'e', 's', '.', 32, 0,
  /* 1694 */ 'm', 'f', 'f', 's', '.', 32, 0,
  /* 1701 */ 'a', 'n', 'd', 'i', 's', '.', 32, 0,
  /* 1709 */ 'f', 'm', 'u', 'l', 's', '.', 32, 0,
  /* 1717 */ 'f', 's', 'q', 'r', 't', 's', '.', 32, 0,
  /* 1726 */ 'b', 'c', 'd', 'u', 's', '.', 32, 0,
  /* 1734 */ 'f', 'c', 'f', 'i', 'd', 'u', 's', '.', 32, 0,
  /* 1744 */ 'f', 'd', 'i', 'v', 's', '.', 32, 0,
  /* 1752 */ 't', 'a', 'b', 'o', 'r', 't', '.', 32, 0,
  /* 1761 */ 'f', 's', 'q', 'r', 't', '.', 32, 0,
  /* 1769 */ 'm', 'u', 'l', 'h', 'd', 'u', '.', 32, 0,
  /* 1778 */ 'f', 'c', 'f', 'i', 'd', 'u', '.', 32, 0,
  /* 1787 */ 'f', 'c', 't', 'i', 'd', 'u', '.', 32, 0,
  /* 1796 */ 'd', 'i', 'v', 'd', 'u', '.', 32, 0,
  /* 1804 */ 'd', 'i', 'v', 'd', 'e', 'u', '.', 32, 0,
  /* 1813 */ 'd', 'i', 'v', 'w', 'e', 'u', '.', 32, 0,
  /* 1822 */ 'm', 'u', 'l', 'h', 'w', 'u', '.', 32, 0,
  /* 1831 */ 'f', 'c', 't', 'i', 'w', 'u', '.', 32, 0,
  /* 1840 */ 'd', 'i', 'v', 'w', 'u', '.', 32, 0,
  /* 1848 */ 'p', 's', '_', 'd', 'i', 'v', '.', 32, 0,
  /* 1857 */ 'f', 'd', 'i', 'v', '.', 32, 0,
  /* 1864 */ 'e', 'q', 'v', '.', 32, 0,
  /* 1870 */ 's', 'r', 'a', 'w', '.', 32, 0,
  /* 1877 */ 'v', 'c', 'm', 'p', 'n', 'e', 'w', '.', 32, 0,
  /* 1887 */ 'm', 'u', 'l', 'h', 'w', '.', 32, 0,
  /* 1895 */ 'f', 'c', 't', 'i', 'w', '.', 32, 0,
  /* 1903 */ 'm', 'u', 'l', 'l', 'w', '.', 32, 0,
  /* 1911 */ 's', 'l', 'w', '.', 32, 0,
  /* 1917 */ 's', 'r', 'w', '.', 32, 0,
  /* 1923 */ 'v', 'c', 'm', 'p', 'g', 't', 's', 'w', '.', 32, 0,
  /* 1934 */ 'e', 'x', 't', 's', 'w', '.', 32, 0,
  /* 1942 */ 'v', 'c', 'm', 'p', 'e', 'q', 'u', 'w', '.', 32, 0,
  /* 1953 */ 'v', 'c', 'm', 'p', 'g', 't', 'u', 'w', '.', 32, 0,
  /* 1964 */ 'd', 'i', 'v', 'w', '.', 32, 0,
  /* 1971 */ 'v', 'c', 'm', 'p', 'n', 'e', 'z', 'w', '.', 32, 0,
  /* 1982 */ 'c', 'n', 't', 'l', 'z', 'w', '.', 32, 0,
  /* 1991 */ 'c', 'n', 't', 't', 'z', 'w', '.', 32, 0,
  /* 2000 */ 's', 't', 'b', 'c', 'x', '.', 32, 0,
  /* 2008 */ 's', 't', 'd', 'c', 'x', '.', 32, 0,
  /* 2016 */ 's', 't', 'h', 'c', 'x', '.', 32, 0,
  /* 2024 */ 's', 't', 'w', 'c', 'x', '.', 32, 0,
  /* 2032 */ 't', 'l', 'b', 's', 'x', '.', 32, 0,
  /* 2040 */ 'f', 'c', 't', 'i', 'd', 'z', '.', 32, 0,
  /* 2049 */ 'b', 'c', 'd', 'c', 'f', 'z', '.', 32, 0,
  /* 2058 */ 'f', 'r', 'i', 'z', '.', 32, 0,
  /* 2065 */ 'b', 'c', 'd', 'c', 't', 'z', '.', 32, 0,
  /* 2074 */ 'f', 'c', 't', 'i', 'd', 'u', 'z', '.', 32, 0,
  /* 2084 */ 'f', 'c', 't', 'i', 'w', 'u', 'z', '.', 32, 0,
  /* 2094 */ 'f', 'c', 't', 'i', 'w', 'z', '.', 32, 0,
  /* 2103 */ 'p', 's', '_', 'm', 'e', 'r', 'g', 'e', '0', '0', 32, 0,
  /* 2115 */ 'p', 's', '_', 'm', 'e', 'r', 'g', 'e', '1', '0', 32, 0,
  /* 2127 */ 'm', 't', 'f', 's', 'b', '0', 32, 0,
  /* 2135 */ 'p', 's', '_', 's', 'u', 'm', '0', 32, 0,
  /* 2144 */ 'p', 's', '_', 'c', 'm', 'p', 'o', '0', 32, 0,
  /* 2154 */ 'p', 's', '_', 'm', 'a', 'd', 'd', 's', '0', 32, 0,
  /* 2165 */ 'p', 's', '_', 'm', 'u', 'l', 's', '0', 32, 0,
  /* 2175 */ 'p', 's', '_', 'c', 'm', 'p', 'u', '0', 32, 0,
  /* 2185 */ 'p', 's', '_', 'm', 'e', 'r', 'g', 'e', '0', '1', 32, 0,
  /* 2197 */ 'p', 's', '_', 'm', 'e', 'r', 'g', 'e', '1', '1', 32, 0,
  /* 2209 */ 'm', 't', 'f', 's', 'b', '1', 32, 0,
  /* 2217 */ 'p', 's', '_', 's', 'u', 'm', '1', 32, 0,
  /* 2226 */ 'p', 's', '_', 'c', 'm', 'p', 'o', '1', 32, 0,
  /* 2236 */ 'p', 's', '_', 'm', 'a', 'd', 'd', 's', '1', 32, 0,
  /* 2247 */ 'p', 's', '_', 'm', 'u', 'l', 's', '1', 32, 0,
  /* 2257 */ 'p', 's', '_', 'c', 'm', 'p', 'u', '1', 32, 0,
  /* 2267 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'C', 'M', 'P', '_', 'S', 'W', 'A', 'P', '_', 'I', '3', '2', 32, 0,
  /* 2289 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'C', 'M', 'P', '_', 'S', 'W', 'A', 'P', '_', 'I', '1', '6', 32, 0,
  /* 2311 */ '#', 'T', 'C', '_', 'R', 'E', 'T', 'U', 'R', 'N', 'a', '8', 32, 0,
  /* 2325 */ '#', 'T', 'C', '_', 'R', 'E', 'T', 'U', 'R', 'N', 'd', '8', 32, 0,
  /* 2339 */ '#', 'T', 'C', '_', 'R', 'E', 'T', 'U', 'R', 'N', 'r', '8', 32, 0,
  /* 2353 */ 'U', 'P', 'D', 'A', 'T', 'E', '_', 'V', 'R', 'S', 'A', 'V', 'E', 32, 0,
  /* 2368 */ '#', 'A', 'D', 'J', 'C', 'A', 'L', 'L', 'S', 'T', 'A', 'C', 'K', 'D', 'O', 'W', 'N', 32, 0,
  /* 2387 */ '#', 'A', 'D', 'J', 'C', 'A', 'L', 'L', 'S', 'T', 'A', 'C', 'K', 'U', 'P', 32, 0,
  /* 2404 */ '#', 'T', 'C', '_', 'R', 'E', 'T', 'U', 'R', 'N', 'a', 32, 0,
  /* 2417 */ 'e', 'v', 'm', 'h', 'e', 'g', 's', 'm', 'f', 'a', 'a', 32, 0,
  /* 2430 */ 'e', 'v', 'm', 'h', 'o', 'g', 's', 'm', 'f', 'a', 'a', 32, 0,
  /* 2443 */ 'e', 'v', 'm', 'w', 's', 'm', 'f', 'a', 'a', 32, 0,
  /* 2454 */ 'e', 'v', 'm', 'w', 's', 's', 'f', 'a', 'a', 32, 0,
  /* 2465 */ 'e', 'v', 'm', 'h', 'e', 'g', 's', 'm', 'i', 'a', 'a', 32, 0,
  /* 2478 */ 'e', 'v', 'm', 'h', 'o', 'g', 's', 'm', 'i', 'a', 'a', 32, 0,
  /* 2491 */ 'e', 'v', 'm', 'w', 's', 'm', 'i', 'a', 'a', 32, 0,
  /* 2502 */ 'e', 'v', 'm', 'h', 'e', 'g', 'u', 'm', 'i', 'a', 'a', 32, 0,
  /* 2515 */ 'e', 'v', 'm', 'h', 'o', 'g', 'u', 'm', 'i', 'a', 'a', 32, 0,
  /* 2528 */ 'e', 'v', 'm', 'w', 'u', 'm', 'i', 'a', 'a', 32, 0,
  /* 2539 */ 'd', 'c', 'b', 'a', 32, 0,
  /* 2545 */ 'b', 'c', 'a', 32, 0,
  /* 2550 */ 'e', 'v', 'm', 'h', 'e', 's', 'm', 'f', 'a', 32, 0,
  /* 2561 */ 'e', 'v', 'm', 'w', 'h', 's', 'm', 'f', 'a', 32, 0,
  /* 2572 */ 'e', 'v', 'm', 'h', 'o', 's', 'm', 'f', 'a', 32, 0,
  /* 2583 */ 'e', 'v', 'm', 'w', 's', 'm', 'f', 'a', 32, 0,
  /* 2593 */ 'e', 'v', 'm', 'h', 'e', 's', 's', 'f', 'a', 32, 0,
  /* 2604 */ 'e', 'v', 'm', 'w', 'h', 's', 's', 'f', 'a', 32, 0,
  /* 2615 */ 'e', 'v', 'm', 'h', 'o', 's', 's', 'f', 'a', 32, 0,
  /* 2626 */ 'e', 'v', 'm', 'w', 's', 's', 'f', 'a', 32, 0,
  /* 2636 */ 'l', 'h', 'a', 32, 0,
  /* 2641 */ 'e', 'v', 'm', 'h', 'e', 's', 'm', 'i', 'a', 32, 0,
  /* 2652 */ 'e', 'v', 'm', 'w', 'h', 's', 'm', 'i', 'a', 32, 0,
  /* 2663 */ 'e', 'v', 'm', 'h', 'o', 's', 'm', 'i', 'a', 32, 0,
  /* 2674 */ 'e', 'v', 'm', 'w', 's', 'm', 'i', 'a', 32, 0,
  /* 2684 */ 'e', 'v', 'm', 'h', 'e', 'u', 'm', 'i', 'a', 32, 0,
  /* 2695 */ 'e', 'v', 'm', 'w', 'h', 'u', 'm', 'i', 'a', 32, 0,
  /* 2706 */ 'e', 'v', 'm', 'w', 'l', 'u', 'm', 'i', 'a', 32, 0,
  /* 2717 */ 'e', 'v', 'm', 'h', 'o', 'u', 'm', 'i', 'a', 32, 0,
  /* 2728 */ 'e', 'v', 'm', 'w', 'u', 'm', 'i', 'a', 32, 0,
  /* 2738 */ 'q', 'v', 's', 't', 'f', 'c', 'd', 'x', 'i', 'a', 32, 0,
  /* 2750 */ 'q', 'v', 's', 't', 'f', 'd', 'x', 'i', 'a', 32, 0,
  /* 2761 */ 'q', 'v', 's', 't', 'f', 'c', 's', 'x', 'i', 'a', 32, 0,
  /* 2773 */ 'q', 'v', 's', 't', 'f', 's', 'x', 'i', 'a', 32, 0,
  /* 2784 */ 'q', 'v', 's', 't', 'f', 'c', 'd', 'u', 'x', 'i', 'a', 32, 0,
  /* 2797 */ 'q', 'v', 's', 't', 'f', 'd', 'u', 'x', 'i', 'a', 32, 0,
  /* 2809 */ 'q', 'v', 's', 't', 'f', 'c', 's', 'u', 'x', 'i', 'a', 32, 0,
  /* 2822 */ 'q', 'v', 's', 't', 'f', 's', 'u', 'x', 'i', 'a', 32, 0,
  /* 2834 */ 'b', 'l', 'a', 32, 0,
  /* 2839 */ 'b', 'c', 'l', 'a', 32, 0,
  /* 2845 */ 'b', 'd', 'z', 'l', 'a', 32, 0,
  /* 2852 */ 'b', 'd', 'n', 'z', 'l', 'a', 32, 0,
  /* 2860 */ 'e', 'v', 'm', 'r', 'a', 32, 0,
  /* 2867 */ 'l', 'w', 'a', 32, 0,
  /* 2872 */ 'm', 't', 'v', 's', 'r', 'w', 'a', 32, 0,
  /* 2881 */ 'q', 'v', 'l', 'f', 'i', 'w', 'a', 'x', 'a', 32, 0,
  /* 2892 */ 'q', 'v', 'l', 'f', 'c', 'd', 'x', 'a', 32, 0,
  /* 2902 */ 'q', 'v', 's', 't', 'f', 'c', 'd', 'x', 'a', 32, 0,
  /* 2913 */ 'q', 'v', 'l', 'f', 'd', 'x', 'a', 32, 0,
  /* 2922 */ 'q', 'v', 's', 't', 'f', 'd', 'x', 'a', 32, 0,
  /* 2932 */ 'q', 'v', 'l', 'f', 'c', 's', 'x', 'a', 32, 0,
  /* 2942 */ 'q', 'v', 's', 't', 'f', 'c', 's', 'x', 'a', 32, 0,
  /* 2953 */ 'q', 'v', 'l', 'f', 's', 'x', 'a', 32, 0,
  /* 2962 */ 'q', 'v', 's', 't', 'f', 's', 'x', 'a', 32, 0,
  /* 2972 */ 'q', 'v', 'l', 'f', 'c', 'd', 'u', 'x', 'a', 32, 0,
  /* 2983 */ 'q', 'v', 's', 't', 'f', 'c', 'd', 'u', 'x', 'a', 32, 0,
  /* 2995 */ 'q', 'v', 'l', 'f', 'd', 'u', 'x', 'a', 32, 0,
  /* 3005 */ 'q', 'v', 's', 't', 'f', 'd', 'u', 'x', 'a', 32, 0,
  /* 3016 */ 'q', 'v', 'l', 'f', 'c', 's', 'u', 'x', 'a', 32, 0,
  /* 3027 */ 'q', 'v', 's', 't', 'f', 'c', 's', 'u', 'x', 'a', 32, 0,
  /* 3039 */ 'q', 'v', 'l', 'f', 's', 'u', 'x', 'a', 32, 0,
  /* 3049 */ 'q', 'v', 's', 't', 'f', 's', 'u', 'x', 'a', 32, 0,
  /* 3060 */ 'q', 'v', 's', 't', 'f', 'i', 'w', 'x', 'a', 32, 0,
  /* 3071 */ 'q', 'v', 'l', 'f', 'i', 'w', 'z', 'x', 'a', 32, 0,
  /* 3082 */ 'b', 'd', 'z', 'a', 32, 0,
  /* 3088 */ 'b', 'd', 'n', 'z', 'a', 32, 0,
  /* 3095 */ 'v', 's', 'r', 'a', 'b', 32, 0,
  /* 3102 */ 'r', 'f', 'e', 'b', 'b', 32, 0,
  /* 3109 */ 'v', 'c', 'l', 'z', 'l', 's', 'b', 'b', 32, 0,
  /* 3119 */ 'v', 'c', 't', 'z', 'l', 's', 'b', 'b', 32, 0,
  /* 3129 */ 'v', 'c', 'm', 'p', 'n', 'e', 'b', 32, 0,
  /* 3138 */ 'v', 'm', 'r', 'g', 'h', 'b', 32, 0,
  /* 3146 */ 'x', 'x', 's', 'p', 'l', 't', 'i', 'b', 32, 0,
  /* 3156 */ 'v', 'm', 'r', 'g', 'l', 'b', 32, 0,
  /* 3164 */ 'v', 'r', 'l', 'b', 32, 0,
  /* 3170 */ 'v', 's', 'l', 'b', 32, 0,
  /* 3176 */ 'v', 'p', 'm', 's', 'u', 'm', 'b', 32, 0,
  /* 3185 */ 'c', 'm', 'p', 'b', 32, 0,
  /* 3191 */ 'c', 'm', 'p', 'e', 'q', 'b', 32, 0,
  /* 3199 */ 'c', 'm', 'p', 'r', 'b', 32, 0,
  /* 3206 */ 'v', 's', 'r', 'b', 32, 0,
  /* 3212 */ 'v', 'm', 'u', 'l', 'e', 's', 'b', 32, 0,
  /* 3221 */ 'v', 'a', 'v', 'g', 's', 'b', 32, 0,
  /* 3229 */ 'v', 'u', 'p', 'k', 'h', 's', 'b', 32, 0,
  /* 3238 */ 'v', 's', 'p', 'l', 't', 'i', 's', 'b', 32, 0,
  /* 3248 */ 'v', 'u', 'p', 'k', 'l', 's', 'b', 32, 0,
  /* 3257 */ 'v', 'm', 'i', 'n', 's', 'b', 32, 0,
  /* 3265 */ 'v', 'm', 'u', 'l', 'o', 's', 'b', 32, 0,
  /* 3274 */ 'v', 'c', 'm', 'p', 'g', 't', 's', 'b', 32, 0,
  /* 3284 */ 'e', 'v', 'e', 'x', 't', 's', 'b', 32, 0,
  /* 3293 */ 'v', 'm', 'a', 'x', 's', 'b', 32, 0,
  /* 3301 */ 's', 'e', 't', 'b', 32, 0,
  /* 3307 */ 'm', 'f', 't', 'b', 32, 0,
  /* 3313 */ 'v', 's', 'p', 'l', 't', 'b', 32, 0,
  /* 3321 */ 'v', 'p', 'o', 'p', 'c', 'n', 't', 'b', 32, 0,
  /* 3331 */ 'v', 'i', 'n', 's', 'e', 'r', 't', 'b', 32, 0,
  /* 3341 */ 's', 't', 'b', 32, 0,
  /* 3346 */ 'v', 'a', 'b', 's', 'd', 'u', 'b', 32, 0,
  /* 3355 */ 'v', 'm', 'u', 'l', 'e', 'u', 'b', 32, 0,
  /* 3364 */ 'v', 'a', 'v', 'g', 'u', 'b', 32, 0,
  /* 3372 */ 'v', 'm', 'i', 'n', 'u', 'b', 32, 0,
  /* 3380 */ 'v', 'm', 'u', 'l', 'o', 'u', 'b', 32, 0,
  /* 3389 */ 'v', 'c', 'm', 'p', 'e', 'q', 'u', 'b', 32, 0,
  /* 3399 */ 'p', 's', '_', 's', 'u', 'b', 32, 0,
  /* 3407 */ 'e', 'f', 'd', 's', 'u', 'b', 32, 0,
  /* 3415 */ 'q', 'v', 'f', 's', 'u', 'b', 32, 0,
  /* 3423 */ 'p', 's', '_', 'm', 's', 'u', 'b', 32, 0,
  /* 3432 */ 'q', 'v', 'f', 'm', 's', 'u', 'b', 32, 0,
  /* 3441 */ 'p', 's', '_', 'n', 'm', 's', 'u', 'b', 32, 0,
  /* 3451 */ 'q', 'v', 'f', 'n', 'm', 's', 'u', 'b', 32, 0,
  /* 3461 */ 'e', 'f', 's', 's', 'u', 'b', 32, 0,
  /* 3469 */ 'e', 'v', 'f', 's', 's', 'u', 'b', 32, 0,
  /* 3478 */ 'v', 'e', 'x', 't', 'r', 'a', 'c', 't', 'u', 'b', 32, 0,
  /* 3490 */ 'v', 'c', 'm', 'p', 'g', 't', 'u', 'b', 32, 0,
  /* 3500 */ 'v', 'm', 'a', 'x', 'u', 'b', 32, 0,
  /* 3508 */ 'v', 'c', 'm', 'p', 'n', 'e', 'z', 'b', 32, 0,
  /* 3518 */ 'v', 'c', 'l', 'z', 'b', 32, 0,
  /* 3525 */ 'v', 'c', 't', 'z', 'b', 32, 0,
  /* 3532 */ 'b', 'c', 32, 0,
  /* 3536 */ 'a', 'd', 'd', 'c', 32, 0,
  /* 3542 */ 'x', 'x', 'l', 'a', 'n', 'd', 'c', 32, 0,
  /* 3551 */ 'c', 'r', 'a', 'n', 'd', 'c', 32, 0,
  /* 3559 */ 'e', 'v', 'a', 'n', 'd', 'c', 32, 0,
  /* 3567 */ 's', 'u', 'b', 'f', 'c', 32, 0,
  /* 3574 */ 's', 'u', 'b', 'i', 'c', 32, 0,
  /* 3581 */ 'a', 'd', 'd', 'i', 'c', 32, 0,
  /* 3588 */ 'r', 'l', 'd', 'i', 'c', 32, 0,
  /* 3595 */ 's', 'u', 'b', 'f', 'i', 'c', 32, 0,
  /* 3603 */ 'x', 's', 'r', 'd', 'p', 'i', 'c', 32, 0,
  /* 3612 */ 'x', 'v', 'r', 'd', 'p', 'i', 'c', 32, 0,
  /* 3621 */ 'x', 'v', 'r', 's', 'p', 'i', 'c', 32, 0,
  /* 3630 */ 'i', 'c', 'b', 'l', 'c', 32, 0,
  /* 3637 */ 'b', 'r', 'i', 'n', 'c', 32, 0,
  /* 3644 */ 's', 'y', 'n', 'c', 32, 0,
  /* 3650 */ 'x', 'x', 'l', 'o', 'r', 'c', 32, 0,
  /* 3658 */ 'c', 'r', 'o', 'r', 'c', 32, 0,
  /* 3665 */ 'e', 'v', 'o', 'r', 'c', 32, 0,
  /* 3672 */ 's', 'c', 32, 0,
  /* 3676 */ 'v', 'e', 'x', 't', 's', 'b', '2', 'd', 32, 0,
  /* 3686 */ 'v', 'e', 'x', 't', 's', 'h', '2', 'd', 32, 0,
  /* 3696 */ 'v', 'e', 'x', 't', 's', 'w', '2', 'd', 32, 0,
  /* 3706 */ '#', 'T', 'C', '_', 'R', 'E', 'T', 'U', 'R', 'N', 'd', 32, 0,
  /* 3719 */ 'v', 's', 'h', 'a', 's', 'i', 'g', 'm', 'a', 'd', 32, 0,
  /* 3731 */ 'v', 's', 'r', 'a', 'd', 32, 0,
  /* 3738 */ 'v', 'g', 'b', 'b', 'd', 32, 0,
  /* 3745 */ 'v', 'p', 'r', 't', 'y', 'b', 'd', 32, 0,
  /* 3754 */ 'p', 's', '_', 'a', 'd', 'd', 32, 0,
  /* 3762 */ 'e', 'f', 'd', 'a', 'd', 'd', 32, 0,
  /* 3770 */ 'q', 'v', 'f', 'a', 'd', 'd', 32, 0,
  /* 3778 */ 'p', 's', '_', 'm', 'a', 'd', 'd', 32, 0,
  /* 3787 */ 'q', 'v', 'f', 'm', 'a', 'd', 'd', 32, 0,
  /* 3796 */ 'p', 's', '_', 'n', 'm', 'a', 'd', 'd', 32, 0,
  /* 3806 */ 'q', 'v', 'f', 'n', 'm', 'a', 'd', 'd', 32, 0,
  /* 3816 */ 'q', 'v', 'f', 'x', 'x', 'c', 'p', 'n', 'm', 'a', 'd', 'd', 32, 0,
  /* 3830 */ 'q', 'v', 'f', 'x', 'x', 'n', 'p', 'm', 'a', 'd', 'd', 32, 0,
  /* 3843 */ 'q', 'v', 'f', 'x', 'm', 'a', 'd', 'd', 32, 0,
  /* 3853 */ 'q', 'v', 'f', 'x', 'x', 'm', 'a', 'd', 'd', 32, 0,
  /* 3864 */ 'e', 'f', 's', 'a', 'd', 'd', 32, 0,
  /* 3872 */ 'e', 'v', 'f', 's', 'a', 'd', 'd', 32, 0,
  /* 3881 */ 'e', 'v', 'l', 'd', 'd', 32, 0,
  /* 3888 */ 'm', 't', 'v', 's', 'r', 'd', 'd', 32, 0,
  /* 3897 */ 'e', 'v', 's', 't', 'd', 'd', 32, 0,
  /* 3905 */ 'e', 'f', 's', 'c', 'f', 'd', 32, 0,
  /* 3913 */ 'l', 'f', 'd', 32, 0,
  /* 3918 */ 's', 't', 'f', 'd', 32, 0,
  /* 3924 */ 'v', 'n', 'e', 'g', 'd', 32, 0,
  /* 3931 */ 'm', 'a', 'd', 'd', 'h', 'd', 32, 0,
  /* 3939 */ 'm', 'u', 'l', 'h', 'd', 32, 0,
  /* 3946 */ 'q', 'v', 'f', 'c', 'f', 'i', 'd', 32, 0,
  /* 3955 */ 'e', 'f', 'd', 'c', 'f', 's', 'i', 'd', 32, 0,
  /* 3965 */ 'q', 'v', 'f', 'c', 't', 'i', 'd', 32, 0,
  /* 3974 */ 'e', 'f', 'd', 'c', 'f', 'u', 'i', 'd', 32, 0,
  /* 3984 */ 't', 'l', 'b', 'l', 'd', 32, 0,
  /* 3991 */ 'm', 'a', 'd', 'd', 'l', 'd', 32, 0,
  /* 3999 */ 'm', 'u', 'l', 'l', 'd', 32, 0,
  /* 4006 */ 'c', 'm', 'p', 'l', 'd', 32, 0,
  /* 4013 */ 'm', 'f', 'v', 's', 'r', 'l', 'd', 32, 0,
  /* 4022 */ 'v', 'r', 'l', 'd', 32, 0,
  /* 4028 */ 'v', 's', 'l', 'd', 32, 0,
  /* 4034 */ 'v', 'b', 'p', 'e', 'r', 'm', 'd', 32, 0,
  /* 4043 */ 'v', 'p', 'm', 's', 'u', 'm', 'd', 32, 0,
  /* 4052 */ 'x', 'x', 'l', 'a', 'n', 'd', 32, 0,
  /* 4060 */ 'x', 'x', 'l', 'n', 'a', 'n', 'd', 32, 0,
  /* 4069 */ 'c', 'r', 'n', 'a', 'n', 'd', 32, 0,
  /* 4077 */ 'e', 'v', 'n', 'a', 'n', 'd', 32, 0,
  /* 4085 */ 'c', 'r', 'a', 'n', 'd', 32, 0,
  /* 4092 */ 'e', 'v', 'a', 'n', 'd', 32, 0,
  /* 4099 */ 'c', 'm', 'p', 'd', 32, 0,
  /* 4105 */ 'x', 'x', 'b', 'r', 'd', 32, 0,
  /* 4112 */ 'm', 't', 'm', 's', 'r', 'd', 32, 0,
  /* 4120 */ 'm', 'f', 'v', 's', 'r', 'd', 32, 0,
  /* 4128 */ 'm', 't', 'v', 's', 'r', 'd', 32, 0,
  /* 4136 */ 'm', 'o', 'd', 's', 'd', 32, 0,
  /* 4143 */ 'v', 'm', 'i', 'n', 's', 'd', 32, 0,
  /* 4151 */ 'v', 'c', 'm', 'p', 'g', 't', 's', 'd', 32, 0,
  /* 4161 */ 'v', 'm', 'a', 'x', 's', 'd', 32, 0,
  /* 4169 */ 'l', 'x', 's', 'd', 32, 0,
  /* 4175 */ 's', 't', 'x', 's', 'd', 32, 0,
  /* 4182 */ 'v', 'e', 'x', 't', 'r', 'a', 'c', 't', 'd', 32, 0,
  /* 4193 */ 'v', 'p', 'o', 'p', 'c', 'n', 't', 'd', 32, 0,
  /* 4203 */ 'v', 'i', 'n', 's', 'e', 'r', 't', 'd', 32, 0,
  /* 4213 */ 's', 't', 'd', 32, 0,
  /* 4218 */ 'm', 'o', 'd', 'u', 'd', 32, 0,
  /* 4225 */ 'v', 'm', 'i', 'n', 'u', 'd', 32, 0,
  /* 4233 */ 'v', 'c', 'm', 'p', 'e', 'q', 'u', 'd', 32, 0,
  /* 4243 */ 'v', 'c', 'm', 'p', 'g', 't', 'u', 'd', 32, 0,
  /* 4253 */ 'v', 'm', 'a', 'x', 'u', 'd', 32, 0,
  /* 4261 */ 'd', 'i', 'v', 'd', 32, 0,
  /* 4267 */ 'v', 'c', 'l', 'z', 'd', 32, 0,
  /* 4274 */ 'c', 'n', 't', 'l', 'z', 'd', 32, 0,
  /* 4282 */ 'v', 'c', 't', 'z', 'd', 32, 0,
  /* 4289 */ 'c', 'n', 't', 't', 'z', 'd', 32, 0,
  /* 4297 */ 'm', 'f', 'b', 'h', 'r', 'b', 'e', 32, 0,
  /* 4306 */ 'm', 'f', 'f', 's', 'c', 'e', 32, 0,
  /* 4314 */ 'a', 'd', 'd', 'e', 32, 0,
  /* 4320 */ 'd', 'i', 'v', 'd', 'e', 32, 0,
  /* 4327 */ 's', 'l', 'b', 'm', 'f', 'e', 'e', 32, 0,
  /* 4336 */ 'w', 'r', 't', 'e', 'e', 32, 0,
  /* 4343 */ 's', 'u', 'b', 'f', 'e', 32, 0,
  /* 4350 */ 'e', 'v', 'l', 'w', 'h', 'e', 32, 0,
  /* 4358 */ 'e', 'v', 's', 't', 'w', 'h', 'e', 32, 0,
  /* 4367 */ 's', 'l', 'b', 'i', 'e', 32, 0,
  /* 4374 */ 't', 'l', 'b', 'i', 'e', 32, 0,
  /* 4381 */ 'a', 'd', 'd', 'm', 'e', 32, 0,
  /* 4388 */ 's', 'u', 'b', 'f', 'm', 'e', 32, 0,
  /* 4396 */ 't', 'l', 'b', 'r', 'e', 32, 0,
  /* 4403 */ 'q', 'v', 'f', 'r', 'e', 32, 0,
  /* 4410 */ 's', 'l', 'b', 'm', 't', 'e', 32, 0,
  /* 4418 */ 'p', 's', '_', 'r', 's', 'q', 'r', 't', 'e', 32, 0,
  /* 4429 */ 'q', 'v', 'f', 'r', 's', 'q', 'r', 't', 'e', 32, 0,
  /* 4440 */ 'p', 'a', 's', 't', 'e', 32, 0,
  /* 4447 */ 't', 'l', 'b', 'w', 'e', 32, 0,
  /* 4454 */ 'd', 'i', 'v', 'w', 'e', 32, 0,
  /* 4461 */ 'e', 'v', 's', 't', 'w', 'w', 'e', 32, 0,
  /* 4470 */ 'a', 'd', 'd', 'z', 'e', 32, 0,
  /* 4477 */ 's', 'u', 'b', 'f', 'z', 'e', 32, 0,
  /* 4485 */ 'd', 'c', 'b', 'f', 32, 0,
  /* 4491 */ 's', 'u', 'b', 'f', 32, 0,
  /* 4497 */ 'e', 'v', 'm', 'h', 'e', 's', 'm', 'f', 32, 0,
  /* 4507 */ 'e', 'v', 'm', 'w', 'h', 's', 'm', 'f', 32, 0,
  /* 4517 */ 'e', 'v', 'm', 'h', 'o', 's', 'm', 'f', 32, 0,
  /* 4527 */ 'e', 'v', 'm', 'w', 's', 'm', 'f', 32, 0,
  /* 4536 */ 'm', 'c', 'r', 'f', 32, 0,
  /* 4542 */ 'm', 'f', 'o', 'c', 'r', 'f', 32, 0,
  /* 4550 */ 'm', 't', 'o', 'c', 'r', 'f', 32, 0,
  /* 4558 */ 'm', 't', 'c', 'r', 'f', 32, 0,
  /* 4565 */ 'e', 'f', 'd', 'c', 'f', 's', 'f', 32, 0,
  /* 4574 */ 'e', 'f', 's', 'c', 'f', 's', 'f', 32, 0,
  /* 4583 */ 'e', 'v', 'f', 's', 'c', 'f', 's', 'f', 32, 0,
  /* 4593 */ 'm', 't', 'f', 's', 'f', 32, 0,
  /* 4600 */ 'e', 'v', 'm', 'h', 'e', 's', 's', 'f', 32, 0,
  /* 4610 */ 'e', 'v', 'm', 'w', 'h', 's', 's', 'f', 32, 0,
  /* 4620 */ 'e', 'v', 'm', 'h', 'o', 's', 's', 'f', 32, 0,
  /* 4630 */ 'e', 'v', 'm', 'w', 's', 's', 'f', 32, 0,
  /* 4639 */ 'e', 'f', 'd', 'c', 't', 's', 'f', 32, 0,
  /* 4648 */ 'e', 'f', 's', 'c', 't', 's', 'f', 32, 0,
  /* 4657 */ 'e', 'v', 'f', 's', 'c', 't', 's', 'f', 32, 0,
  /* 4667 */ 'e', 'f', 'd', 'c', 'f', 'u', 'f', 32, 0,
  /* 4676 */ 'e', 'f', 's', 'c', 'f', 'u', 'f', 32, 0,
  /* 4685 */ 'e', 'v', 'f', 's', 'c', 'f', 'u', 'f', 32, 0,
  /* 4695 */ 'e', 'f', 'd', 'c', 't', 'u', 'f', 32, 0,
  /* 4704 */ 'e', 'f', 's', 'c', 't', 'u', 'f', 32, 0,
  /* 4713 */ 's', 'l', 'b', 'i', 'e', 'g', 32, 0,
  /* 4721 */ 'p', 's', '_', 'n', 'e', 'g', 32, 0,
  /* 4729 */ 'e', 'f', 'd', 'n', 'e', 'g', 32, 0,
  /* 4737 */ 'q', 'v', 'f', 'n', 'e', 'g', 32, 0,
  /* 4745 */ 'e', 'f', 's', 'n', 'e', 'g', 32, 0,
  /* 4753 */ 'e', 'v', 'f', 's', 'n', 'e', 'g', 32, 0,
  /* 4762 */ 'e', 'v', 'n', 'e', 'g', 32, 0,
  /* 4769 */ 'v', 's', 'r', 'a', 'h', 32, 0,
  /* 4776 */ 'e', 'v', 'l', 'd', 'h', 32, 0,
  /* 4783 */ 'e', 'v', 's', 't', 'd', 'h', 32, 0,
  /* 4791 */ 'v', 'c', 'm', 'p', 'n', 'e', 'h', 32, 0,
  /* 4800 */ 'v', 'm', 'r', 'g', 'h', 'h', 32, 0,
  /* 4808 */ 'v', 'm', 'r', 'g', 'l', 'h', 32, 0,
  /* 4816 */ 'v', 'r', 'l', 'h', 32, 0,
  /* 4822 */ 'v', 's', 'l', 'h', 32, 0,
  /* 4828 */ 'v', 'p', 'm', 's', 'u', 'm', 'h', 32, 0,
  /* 4837 */ 'x', 'x', 'b', 'r', 'h', 32, 0,
  /* 4844 */ 'v', 's', 'r', 'h', 32, 0,
  /* 4850 */ 'v', 'm', 'u', 'l', 'e', 's', 'h', 32, 0,
  /* 4859 */ 'v', 'a', 'v', 'g', 's', 'h', 32, 0,
  /* 4867 */ 'v', 'u', 'p', 'k', 'h', 's', 'h', 32, 0,
  /* 4876 */ 'v', 's', 'p', 'l', 't', 'i', 's', 'h', 32, 0,
  /* 4886 */ 'v', 'u', 'p', 'k', 'l', 's', 'h', 32, 0,
  /* 4895 */ 'v', 'm', 'i', 'n', 's', 'h', 32, 0,
  /* 4903 */ 'v', 'm', 'u', 'l', 'o', 's', 'h', 32, 0,
  /* 4912 */ 'v', 'c', 'm', 'p', 'g', 't', 's', 'h', 32, 0,
  /* 4922 */ 'e', 'v', 'e', 'x', 't', 's', 'h', 32, 0,
  /* 4931 */ 'v', 'm', 'a', 'x', 's', 'h', 32, 0,
  /* 4939 */ 'v', 's', 'p', 'l', 't', 'h', 32, 0,
  /* 4947 */ 'v', 'p', 'o', 'p', 'c', 'n', 't', 'h', 32, 0,
  /* 4957 */ 'v', 'i', 'n', 's', 'e', 'r', 't', 'h', 32, 0,
  /* 4967 */ 's', 't', 'h', 32, 0,
  /* 4972 */ 'v', 'a', 'b', 's', 'd', 'u', 'h', 32, 0,
  /* 4981 */ 'v', 'm', 'u', 'l', 'e', 'u', 'h', 32, 0,
  /* 4990 */ 'v', 'a', 'v', 'g', 'u', 'h', 32, 0,
  /* 4998 */ 'v', 'm', 'i', 'n', 'u', 'h', 32, 0,
  /* 5006 */ 'v', 'm', 'u', 'l', 'o', 'u', 'h', 32, 0,
  /* 5015 */ 'v', 'c', 'm', 'p', 'e', 'q', 'u', 'h', 32, 0,
  /* 5025 */ 'v', 'e', 'x', 't', 'r', 'a', 'c', 't', 'u', 'h', 32, 0,
  /* 5037 */ 'v', 'c', 'm', 'p', 'g', 't', 'u', 'h', 32, 0,
  /* 5047 */ 'v', 'm', 'a', 'x', 'u', 'h', 32, 0,
  /* 5055 */ 'v', 'c', 'm', 'p', 'n', 'e', 'z', 'h', 32, 0,
  /* 5065 */ 'v', 'c', 'l', 'z', 'h', 32, 0,
  /* 5072 */ 'v', 'c', 't', 'z', 'h', 32, 0,
  /* 5079 */ 'd', 'c', 'b', 'i', 32, 0,
  /* 5085 */ 'i', 'c', 'b', 'i', 32, 0,
  /* 5091 */ 's', 'u', 'b', 'i', 32, 0,
  /* 5097 */ 'd', 'c', 'c', 'c', 'i', 32, 0,
  /* 5104 */ 'i', 'c', 'c', 'c', 'i', 32, 0,
  /* 5111 */ 'q', 'v', 'g', 'p', 'c', 'i', 32, 0,
  /* 5119 */ 's', 'r', 'a', 'd', 'i', 32, 0,
  /* 5126 */ 'a', 'd', 'd', 'i', 32, 0,
  /* 5132 */ 'c', 'm', 'p', 'l', 'd', 'i', 32, 0,
  /* 5140 */ 'c', 'l', 'r', 'l', 's', 'l', 'd', 'i', 32, 0,
  /* 5150 */ 'e', 'x', 't', 'l', 'd', 'i', 32, 0,
  /* 5158 */ 'x', 'x', 'p', 'e', 'r', 'm', 'd', 'i', 32, 0,
  /* 5168 */ 'c', 'm', 'p', 'd', 'i', 32, 0,
  /* 5175 */ 'c', 'l', 'r', 'r', 'd', 'i', 32, 0,
  /* 5183 */ 'i', 'n', 's', 'r', 'd', 'i', 32, 0,
  /* 5191 */ 'r', 'o', 't', 'r', 'd', 'i', 32, 0,
  /* 5199 */ 'e', 'x', 't', 'r', 'd', 'i', 32, 0,
  /* 5207 */ 't', 'd', 'i', 32, 0,
  /* 5212 */ 'w', 'r', 't', 'e', 'e', 'i', 32, 0,
  /* 5220 */ 'm', 't', 'f', 's', 'f', 'i', 32, 0,
  /* 5228 */ 'e', 'v', 's', 'p', 'l', 'a', 't', 'f', 'i', 32, 0,
  /* 5239 */ 'e', 'v', 'm', 'e', 'r', 'g', 'e', 'h', 'i', 32, 0,
  /* 5250 */ 'e', 'v', 'm', 'e', 'r', 'g', 'e', 'l', 'o', 'h', 'i', 32, 0,
  /* 5263 */ 't', 'l', 'b', 'l', 'i', 32, 0,
  /* 5270 */ 'm', 'u', 'l', 'l', 'i', 32, 0,
  /* 5277 */ 'e', 'x', 't', 's', 'w', 's', 'l', 'i', 32, 0,
  /* 5287 */ 'v', 'r', 'l', 'd', 'm', 'i', 32, 0,
  /* 5295 */ 'r', 'l', 'd', 'i', 'm', 'i', 32, 0,
  /* 5303 */ 'r', 'l', 'w', 'i', 'm', 'i', 32, 0,
  /* 5311 */ 'e', 'v', 'm', 'h', 'e', 's', 'm', 'i', 32, 0,
  /* 5321 */ 'e', 'v', 'm', 'w', 'h', 's', 'm', 'i', 32, 0,
  /* 5331 */ 'e', 'v', 'm', 'h', 'o', 's', 'm', 'i', 32, 0,
  /* 5341 */ 'e', 'v', 'm', 'w', 's', 'm', 'i', 32, 0,
  /* 5350 */ 'e', 'v', 'm', 'h', 'e', 'u', 'm', 'i', 32, 0,
  /* 5360 */ 'e', 'v', 'm', 'w', 'h', 'u', 'm', 'i', 32, 0,
  /* 5370 */ 'e', 'v', 'm', 'w', 'l', 'u', 'm', 'i', 32, 0,
  /* 5380 */ 'e', 'v', 'm', 'h', 'o', 'u', 'm', 'i', 32, 0,
  /* 5390 */ 'e', 'v', 'm', 'w', 'u', 'm', 'i', 32, 0,
  /* 5399 */ 'v', 'r', 'l', 'w', 'm', 'i', 32, 0,
  /* 5407 */ 'q', 'v', 'a', 'l', 'i', 'g', 'n', 'i', 32, 0,
  /* 5417 */ 'm', 'f', 'f', 's', 'c', 'r', 'n', 'i', 32, 0,
  /* 5427 */ 'm', 'f', 'f', 's', 'c', 'd', 'r', 'n', 'i', 32, 0,
  /* 5438 */ 'v', 's', 'l', 'd', 'o', 'i', 32, 0,
  /* 5446 */ 'x', 's', 'r', 'd', 'p', 'i', 32, 0,
  /* 5454 */ 'x', 'v', 'r', 'd', 'p', 'i', 32, 0,
  /* 5462 */ 'x', 's', 'r', 'q', 'p', 'i', 32, 0,
  /* 5470 */ 'x', 'v', 'r', 's', 'p', 'i', 32, 0,
  /* 5478 */ 'x', 'o', 'r', 'i', 32, 0,
  /* 5484 */ 'e', 'f', 'd', 'c', 'f', 's', 'i', 32, 0,
  /* 5493 */ 'e', 'f', 's', 'c', 'f', 's', 'i', 32, 0,
  /* 5502 */ 'e', 'v', 'f', 's', 'c', 'f', 's', 'i', 32, 0,
  /* 5512 */ 'e', 'f', 'd', 'c', 't', 's', 'i', 32, 0,
  /* 5521 */ 'e', 'f', 's', 'c', 't', 's', 'i', 32, 0,
  /* 5530 */ 'e', 'v', 'f', 's', 'c', 't', 's', 'i', 32, 0,
  /* 5540 */ 'q', 'v', 'e', 's', 'p', 'l', 'a', 't', 'i', 32, 0,
  /* 5551 */ 'e', 'v', 's', 'p', 'l', 'a', 't', 'i', 32, 0,
  /* 5561 */ 'e', 'f', 'd', 'c', 'f', 'u', 'i', 32, 0,
  /* 5570 */ 'e', 'f', 's', 'c', 'f', 'u', 'i', 32, 0,
  /* 5579 */ 'e', 'v', 'f', 's', 'c', 'f', 'u', 'i', 32, 0,
  /* 5589 */ 'e', 'f', 'd', 'c', 't', 'u', 'i', 32, 0,
  /* 5598 */ 'e', 'f', 's', 'c', 't', 'u', 'i', 32, 0,
  /* 5607 */ 'e', 'v', 'f', 's', 'c', 't', 'u', 'i', 32, 0,
  /* 5617 */ 's', 'r', 'a', 'w', 'i', 32, 0,
  /* 5624 */ 'x', 'x', 's', 'l', 'd', 'w', 'i', 32, 0,
  /* 5633 */ 'c', 'm', 'p', 'l', 'w', 'i', 32, 0,
  /* 5641 */ 'e', 'v', 'r', 'l', 'w', 'i', 32, 0,
  /* 5649 */ 'c', 'l', 'r', 'l', 's', 'l', 'w', 'i', 32, 0,
  /* 5659 */ 'i', 'n', 's', 'l', 'w', 'i', 32, 0,
  /* 5667 */ 'e', 'v', 's', 'l', 'w', 'i', 32, 0,
  /* 5675 */ 'e', 'x', 't', 'l', 'w', 'i', 32, 0,
  /* 5683 */ 'c', 'm', 'p', 'w', 'i', 32, 0,
  /* 5690 */ 'c', 'l', 'r', 'r', 'w', 'i', 32, 0,
  /* 5698 */ 'i', 'n', 's', 'r', 'w', 'i', 32, 0,
  /* 5706 */ 'r', 'o', 't', 'r', 'w', 'i', 32, 0,
  /* 5714 */ 'e', 'x', 't', 'r', 'w', 'i', 32, 0,
  /* 5722 */ 'l', 's', 'w', 'i', 32, 0,
  /* 5728 */ 's', 't', 's', 'w', 'i', 32, 0,
  /* 5735 */ 't', 'w', 'i', 32, 0,
  /* 5740 */ 'q', 'v', 's', 't', 'f', 'c', 'd', 'x', 'i', 32, 0,
  /* 5751 */ 'q', 'v', 's', 't', 'f', 'd', 'x', 'i', 32, 0,
  /* 5761 */ 'q', 'v', 's', 't', 'f', 'c', 's', 'x', 'i', 32, 0,
  /* 5772 */ 'q', 'v', 's', 't', 'f', 's', 'x', 'i', 32, 0,
  /* 5782 */ 'q', 'v', 's', 't', 'f', 'c', 'd', 'u', 'x', 'i', 32, 0,
  /* 5794 */ 'q', 'v', 's', 't', 'f', 'd', 'u', 'x', 'i', 32, 0,
  /* 5805 */ 'q', 'v', 's', 't', 'f', 'c', 's', 'u', 'x', 'i', 32, 0,
  /* 5817 */ 'q', 'v', 's', 't', 'f', 's', 'u', 'x', 'i', 32, 0,
  /* 5828 */ 't', 'c', 'h', 'e', 'c', 'k', 32, 0,
  /* 5836 */ 'p', 's', 'q', '_', 'l', 32, 0,
  /* 5843 */ 'd', 'c', 'b', 'z', '_', 'l', 32, 0,
  /* 5851 */ 'q', 'v', 'f', 'l', 'o', 'g', 'i', 'c', 'a', 'l', 32, 0,
  /* 5863 */ 'b', 'l', 32, 0,
  /* 5867 */ 'b', 'c', 'l', 32, 0,
  /* 5872 */ 'r', 'l', 'd', 'c', 'l', 32, 0,
  /* 5879 */ 'r', 'l', 'd', 'i', 'c', 'l', 32, 0,
  /* 5887 */ 't', 'l', 'b', 'i', 'e', 'l', 32, 0,
  /* 5895 */ 'p', 's', '_', 's', 'e', 'l', 32, 0,
  /* 5903 */ 'q', 'v', 'f', 's', 'e', 'l', 32, 0,
  /* 5911 */ 'i', 's', 'e', 'l', 32, 0,
  /* 5917 */ 'v', 's', 'e', 'l', 32, 0,
  /* 5923 */ 'x', 'x', 's', 'e', 'l', 32, 0,
  /* 5930 */ 'd', 'c', 'b', 'f', 'l', 32, 0,
  /* 5937 */ 'l', 'x', 'v', 'l', 'l', 32, 0,
  /* 5944 */ 's', 't', 'x', 'v', 'l', 'l', 32, 0,
  /* 5952 */ 'b', 'c', 'l', 'r', 'l', 32, 0,
  /* 5959 */ 'b', 'c', 'c', 't', 'r', 'l', 32, 0,
  /* 5967 */ 'm', 'f', 'f', 's', 'l', 32, 0,
  /* 5974 */ 'l', 'v', 's', 'l', 32, 0,
  /* 5980 */ 'p', 's', '_', 'm', 'u', 'l', 32, 0,
  /* 5988 */ 'e', 'f', 'd', 'm', 'u', 'l', 32, 0,
  /* 5996 */ 'q', 'v', 'f', 'm', 'u', 'l', 32, 0,
  /* 6004 */ 'e', 'f', 's', 'm', 'u', 'l', 32, 0,
  /* 6012 */ 'e', 'v', 'f', 's', 'm', 'u', 'l', 32, 0,
  /* 6021 */ 'q', 'v', 'f', 'x', 'm', 'u', 'l', 32, 0,
  /* 6030 */ 'l', 'x', 'v', 'l', 32, 0,
  /* 6036 */ 's', 't', 'x', 'v', 'l', 32, 0,
  /* 6043 */ 'l', 'v', 'x', 'l', 32, 0,
  /* 6049 */ 's', 't', 'v', 'x', 'l', 32, 0,
  /* 6056 */ 'd', 'c', 'b', 'z', 'l', 32, 0,
  /* 6063 */ 'b', 'd', 'z', 'l', 32, 0,
  /* 6069 */ 'b', 'd', 'n', 'z', 'l', 32, 0,
  /* 6076 */ 'v', 'm', 's', 'u', 'm', 'm', 'b', 'm', 32, 0,
  /* 6086 */ 'v', 's', 'u', 'b', 'u', 'b', 'm', 32, 0,
  /* 6095 */ 'v', 'a', 'd', 'd', 'u', 'b', 'm', 32, 0,
  /* 6104 */ 'v', 'm', 's', 'u', 'm', 'u', 'b', 'm', 32, 0,
  /* 6114 */ 'v', 's', 'u', 'b', 'u', 'd', 'm', 32, 0,
  /* 6123 */ 'v', 'a', 'd', 'd', 'u', 'd', 'm', 32, 0,
  /* 6132 */ 'v', 'm', 's', 'u', 'm', 's', 'h', 'm', 32, 0,
  /* 6142 */ 'v', 's', 'u', 'b', 'u', 'h', 'm', 32, 0,
  /* 6151 */ 'v', 'm', 'l', 'a', 'd', 'd', 'u', 'h', 'm', 32, 0,
  /* 6162 */ 'v', 'a', 'd', 'd', 'u', 'h', 'm', 32, 0,
  /* 6171 */ 'v', 'm', 's', 'u', 'm', 'u', 'h', 'm', 32, 0,
  /* 6181 */ 'v', 'r', 'f', 'i', 'm', 32, 0,
  /* 6188 */ 'x', 's', 'r', 'd', 'p', 'i', 'm', 32, 0,
  /* 6197 */ 'x', 'v', 'r', 'd', 'p', 'i', 'm', 32, 0,
  /* 6206 */ 'x', 'v', 'r', 's', 'p', 'i', 'm', 32, 0,
  /* 6215 */ 'q', 'v', 'f', 'r', 'i', 'm', 32, 0,
  /* 6223 */ 'v', 'r', 'l', 'd', 'n', 'm', 32, 0,
  /* 6231 */ 'r', 'l', 'w', 'i', 'n', 'm', 32, 0,
  /* 6239 */ 'v', 'r', 'l', 'w', 'n', 'm', 32, 0,
  /* 6247 */ 'v', 's', 'u', 'b', 'u', 'q', 'm', 32, 0,
  /* 6256 */ 'v', 'a', 'd', 'd', 'u', 'q', 'm', 32, 0,
  /* 6265 */ 'v', 's', 'u', 'b', 'e', 'u', 'q', 'm', 32, 0,
  /* 6275 */ 'v', 'a', 'd', 'd', 'e', 'u', 'q', 'm', 32, 0,
  /* 6285 */ 'q', 'v', 'f', 'p', 'e', 'r', 'm', 32, 0,
  /* 6294 */ 'v', 'p', 'e', 'r', 'm', 32, 0,
  /* 6301 */ 'x', 'x', 'p', 'e', 'r', 'm', 32, 0,
  /* 6309 */ 'v', 'p', 'k', 'u', 'd', 'u', 'm', 32, 0,
  /* 6318 */ 'v', 'p', 'k', 'u', 'h', 'u', 'm', 32, 0,
  /* 6327 */ 'v', 'p', 'k', 'u', 'w', 'u', 'm', 32, 0,
  /* 6336 */ 'v', 's', 'u', 'b', 'u', 'w', 'm', 32, 0,
  /* 6345 */ 'v', 'a', 'd', 'd', 'u', 'w', 'm', 32, 0,
  /* 6354 */ 'v', 'm', 'u', 'l', 'u', 'w', 'm', 32, 0,
  /* 6363 */ 'e', 'v', 'm', 'h', 'e', 'g', 's', 'm', 'f', 'a', 'n', 32, 0,
  /* 6376 */ 'e', 'v', 'm', 'h', 'o', 'g', 's', 'm', 'f', 'a', 'n', 32, 0,
  /* 6389 */ 'e', 'v', 'm', 'w', 's', 'm', 'f', 'a', 'n', 32, 0,
  /* 6400 */ 'e', 'v', 'm', 'w', 's', 's', 'f', 'a', 'n', 32, 0,
  /* 6411 */ 'e', 'v', 'm', 'h', 'e', 'g', 's', 'm', 'i', 'a', 'n', 32, 0,
  /* 6424 */ 'e', 'v', 'm', 'h', 'o', 'g', 's', 'm', 'i', 'a', 'n', 32, 0,
  /* 6437 */ 'e', 'v', 'm', 'w', 's', 'm', 'i', 'a', 'n', 32, 0,
  /* 6448 */ 'e', 'v', 'm', 'h', 'e', 'g', 'u', 'm', 'i', 'a', 'n', 32, 0,
  /* 6461 */ 'e', 'v', 'm', 'h', 'o', 'g', 'u', 'm', 'i', 'a', 'n', 32, 0,
  /* 6474 */ 'e', 'v', 'm', 'w', 'u', 'm', 'i', 'a', 'n', 32, 0,
  /* 6485 */ 'q', 'v', 'f', 't', 's', 't', 'n', 'a', 'n', 32, 0,
  /* 6496 */ 'q', 'v', 'f', 'c', 'p', 's', 'g', 'n', 32, 0,
  /* 6506 */ 'v', 'r', 'f', 'i', 'n', 32, 0,
  /* 6513 */ 'q', 'v', 'f', 'r', 'i', 'n', 32, 0,
  /* 6521 */ 'm', 'f', 's', 'r', 'i', 'n', 32, 0,
  /* 6529 */ 'm', 't', 's', 'r', 'i', 'n', 32, 0,
  /* 6537 */ 'x', 's', 'c', 'v', 's', 'p', 'd', 'p', 'n', 32, 0,
  /* 6548 */ 'x', 's', 'c', 'v', 'd', 'p', 's', 'p', 'n', 32, 0,
  /* 6559 */ 'd', 'a', 'r', 'n', 32, 0,
  /* 6565 */ 'm', 'f', 'f', 's', 'c', 'r', 'n', 32, 0,
  /* 6574 */ 'm', 'f', 'f', 's', 'c', 'd', 'r', 'n', 32, 0,
  /* 6584 */ 'e', 'v', 's', 't', 'w', 'h', 'o', 32, 0,
  /* 6593 */ 'e', 'v', 'm', 'e', 'r', 'g', 'e', 'l', 'o', 32, 0,
  /* 6604 */ 'e', 'v', 'm', 'e', 'r', 'g', 'e', 'h', 'i', 'l', 'o', 32, 0,
  /* 6617 */ 'v', 's', 'l', 'o', 32, 0,
  /* 6623 */ 'x', 's', 'c', 'v', 'q', 'p', 'd', 'p', 'o', 32, 0,
  /* 6634 */ 'x', 's', 'n', 'm', 's', 'u', 'b', 'q', 'p', 'o', 32, 0,
  /* 6646 */ 'x', 's', 'm', 's', 'u', 'b', 'q', 'p', 'o', 32, 0,
  /* 6657 */ 'x', 's', 's', 'u', 'b', 'q', 'p', 'o', 32, 0,
  /* 6667 */ 'x', 's', 'n', 'm', 'a', 'd', 'd', 'q', 'p', 'o', 32, 0,
  /* 6679 */ 'x', 's', 'm', 'a', 'd', 'd', 'q', 'p', 'o', 32, 0,
  /* 6690 */ 'x', 's', 'a', 'd', 'd', 'q', 'p', 'o', 32, 0,
  /* 6700 */ 'x', 's', 'm', 'u', 'l', 'q', 'p', 'o', 32, 0,
  /* 6710 */ 'x', 's', 's', 'q', 'r', 't', 'q', 'p', 'o', 32, 0,
  /* 6721 */ 'x', 's', 'd', 'i', 'v', 'q', 'p', 'o', 32, 0,
  /* 6731 */ 'v', 's', 'r', 'o', 32, 0,
  /* 6737 */ 'e', 'v', 's', 't', 'w', 'w', 'o', 32, 0,
  /* 6746 */ 'x', 's', 'n', 'm', 's', 'u', 'b', 'a', 'd', 'p', 32, 0,
  /* 6758 */ 'x', 'v', 'n', 'm', 's', 'u', 'b', 'a', 'd', 'p', 32, 0,
  /* 6770 */ 'x', 's', 'm', 's', 'u', 'b', 'a', 'd', 'p', 32, 0,
  /* 6781 */ 'x', 'v', 'm', 's', 'u', 'b', 'a', 'd', 'p', 32, 0,
  /* 6792 */ 'x', 's', 'n', 'm', 'a', 'd', 'd', 'a', 'd', 'p', 32, 0,
  /* 6804 */ 'x', 'v', 'n', 'm', 'a', 'd', 'd', 'a', 'd', 'p', 32, 0,
  /* 6816 */ 'x', 's', 'm', 'a', 'd', 'd', 'a', 'd', 'p', 32, 0,
  /* 6827 */ 'x', 'v', 'm', 'a', 'd', 'd', 'a', 'd', 'p', 32, 0,
  /* 6838 */ 'x', 's', 's', 'u', 'b', 'd', 'p', 32, 0,
  /* 6847 */ 'x', 'v', 's', 'u', 'b', 'd', 'p', 32, 0,
  /* 6856 */ 'x', 's', 't', 's', 't', 'd', 'c', 'd', 'p', 32, 0,
  /* 6867 */ 'x', 'v', 't', 's', 't', 'd', 'c', 'd', 'p', 32, 0,
  /* 6878 */ 'x', 's', 'm', 'i', 'n', 'c', 'd', 'p', 32, 0,
  /* 6888 */ 'x', 's', 'm', 'a', 'x', 'c', 'd', 'p', 32, 0,
  /* 6898 */ 'x', 's', 'a', 'd', 'd', 'd', 'p', 32, 0,
  /* 6907 */ 'x', 'v', 'a', 'd', 'd', 'd', 'p', 32, 0,
  /* 6916 */ 'x', 's', 'c', 'v', 's', 'x', 'd', 'd', 'p', 32, 0,
  /* 6927 */ 'x', 'v', 'c', 'v', 's', 'x', 'd', 'd', 'p', 32, 0,
  /* 6938 */ 'x', 's', 'c', 'v', 'u', 'x', 'd', 'd', 'p', 32, 0,
  /* 6949 */ 'x', 'v', 'c', 'v', 'u', 'x', 'd', 'd', 'p', 32, 0,
  /* 6960 */ 'x', 's', 'c', 'm', 'p', 'g', 'e', 'd', 'p', 32, 0,
  /* 6971 */ 'x', 'v', 'c', 'm', 'p', 'g', 'e', 'd', 'p', 32, 0,
  /* 6982 */ 'x', 's', 'r', 'e', 'd', 'p', 32, 0,
  /* 6990 */ 'x', 'v', 'r', 'e', 'd', 'p', 32, 0,
  /* 6998 */ 'x', 's', 'r', 's', 'q', 'r', 't', 'e', 'd', 'p', 32, 0,
  /* 7010 */ 'x', 'v', 'r', 's', 'q', 'r', 't', 'e', 'd', 'p', 32, 0,
  /* 7022 */ 'x', 's', 'n', 'e', 'g', 'd', 'p', 32, 0,
  /* 7031 */ 'x', 'v', 'n', 'e', 'g', 'd', 'p', 32, 0,
  /* 7040 */ 'x', 's', 'x', 's', 'i', 'g', 'd', 'p', 32, 0,
  /* 7050 */ 'x', 'v', 'x', 's', 'i', 'g', 'd', 'p', 32, 0,
  /* 7060 */ 'x', 's', 'm', 'i', 'n', 'j', 'd', 'p', 32, 0,
  /* 7070 */ 'x', 's', 'm', 'a', 'x', 'j', 'd', 'p', 32, 0,
  /* 7080 */ 'x', 's', 'm', 'u', 'l', 'd', 'p', 32, 0,
  /* 7089 */ 'x', 'v', 'm', 'u', 'l', 'd', 'p', 32, 0,
  /* 7098 */ 'x', 's', 'n', 'm', 's', 'u', 'b', 'm', 'd', 'p', 32, 0,
  /* 7110 */ 'x', 'v', 'n', 'm', 's', 'u', 'b', 'm', 'd', 'p', 32, 0,
  /* 7122 */ 'x', 's', 'm', 's', 'u', 'b', 'm', 'd', 'p', 32, 0,
  /* 7133 */ 'x', 'v', 'm', 's', 'u', 'b', 'm', 'd', 'p', 32, 0,
  /* 7144 */ 'x', 's', 'n', 'm', 'a', 'd', 'd', 'm', 'd', 'p', 32, 0,
  /* 7156 */ 'x', 'v', 'n', 'm', 'a', 'd', 'd', 'm', 'd', 'p', 32, 0,
  /* 7168 */ 'x', 's', 'm', 'a', 'd', 'd', 'm', 'd', 'p', 32, 0,
  /* 7179 */ 'x', 'v', 'm', 'a', 'd', 'd', 'm', 'd', 'p', 32, 0,
  /* 7190 */ 'x', 's', 'c', 'p', 's', 'g', 'n', 'd', 'p', 32, 0,
  /* 7201 */ 'x', 'v', 'c', 'p', 's', 'g', 'n', 'd', 'p', 32, 0,
  /* 7212 */ 'x', 's', 'm', 'i', 'n', 'd', 'p', 32, 0,
  /* 7221 */ 'x', 'v', 'm', 'i', 'n', 'd', 'p', 32, 0,
  /* 7230 */ 'x', 's', 'c', 'm', 'p', 'o', 'd', 'p', 32, 0,
  /* 7240 */ 'x', 's', 'c', 'v', 'h', 'p', 'd', 'p', 32, 0,
  /* 7250 */ 'x', 's', 'c', 'v', 'q', 'p', 'd', 'p', 32, 0,
  /* 7260 */ 'x', 's', 'c', 'v', 's', 'p', 'd', 'p', 32, 0,
  /* 7270 */ 'x', 'v', 'c', 'v', 's', 'p', 'd', 'p', 32, 0,
  /* 7280 */ 'x', 's', 'i', 'e', 'x', 'p', 'd', 'p', 32, 0,
  /* 7290 */ 'x', 'v', 'i', 'e', 'x', 'p', 'd', 'p', 32, 0,
  /* 7300 */ 'x', 's', 'c', 'm', 'p', 'e', 'x', 'p', 'd', 'p', 32, 0,
  /* 7312 */ 'x', 's', 'x', 'e', 'x', 'p', 'd', 'p', 32, 0,
  /* 7322 */ 'x', 'v', 'x', 'e', 'x', 'p', 'd', 'p', 32, 0,
  /* 7332 */ 'x', 's', 'c', 'm', 'p', 'e', 'q', 'd', 'p', 32, 0,
  /* 7343 */ 'x', 'v', 'c', 'm', 'p', 'e', 'q', 'd', 'p', 32, 0,
  /* 7354 */ 'x', 's', 'n', 'a', 'b', 's', 'd', 'p', 32, 0,
  /* 7364 */ 'x', 'v', 'n', 'a', 'b', 's', 'd', 'p', 32, 0,
  /* 7374 */ 'x', 's', 'a', 'b', 's', 'd', 'p', 32, 0,
  /* 7383 */ 'x', 'v', 'a', 'b', 's', 'd', 'p', 32, 0,
  /* 7392 */ 'x', 's', 'c', 'm', 'p', 'g', 't', 'd', 'p', 32, 0,
  /* 7403 */ 'x', 'v', 'c', 'm', 'p', 'g', 't', 'd', 'p', 32, 0,
  /* 7414 */ 'x', 's', 's', 'q', 'r', 't', 'd', 'p', 32, 0,
  /* 7424 */ 'x', 's', 't', 's', 'q', 'r', 't', 'd', 'p', 32, 0,
  /* 7435 */ 'x', 'v', 't', 's', 'q', 'r', 't', 'd', 'p', 32, 0,
  /* 7446 */ 'x', 'v', 's', 'q', 'r', 't', 'd', 'p', 32, 0,
  /* 7456 */ 'x', 's', 'c', 'm', 'p', 'u', 'd', 'p', 32, 0,
  /* 7466 */ 'x', 's', 'd', 'i', 'v', 'd', 'p', 32, 0,
  /* 7475 */ 'x', 's', 't', 'd', 'i', 'v', 'd', 'p', 32, 0,
  /* 7485 */ 'x', 'v', 't', 'd', 'i', 'v', 'd', 'p', 32, 0,
  /* 7495 */ 'x', 'v', 'd', 'i', 'v', 'd', 'p', 32, 0,
  /* 7504 */ 'x', 'v', 'c', 'v', 's', 'x', 'w', 'd', 'p', 32, 0,
  /* 7515 */ 'x', 'v', 'c', 'v', 'u', 'x', 'w', 'd', 'p', 32, 0,
  /* 7526 */ 'x', 's', 'm', 'a', 'x', 'd', 'p', 32, 0,
  /* 7535 */ 'x', 'v', 'm', 'a', 'x', 'd', 'p', 32, 0,
  /* 7544 */ 'd', 'c', 'b', 'f', 'e', 'p', 32, 0,
  /* 7552 */ 'i', 'c', 'b', 'i', 'e', 'p', 32, 0,
  /* 7560 */ 'd', 'c', 'b', 'z', 'l', 'e', 'p', 32, 0,
  /* 7569 */ 'd', 'c', 'b', 't', 'e', 'p', 32, 0,
  /* 7577 */ 'd', 'c', 'b', 's', 't', 'e', 'p', 32, 0,
  /* 7586 */ 'd', 'c', 'b', 't', 's', 't', 'e', 'p', 32, 0,
  /* 7596 */ 'd', 'c', 'b', 'z', 'e', 'p', 32, 0,
  /* 7604 */ 'v', 'c', 'm', 'p', 'b', 'f', 'p', 32, 0,
  /* 7613 */ 'v', 'n', 'm', 's', 'u', 'b', 'f', 'p', 32, 0,
  /* 7623 */ 'v', 's', 'u', 'b', 'f', 'p', 32, 0,
  /* 7631 */ 'v', 'm', 'a', 'd', 'd', 'f', 'p', 32, 0,
  /* 7640 */ 'v', 'a', 'd', 'd', 'f', 'p', 32, 0,
  /* 7648 */ 'v', 'l', 'o', 'g', 'e', 'f', 'p', 32, 0,
  /* 7657 */ 'v', 'c', 'm', 'p', 'g', 'e', 'f', 'p', 32, 0,
  /* 7667 */ 'v', 'r', 'e', 'f', 'p', 32, 0,
  /* 7674 */ 'v', 'e', 'x', 'p', 't', 'e', 'f', 'p', 32, 0,
  /* 7684 */ 'v', 'r', 's', 'q', 'r', 't', 'e', 'f', 'p', 32, 0,
  /* 7695 */ 'v', 'm', 'i', 'n', 'f', 'p', 32, 0,
  /* 7703 */ 'v', 'c', 'm', 'p', 'e', 'q', 'f', 'p', 32, 0,
  /* 7713 */ 'v', 'c', 'm', 'p', 'g', 't', 'f', 'p', 32, 0,
  /* 7723 */ 'v', 'm', 'a', 'x', 'f', 'p', 32, 0,
  /* 7731 */ 'x', 's', 'c', 'v', 'd', 'p', 'h', 'p', 32, 0,
  /* 7741 */ 'x', 'v', 'c', 'v', 's', 'p', 'h', 'p', 32, 0,
  /* 7751 */ 'v', 'r', 'f', 'i', 'p', 32, 0,
  /* 7758 */ 'x', 's', 'r', 'd', 'p', 'i', 'p', 32, 0,
  /* 7767 */ 'x', 'v', 'r', 'd', 'p', 'i', 'p', 32, 0,
  /* 7776 */ 'x', 'v', 'r', 's', 'p', 'i', 'p', 32, 0,
  /* 7785 */ 'q', 'v', 'f', 'r', 'i', 'p', 32, 0,
  /* 7793 */ 'd', 'c', 'b', 'f', 'l', 'p', 32, 0,
  /* 7801 */ 'x', 's', 'n', 'm', 's', 'u', 'b', 'q', 'p', 32, 0,
  /* 7812 */ 'x', 's', 'm', 's', 'u', 'b', 'q', 'p', 32, 0,
  /* 7822 */ 'x', 's', 's', 'u', 'b', 'q', 'p', 32, 0,
  /* 7831 */ 'x', 's', 't', 's', 't', 'd', 'c', 'q', 'p', 32, 0,
  /* 7842 */ 'x', 's', 'n', 'm', 'a', 'd', 'd', 'q', 'p', 32, 0,
  /* 7853 */ 'x', 's', 'm', 'a', 'd', 'd', 'q', 'p', 32, 0,
  /* 7863 */ 'x', 's', 'a', 'd', 'd', 'q', 'p', 32, 0,
  /* 7872 */ 'x', 's', 'c', 'v', 's', 'd', 'q', 'p', 32, 0,
  /* 7882 */ 'x', 's', 'c', 'v', 'u', 'd', 'q', 'p', 32, 0,
  /* 7892 */ 'x', 's', 'n', 'e', 'g', 'q', 'p', 32, 0,
  /* 7901 */ 'x', 's', 'x', 's', 'i', 'g', 'q', 'p', 32, 0,
  /* 7911 */ 'x', 's', 'm', 'u', 'l', 'q', 'p', 32, 0,
  /* 7920 */ 'x', 's', 'c', 'p', 's', 'g', 'n', 'q', 'p', 32, 0,
  /* 7931 */ 'x', 's', 'c', 'm', 'p', 'o', 'q', 'p', 32, 0,
  /* 7941 */ 'x', 's', 'c', 'v', 'd', 'p', 'q', 'p', 32, 0,
  /* 7951 */ 'x', 's', 'i', 'e', 'x', 'p', 'q', 'p', 32, 0,
  /* 7961 */ 'x', 's', 'c', 'm', 'p', 'e', 'x', 'p', 'q', 'p', 32, 0,
  /* 7973 */ 'x', 's', 'x', 'e', 'x', 'p', 'q', 'p', 32, 0,
  /* 7983 */ 'x', 's', 'n', 'a', 'b', 's', 'q', 'p', 32, 0,
  /* 7993 */ 'x', 's', 'a', 'b', 's', 'q', 'p', 32, 0,
  /* 8002 */ 'x', 's', 's', 'q', 'r', 't', 'q', 'p', 32, 0,
  /* 8012 */ 'x', 's', 'c', 'm', 'p', 'u', 'q', 'p', 32, 0,
  /* 8022 */ 'x', 's', 'd', 'i', 'v', 'q', 'p', 32, 0,
  /* 8031 */ 'x', 's', 'n', 'm', 's', 'u', 'b', 'a', 's', 'p', 32, 0,
  /* 8043 */ 'x', 'v', 'n', 'm', 's', 'u', 'b', 'a', 's', 'p', 32, 0,
  /* 8055 */ 'x', 's', 'm', 's', 'u', 'b', 'a', 's', 'p', 32, 0,
  /* 8066 */ 'x', 'v', 'm', 's', 'u', 'b', 'a', 's', 'p', 32, 0,
  /* 8077 */ 'x', 's', 'n', 'm', 'a', 'd', 'd', 'a', 's', 'p', 32, 0,
  /* 8089 */ 'x', 'v', 'n', 'm', 'a', 'd', 'd', 'a', 's', 'p', 32, 0,
  /* 8101 */ 'x', 's', 'm', 'a', 'd', 'd', 'a', 's', 'p', 32, 0,
  /* 8112 */ 'x', 'v', 'm', 'a', 'd', 'd', 'a', 's', 'p', 32, 0,
  /* 8123 */ 'x', 's', 's', 'u', 'b', 's', 'p', 32, 0,
  /* 8132 */ 'x', 'v', 's', 'u', 'b', 's', 'p', 32, 0,
  /* 8141 */ 'x', 's', 't', 's', 't', 'd', 'c', 's', 'p', 32, 0,
  /* 8152 */ 'x', 'v', 't', 's', 't', 'd', 'c', 's', 'p', 32, 0,
  /* 8163 */ 'x', 's', 'a', 'd', 'd', 's', 'p', 32, 0,
  /* 8172 */ 'x', 'v', 'a', 'd', 'd', 's', 'p', 32, 0,
  /* 8181 */ 'x', 's', 'c', 'v', 's', 'x', 'd', 's', 'p', 32, 0,
  /* 8192 */ 'x', 'v', 'c', 'v', 's', 'x', 'd', 's', 'p', 32, 0,
  /* 8203 */ 'x', 's', 'c', 'v', 'u', 'x', 'd', 's', 'p', 32, 0,
  /* 8214 */ 'x', 'v', 'c', 'v', 'u', 'x', 'd', 's', 'p', 32, 0,
  /* 8225 */ 'x', 'v', 'c', 'm', 'p', 'g', 'e', 's', 'p', 32, 0,
  /* 8236 */ 'x', 's', 'r', 'e', 's', 'p', 32, 0,
  /* 8244 */ 'x', 'v', 'r', 'e', 's', 'p', 32, 0,
  /* 8252 */ 'x', 's', 'r', 's', 'q', 'r', 't', 'e', 's', 'p', 32, 0,
  /* 8264 */ 'x', 'v', 'r', 's', 'q', 'r', 't', 'e', 's', 'p', 32, 0,
  /* 8276 */ 'x', 'v', 'n', 'e', 'g', 's', 'p', 32, 0,
  /* 8285 */ 'x', 'v', 'x', 's', 'i', 'g', 's', 'p', 32, 0,
  /* 8295 */ 'x', 's', 'm', 'u', 'l', 's', 'p', 32, 0,
  /* 8304 */ 'x', 'v', 'm', 'u', 'l', 's', 'p', 32, 0,
  /* 8313 */ 'x', 's', 'n', 'm', 's', 'u', 'b', 'm', 's', 'p', 32, 0,
  /* 8325 */ 'x', 'v', 'n', 'm', 's', 'u', 'b', 'm', 's', 'p', 32, 0,
  /* 8337 */ 'x', 's', 'm', 's', 'u', 'b', 'm', 's', 'p', 32, 0,
  /* 8348 */ 'x', 'v', 'm', 's', 'u', 'b', 'm', 's', 'p', 32, 0,
  /* 8359 */ 'x', 's', 'n', 'm', 'a', 'd', 'd', 'm', 's', 'p', 32, 0,
  /* 8371 */ 'x', 'v', 'n', 'm', 'a', 'd', 'd', 'm', 's', 'p', 32, 0,
  /* 8383 */ 'x', 's', 'm', 'a', 'd', 'd', 'm', 's', 'p', 32, 0,
  /* 8394 */ 'x', 'v', 'm', 'a', 'd', 'd', 'm', 's', 'p', 32, 0,
  /* 8405 */ 'x', 'v', 'c', 'p', 's', 'g', 'n', 's', 'p', 32, 0,
  /* 8416 */ 'x', 'v', 'm', 'i', 'n', 's', 'p', 32, 0,
  /* 8425 */ 'x', 's', 'c', 'v', 'd', 'p', 's', 'p', 32, 0,
  /* 8435 */ 'x', 'v', 'c', 'v', 'd', 'p', 's', 'p', 32, 0,
  /* 8445 */ 'x', 'v', 'c', 'v', 'h', 'p', 's', 'p', 32, 0,
  /* 8455 */ 'x', 'v', 'i', 'e', 'x', 'p', 's', 'p', 32, 0,
  /* 8465 */ 'x', 'v', 'x', 'e', 'x', 'p', 's', 'p', 32, 0,
  /* 8475 */ 'x', 'v', 'c', 'm', 'p', 'e', 'q', 's', 'p', 32, 0,
  /* 8486 */ 'q', 'v', 'f', 'r', 's', 'p', 32, 0,
  /* 8494 */ 'x', 's', 'r', 's', 'p', 32, 0,
  /* 8501 */ 'x', 'v', 'n', 'a', 'b', 's', 's', 'p', 32, 0,
  /* 8511 */ 'x', 'v', 'a', 'b', 's', 's', 'p', 32, 0,
  /* 8520 */ 'l', 'x', 's', 's', 'p', 32, 0,
  /* 8527 */ 's', 't', 'x', 's', 's', 'p', 32, 0,
  /* 8535 */ 'x', 'v', 'c', 'm', 'p', 'g', 't', 's', 'p', 32, 0,
  /* 8546 */ 'x', 's', 's', 'q', 'r', 't', 's', 'p', 32, 0,
  /* 8556 */ 'x', 'v', 't', 's', 'q', 'r', 't', 's', 'p', 32, 0,
  /* 8567 */ 'x', 'v', 's', 'q', 'r', 't', 's', 'p', 32, 0,
  /* 8577 */ 'x', 's', 'd', 'i', 'v', 's', 'p', 32, 0,
  /* 8586 */ 'x', 'v', 't', 'd', 'i', 'v', 's', 'p', 32, 0,
  /* 8596 */ 'x', 'v', 'd', 'i', 'v', 's', 'p', 32, 0,
  /* 8605 */ 'x', 'v', 'c', 'v', 's', 'x', 'w', 's', 'p', 32, 0,
  /* 8616 */ 'x', 'v', 'c', 'v', 'u', 'x', 'w', 's', 'p', 32, 0,
  /* 8627 */ 'x', 'v', 'm', 'a', 'x', 's', 'p', 32, 0,
  /* 8636 */ 'x', 's', 'r', 'q', 'p', 'x', 'p', 32, 0,
  /* 8645 */ 'v', 'p', 'r', 't', 'y', 'b', 'q', 32, 0,
  /* 8654 */ 'e', 'f', 'd', 'c', 'm', 'p', 'e', 'q', 32, 0,
  /* 8664 */ 'q', 'v', 'f', 'c', 'm', 'p', 'e', 'q', 32, 0,
  /* 8674 */ 'e', 'f', 's', 'c', 'm', 'p', 'e', 'q', 32, 0,
  /* 8684 */ 'e', 'v', 'f', 's', 'c', 'm', 'p', 'e', 'q', 32, 0,
  /* 8695 */ 'e', 'v', 'c', 'm', 'p', 'e', 'q', 32, 0,
  /* 8704 */ 'e', 'f', 'd', 't', 's', 't', 'e', 'q', 32, 0,
  /* 8714 */ 'e', 'f', 's', 't', 's', 't', 'e', 'q', 32, 0,
  /* 8724 */ 'e', 'v', 'f', 's', 't', 's', 't', 'e', 'q', 32, 0,
  /* 8735 */ 'v', 'b', 'p', 'e', 'r', 'm', 'q', 32, 0,
  /* 8744 */ 'x', 'x', 'b', 'r', 'q', 32, 0,
  /* 8751 */ 'v', 'm', 'u', 'l', '1', '0', 'u', 'q', 32, 0,
  /* 8761 */ 'v', 'm', 'u', 'l', '1', '0', 'c', 'u', 'q', 32, 0,
  /* 8772 */ 'v', 's', 'u', 'b', 'c', 'u', 'q', 32, 0,
  /* 8781 */ 'v', 'a', 'd', 'd', 'c', 'u', 'q', 32, 0,
  /* 8790 */ 'v', 'm', 'u', 'l', '1', '0', 'e', 'c', 'u', 'q', 32, 0,
  /* 8802 */ 'v', 's', 'u', 'b', 'e', 'c', 'u', 'q', 32, 0,
  /* 8812 */ 'v', 'a', 'd', 'd', 'e', 'c', 'u', 'q', 32, 0,
  /* 8822 */ 'v', 'm', 'u', 'l', '1', '0', 'e', 'u', 'q', 32, 0,
  /* 8833 */ '#', 'T', 'C', '_', 'R', 'E', 'T', 'U', 'R', 'N', 'r', 32, 0,
  /* 8846 */ 'm', 'b', 'a', 'r', 32, 0,
  /* 8852 */ 'm', 'f', 'd', 'c', 'r', 32, 0,
  /* 8859 */ 'r', 'l', 'd', 'c', 'r', 32, 0,
  /* 8866 */ 'm', 't', 'd', 'c', 'r', 32, 0,
  /* 8873 */ 'm', 'f', 'c', 'r', 32, 0,
  /* 8879 */ 'r', 'l', 'd', 'i', 'c', 'r', 32, 0,
  /* 8887 */ 'm', 'f', 'v', 's', 'c', 'r', 32, 0,
  /* 8895 */ 'm', 't', 'v', 's', 'c', 'r', 32, 0,
  /* 8903 */ 'v', 'n', 'c', 'i', 'p', 'h', 'e', 'r', 32, 0,
  /* 8913 */ 'v', 'c', 'i', 'p', 'h', 'e', 'r', 32, 0,
  /* 8922 */ 'b', 'c', 'l', 'r', 32, 0,
  /* 8928 */ 'm', 'f', 'l', 'r', 32, 0,
  /* 8934 */ 'm', 't', 'l', 'r', 32, 0,
  /* 8940 */ 'p', 's', '_', 'm', 'r', 32, 0,
  /* 8947 */ 'q', 'v', 'f', 'm', 'r', 32, 0,
  /* 8954 */ 'm', 'f', 'p', 'm', 'r', 32, 0,
  /* 8961 */ 'm', 't', 'p', 'm', 'r', 32, 0,
  /* 8968 */ 'v', 'p', 'e', 'r', 'm', 'r', 32, 0,
  /* 8976 */ 'x', 'x', 'p', 'e', 'r', 'm', 'r', 32, 0,
  /* 8985 */ 'x', 'x', 'l', 'o', 'r', 32, 0,
  /* 8992 */ 'x', 'x', 'l', 'n', 'o', 'r', 32, 0,
  /* 9000 */ 'c', 'r', 'n', 'o', 'r', 32, 0,
  /* 9007 */ 'e', 'v', 'n', 'o', 'r', 32, 0,
  /* 9014 */ 'c', 'r', 'o', 'r', 32, 0,
  /* 9020 */ 'e', 'v', 'o', 'r', 32, 0,
  /* 9026 */ 'x', 'x', 'l', 'x', 'o', 'r', 32, 0,
  /* 9034 */ 'v', 'p', 'e', 'r', 'm', 'x', 'o', 'r', 32, 0,
  /* 9044 */ 'c', 'r', 'x', 'o', 'r', 32, 0,
  /* 9051 */ 'e', 'v', 'x', 'o', 'r', 32, 0,
  /* 9058 */ 'm', 'f', 's', 'p', 'r', 32, 0,
  /* 9065 */ 'm', 't', 's', 'p', 'r', 32, 0,
  /* 9072 */ 'm', 'f', 's', 'r', 32, 0,
  /* 9078 */ 'm', 'f', 'm', 's', 'r', 32, 0,
  /* 9085 */ 'm', 't', 'm', 's', 'r', 32, 0,
  /* 9092 */ 'm', 't', 's', 'r', 32, 0,
  /* 9098 */ 'l', 'v', 's', 'r', 32, 0,
  /* 9104 */ 'b', 'c', 'c', 't', 'r', 32, 0,
  /* 9111 */ 'm', 'f', 'c', 't', 'r', 32, 0,
  /* 9118 */ 'm', 't', 'c', 't', 'r', 32, 0,
  /* 9125 */ 'p', 's', '_', 'a', 'b', 's', 32, 0,
  /* 9133 */ 'e', 'f', 'd', 'a', 'b', 's', 32, 0,
  /* 9141 */ 'q', 'v', 'f', 'a', 'b', 's', 32, 0,
  /* 9149 */ 'p', 's', '_', 'n', 'a', 'b', 's', 32, 0,
  /* 9158 */ 'e', 'f', 'd', 'n', 'a', 'b', 's', 32, 0,
  /* 9167 */ 'q', 'v', 'f', 'n', 'a', 'b', 's', 32, 0,
  /* 9176 */ 'e', 'f', 's', 'n', 'a', 'b', 's', 32, 0,
  /* 9185 */ 'e', 'v', 'f', 's', 'n', 'a', 'b', 's', 32, 0,
  /* 9195 */ 'e', 'f', 's', 'a', 'b', 's', 32, 0,
  /* 9203 */ 'e', 'v', 'f', 's', 'a', 'b', 's', 32, 0,
  /* 9212 */ 'e', 'v', 'a', 'b', 's', 32, 0,
  /* 9219 */ 'v', 's', 'u', 'm', '4', 's', 'b', 's', 32, 0,
  /* 9229 */ 'v', 's', 'u', 'b', 's', 'b', 's', 32, 0,
  /* 9238 */ 'v', 'a', 'd', 'd', 's', 'b', 's', 32, 0,
  /* 9247 */ 'v', 's', 'u', 'm', '4', 'u', 'b', 's', 32, 0,
  /* 9257 */ 'v', 's', 'u', 'b', 'u', 'b', 's', 32, 0,
  /* 9266 */ 'v', 'a', 'd', 'd', 'u', 'b', 's', 32, 0,
  /* 9275 */ 'q', 'v', 'f', 's', 'u', 'b', 's', 32, 0,
  /* 9284 */ 'q', 'v', 'f', 'm', 's', 'u', 'b', 's', 32, 0,
  /* 9294 */ 'q', 'v', 'f', 'n', 'm', 's', 'u', 'b', 's', 32, 0,
  /* 9305 */ 'q', 'v', 'f', 'a', 'd', 'd', 's', 32, 0,
  /* 9314 */ 'q', 'v', 'f', 'm', 'a', 'd', 'd', 's', 32, 0,
  /* 9324 */ 'q', 'v', 'f', 'n', 'm', 'a', 'd', 'd', 's', 32, 0,
  /* 9335 */ 'q', 'v', 'f', 'x', 'x', 'c', 'p', 'n', 'm', 'a', 'd', 'd', 's', 32, 0,
  /* 9350 */ 'q', 'v', 'f', 'x', 'x', 'n', 'p', 'm', 'a', 'd', 'd', 's', 32, 0,
  /* 9364 */ 'q', 'v', 'f', 'x', 'm', 'a', 'd', 'd', 's', 32, 0,
  /* 9375 */ 'q', 'v', 'f', 'x', 'x', 'm', 'a', 'd', 'd', 's', 32, 0,
  /* 9387 */ 'q', 'v', 'f', 'c', 'f', 'i', 'd', 's', 32, 0,
  /* 9397 */ 'd', 'c', 'b', 't', 'd', 's', 32, 0,
  /* 9405 */ 'd', 'c', 'b', 't', 's', 't', 'd', 's', 32, 0,
  /* 9415 */ 'x', 's', 'c', 'v', 'd', 'p', 's', 'x', 'd', 's', 32, 0,
  /* 9427 */ 'x', 'v', 'c', 'v', 'd', 'p', 's', 'x', 'd', 's', 32, 0,
  /* 9439 */ 'x', 'v', 'c', 'v', 's', 'p', 's', 'x', 'd', 's', 32, 0,
  /* 9451 */ 'x', 's', 'c', 'v', 'd', 'p', 'u', 'x', 'd', 's', 32, 0,
  /* 9463 */ 'x', 'v', 'c', 'v', 'd', 'p', 'u', 'x', 'd', 's', 32, 0,
  /* 9475 */ 'x', 'v', 'c', 'v', 's', 'p', 'u', 'x', 'd', 's', 32, 0,
  /* 9487 */ 'p', 's', '_', 'r', 'e', 's', 32, 0,
  /* 9495 */ 'q', 'v', 'f', 'r', 'e', 's', 32, 0,
  /* 9503 */ 'q', 'v', 'f', 'r', 's', 'q', 'r', 't', 'e', 's', 32, 0,
  /* 9515 */ 'e', 'f', 'd', 'c', 'f', 's', 32, 0,
  /* 9523 */ 'm', 'f', 'f', 's', 32, 0,
  /* 9529 */ 'l', 'f', 's', 32, 0,
  /* 9534 */ 'm', 'c', 'r', 'f', 's', 32, 0,
  /* 9541 */ 's', 't', 'f', 's', 32, 0,
  /* 9547 */ 'v', 's', 'u', 'm', '4', 's', 'h', 's', 32, 0,
  /* 9557 */ 'v', 's', 'u', 'b', 's', 'h', 's', 32, 0,
  /* 9566 */ 'v', 'm', 'h', 'a', 'd', 'd', 's', 'h', 's', 32, 0,
  /* 9577 */ 'v', 'm', 'h', 'r', 'a', 'd', 'd', 's', 'h', 's', 32, 0,
  /* 9589 */ 'v', 'a', 'd', 'd', 's', 'h', 's', 32, 0,
  /* 9598 */ 'v', 'm', 's', 'u', 'm', 's', 'h', 's', 32, 0,
  /* 9608 */ 'v', 's', 'u', 'b', 'u', 'h', 's', 32, 0,
  /* 9617 */ 'v', 'a', 'd', 'd', 'u', 'h', 's', 32, 0,
  /* 9626 */ 'v', 'm', 's', 'u', 'm', 'u', 'h', 's', 32, 0,
  /* 9636 */ 's', 'u', 'b', 'i', 's', 32, 0,
  /* 9643 */ 's', 'u', 'b', 'p', 'c', 'i', 's', 32, 0,
  /* 9652 */ 'a', 'd', 'd', 'p', 'c', 'i', 's', 32, 0,
  /* 9661 */ 'a', 'd', 'd', 'i', 's', 32, 0,
  /* 9668 */ 'l', 'i', 's', 32, 0,
  /* 9673 */ 'x', 'o', 'r', 'i', 's', 32, 0,
  /* 9680 */ 'e', 'v', 's', 'r', 'w', 'i', 's', 32, 0,
  /* 9689 */ 'i', 'c', 'b', 't', 'l', 's', 32, 0,
  /* 9697 */ 'q', 'v', 'f', 'm', 'u', 'l', 's', 32, 0,
  /* 9706 */ 'q', 'v', 'f', 'x', 'm', 'u', 'l', 's', 32, 0,
  /* 9716 */ 'e', 'v', 'l', 'w', 'h', 'o', 's', 32, 0,
  /* 9725 */ 'v', 'p', 'k', 's', 'd', 's', 's', 32, 0,
  /* 9734 */ 'v', 'p', 'k', 's', 'h', 's', 's', 32, 0,
  /* 9743 */ 'v', 'p', 'k', 's', 'w', 's', 's', 32, 0,
  /* 9752 */ 'e', 'v', 'c', 'm', 'p', 'g', 't', 's', 32, 0,
  /* 9762 */ 'e', 'v', 'c', 'm', 'p', 'l', 't', 's', 32, 0,
  /* 9772 */ 'f', 's', 'q', 'r', 't', 's', 32, 0,
  /* 9780 */ 'q', 'v', 'f', 'c', 'f', 'i', 'd', 'u', 's', 32, 0,
  /* 9791 */ 'v', 'p', 'k', 's', 'd', 'u', 's', 32, 0,
  /* 9800 */ 'v', 'p', 'k', 'u', 'd', 'u', 's', 32, 0,
  /* 9809 */ 'v', 'p', 'k', 's', 'h', 'u', 's', 32, 0,
  /* 9818 */ 'v', 'p', 'k', 'u', 'h', 'u', 's', 32, 0,
  /* 9827 */ 'v', 'p', 'k', 's', 'w', 'u', 's', 32, 0,
  /* 9836 */ 'v', 'p', 'k', 'u', 'w', 'u', 's', 32, 0,
  /* 9845 */ 'f', 'd', 'i', 'v', 's', 32, 0,
  /* 9852 */ 'e', 'v', 's', 'r', 'w', 's', 32, 0,
  /* 9860 */ 'm', 't', 'v', 's', 'r', 'w', 's', 32, 0,
  /* 9869 */ 'v', 's', 'u', 'm', '2', 's', 'w', 's', 32, 0,
  /* 9879 */ 'v', 's', 'u', 'b', 's', 'w', 's', 32, 0,
  /* 9888 */ 'v', 'a', 'd', 'd', 's', 'w', 's', 32, 0,
  /* 9897 */ 'v', 's', 'u', 'm', 's', 'w', 's', 32, 0,
  /* 9906 */ 'v', 's', 'u', 'b', 'u', 'w', 's', 32, 0,
  /* 9915 */ 'v', 'a', 'd', 'd', 'u', 'w', 's', 32, 0,
  /* 9924 */ 'e', 'v', 'd', 'i', 'v', 'w', 's', 32, 0,
  /* 9933 */ 'x', 's', 'c', 'v', 'd', 'p', 's', 'x', 'w', 's', 32, 0,
  /* 9945 */ 'x', 'v', 'c', 'v', 'd', 'p', 's', 'x', 'w', 's', 32, 0,
  /* 9957 */ 'x', 'v', 'c', 'v', 's', 'p', 's', 'x', 'w', 's', 32, 0,
  /* 9969 */ 'x', 's', 'c', 'v', 'd', 'p', 'u', 'x', 'w', 's', 32, 0,
  /* 9981 */ 'x', 'v', 'c', 'v', 'd', 'p', 'u', 'x', 'w', 's', 32, 0,
  /* 9993 */ 'x', 'v', 'c', 'v', 's', 'p', 'u', 'x', 'w', 's', 32, 0,
  /* 10005 */ 'v', 'c', 't', 's', 'x', 's', 32, 0,
  /* 10013 */ 'v', 'c', 't', 'u', 'x', 's', 32, 0,
  /* 10021 */ 'l', 'd', 'a', 't', 32, 0,
  /* 10027 */ 's', 't', 'd', 'a', 't', 32, 0,
  /* 10034 */ 'e', 'v', 'l', 'h', 'h', 'e', 's', 'p', 'l', 'a', 't', 32, 0,
  /* 10047 */ 'e', 'v', 'l', 'w', 'h', 's', 'p', 'l', 'a', 't', 32, 0,
  /* 10059 */ 'e', 'v', 'l', 'h', 'h', 'o', 's', 's', 'p', 'l', 'a', 't', 32, 0,
  /* 10073 */ 'e', 'v', 'l', 'h', 'h', 'o', 'u', 's', 'p', 'l', 'a', 't', 32, 0,
  /* 10087 */ 'e', 'v', 'l', 'w', 'w', 's', 'p', 'l', 'a', 't', 32, 0,
  /* 10099 */ 'l', 'w', 'a', 't', 32, 0,
  /* 10105 */ 's', 't', 'w', 'a', 't', 32, 0,
  /* 10112 */ 'd', 'c', 'b', 't', 32, 0,
  /* 10118 */ 'i', 'c', 'b', 't', 32, 0,
  /* 10124 */ 'd', 'c', 'b', 't', 'c', 't', 32, 0,
  /* 10132 */ 'd', 'c', 'b', 't', 's', 't', 'c', 't', 32, 0,
  /* 10142 */ 'e', 'f', 'd', 'c', 'm', 'p', 'g', 't', 32, 0,
  /* 10152 */ 'q', 'v', 'f', 'c', 'm', 'p', 'g', 't', 32, 0,
  /* 10162 */ 'e', 'f', 's', 'c', 'm', 'p', 'g', 't', 32, 0,
  /* 10172 */ 'e', 'v', 'f', 's', 'c', 'm', 'p', 'g', 't', 32, 0,
  /* 10183 */ 'e', 'f', 'd', 't', 's', 't', 'g', 't', 32, 0,
  /* 10193 */ 'e', 'f', 's', 't', 's', 't', 'g', 't', 32, 0,
  /* 10203 */ 'e', 'v', 'f', 's', 't', 's', 't', 'g', 't', 32, 0,
  /* 10214 */ 'w', 'a', 'i', 't', 32, 0,
  /* 10220 */ 'e', 'f', 'd', 'c', 'm', 'p', 'l', 't', 32, 0,
  /* 10230 */ 'q', 'v', 'f', 'c', 'm', 'p', 'l', 't', 32, 0,
  /* 10240 */ 'e', 'f', 's', 'c', 'm', 'p', 'l', 't', 32, 0,
  /* 10250 */ 'e', 'v', 'f', 's', 'c', 'm', 'p', 'l', 't', 32, 0,
  /* 10261 */ 'e', 'f', 'd', 't', 's', 't', 'l', 't', 32, 0,
  /* 10271 */ 'e', 'f', 's', 't', 's', 't', 'l', 't', 32, 0,
  /* 10281 */ 'e', 'v', 'f', 's', 't', 's', 't', 'l', 't', 32, 0,
  /* 10292 */ 'f', 's', 'q', 'r', 't', 32, 0,
  /* 10299 */ 'f', 't', 's', 'q', 'r', 't', 32, 0,
  /* 10307 */ 'p', 's', 'q', '_', 's', 't', 32, 0,
  /* 10315 */ 'p', 'a', 's', 't', 'e', '_', 'l', 'a', 's', 't', 32, 0,
  /* 10327 */ 'v', 'n', 'c', 'i', 'p', 'h', 'e', 'r', 'l', 'a', 's', 't', 32, 0,
  /* 10341 */ 'v', 'c', 'i', 'p', 'h', 'e', 'r', 'l', 'a', 's', 't', 32, 0,
  /* 10354 */ 'd', 'c', 'b', 's', 't', 32, 0,
  /* 10361 */ 'd', 's', 't', 32, 0,
  /* 10366 */ 'c', 'o', 'p', 'y', '_', 'f', 'i', 'r', 's', 't', 32, 0,
  /* 10378 */ 'd', 'c', 'b', 't', 's', 't', 32, 0,
  /* 10386 */ 'd', 's', 't', 's', 't', 32, 0,
  /* 10393 */ 'd', 'c', 'b', 't', 't', 32, 0,
  /* 10400 */ 'd', 's', 't', 't', 32, 0,
  /* 10406 */ 'd', 'c', 'b', 't', 's', 't', 't', 32, 0,
  /* 10415 */ 'd', 's', 't', 's', 't', 't', 32, 0,
  /* 10423 */ 'l', 'h', 'a', 'u', 32, 0,
  /* 10429 */ 's', 't', 'b', 'u', 32, 0,
  /* 10435 */ 'l', 'f', 'd', 'u', 32, 0,
  /* 10441 */ 's', 't', 'f', 'd', 'u', 32, 0,
  /* 10448 */ 'm', 'a', 'd', 'd', 'h', 'd', 'u', 32, 0,
  /* 10457 */ 'm', 'u', 'l', 'h', 'd', 'u', 32, 0,
  /* 10465 */ 'q', 'v', 'f', 'c', 'f', 'i', 'd', 'u', 32, 0,
  /* 10475 */ 'q', 'v', 'f', 'c', 't', 'i', 'd', 'u', 32, 0,
  /* 10485 */ 'l', 'd', 'u', 32, 0,
  /* 10490 */ 's', 't', 'd', 'u', 32, 0,
  /* 10496 */ 'd', 'i', 'v', 'd', 'u', 32, 0,
  /* 10503 */ 'd', 'i', 'v', 'd', 'e', 'u', 32, 0,
  /* 10511 */ 'd', 'i', 'v', 'w', 'e', 'u', 32, 0,
  /* 10519 */ 's', 't', 'h', 'u', 32, 0,
  /* 10525 */ 'e', 'v', 's', 'r', 'w', 'i', 'u', 32, 0,
  /* 10534 */ 'p', 's', 'q', '_', 'l', 'u', 32, 0,
  /* 10542 */ 'e', 'v', 'l', 'w', 'h', 'o', 'u', 32, 0,
  /* 10551 */ 'f', 'c', 'm', 'p', 'u', 32, 0,
  /* 10558 */ 'l', 'f', 's', 'u', 32, 0,
  /* 10564 */ 's', 't', 'f', 's', 'u', 32, 0,
  /* 10571 */ 'e', 'v', 'c', 'm', 'p', 'g', 't', 'u', 32, 0,
  /* 10581 */ 'e', 'v', 'c', 'm', 'p', 'l', 't', 'u', 32, 0,
  /* 10591 */ 'p', 's', 'q', '_', 's', 't', 'u', 32, 0,
  /* 10600 */ 'm', 'u', 'l', 'h', 'w', 'u', 32, 0,
  /* 10608 */ 'q', 'v', 'f', 'c', 't', 'i', 'w', 'u', 32, 0,
  /* 10618 */ 'e', 'v', 's', 'r', 'w', 'u', 32, 0,
  /* 10626 */ 's', 't', 'w', 'u', 32, 0,
  /* 10632 */ 'e', 'v', 'd', 'i', 'v', 'w', 'u', 32, 0,
  /* 10641 */ 'l', 'b', 'z', 'u', 32, 0,
  /* 10647 */ 'l', 'h', 'z', 'u', 32, 0,
  /* 10653 */ 'l', 'w', 'z', 'u', 32, 0,
  /* 10659 */ 's', 'l', 'b', 'm', 'f', 'e', 'v', 32, 0,
  /* 10668 */ 'p', 's', '_', 'd', 'i', 'v', 32, 0,
  /* 10676 */ 'e', 'f', 'd', 'd', 'i', 'v', 32, 0,
  /* 10684 */ 'f', 'd', 'i', 'v', 32, 0,
  /* 10690 */ 'e', 'f', 's', 'd', 'i', 'v', 32, 0,
  /* 10698 */ 'e', 'v', 'f', 's', 'd', 'i', 'v', 32, 0,
  /* 10707 */ 'f', 't', 'd', 'i', 'v', 32, 0,
  /* 10714 */ 'v', 's', 'l', 'v', 32, 0,
  /* 10720 */ 'x', 'x', 'l', 'e', 'q', 'v', 32, 0,
  /* 10728 */ 'c', 'r', 'e', 'q', 'v', 32, 0,
  /* 10735 */ 'e', 'v', 'e', 'q', 'v', 32, 0,
  /* 10742 */ 'v', 's', 'r', 'v', 32, 0,
  /* 10748 */ 'l', 'x', 'v', 32, 0,
  /* 10753 */ 's', 't', 'x', 'v', 32, 0,
  /* 10759 */ 'v', 'e', 'x', 't', 's', 'b', '2', 'w', 32, 0,
  /* 10769 */ 'v', 'e', 'x', 't', 's', 'h', '2', 'w', 32, 0,
  /* 10779 */ 'e', 'v', 'm', 'h', 'e', 's', 'm', 'f', 'a', 'a', 'w', 32, 0,
  /* 10792 */ 'e', 'v', 'm', 'h', 'o', 's', 'm', 'f', 'a', 'a', 'w', 32, 0,
  /* 10805 */ 'e', 'v', 'm', 'h', 'e', 's', 's', 'f', 'a', 'a', 'w', 32, 0,
  /* 10818 */ 'e', 'v', 'm', 'h', 'o', 's', 's', 'f', 'a', 'a', 'w', 32, 0,
  /* 10831 */ 'e', 'v', 'a', 'd', 'd', 's', 'm', 'i', 'a', 'a', 'w', 32, 0,
  /* 10844 */ 'e', 'v', 'm', 'h', 'e', 's', 'm', 'i', 'a', 'a', 'w', 32, 0,
  /* 10857 */ 'e', 'v', 's', 'u', 'b', 'f', 's', 'm', 'i', 'a', 'a', 'w', 32, 0,
  /* 10871 */ 'e', 'v', 'm', 'w', 'l', 's', 'm', 'i', 'a', 'a', 'w', 32, 0,
  /* 10884 */ 'e', 'v', 'm', 'h', 'o', 's', 'm', 'i', 'a', 'a', 'w', 32, 0,
  /* 10897 */ 'e', 'v', 'a', 'd', 'd', 'u', 'm', 'i', 'a', 'a', 'w', 32, 0,
  /* 10910 */ 'e', 'v', 'm', 'h', 'e', 'u', 'm', 'i', 'a', 'a', 'w', 32, 0,
  /* 10923 */ 'e', 'v', 's', 'u', 'b', 'f', 'u', 'm', 'i', 'a', 'a', 'w', 32, 0,
  /* 10937 */ 'e', 'v', 'm', 'w', 'l', 'u', 'm', 'i', 'a', 'a', 'w', 32, 0,
  /* 10950 */ 'e', 'v', 'm', 'h', 'o', 'u', 'm', 'i', 'a', 'a', 'w', 32, 0,
  /* 10963 */ 'e', 'v', 'a', 'd', 'd', 's', 's', 'i', 'a', 'a', 'w', 32, 0,
  /* 10976 */ 'e', 'v', 'm', 'h', 'e', 's', 's', 'i', 'a', 'a', 'w', 32, 0,
  /* 10989 */ 'e', 'v', 's', 'u', 'b', 'f', 's', 's', 'i', 'a', 'a', 'w', 32, 0,
  /* 11003 */ 'e', 'v', 'm', 'w', 'l', 's', 's', 'i', 'a', 'a', 'w', 32, 0,
  /* 11016 */ 'e', 'v', 'm', 'h', 'o', 's', 's', 'i', 'a', 'a', 'w', 32, 0,
  /* 11029 */ 'e', 'v', 'a', 'd', 'd', 'u', 's', 'i', 'a', 'a', 'w', 32, 0,
  /* 11042 */ 'e', 'v', 'm', 'h', 'e', 'u', 's', 'i', 'a', 'a', 'w', 32, 0,
  /* 11055 */ 'e', 'v', 's', 'u', 'b', 'f', 'u', 's', 'i', 'a', 'a', 'w', 32, 0,
  /* 11069 */ 'e', 'v', 'm', 'w', 'l', 'u', 's', 'i', 'a', 'a', 'w', 32, 0,
  /* 11082 */ 'e', 'v', 'm', 'h', 'o', 'u', 's', 'i', 'a', 'a', 'w', 32, 0,
  /* 11095 */ 'v', 's', 'h', 'a', 's', 'i', 'g', 'm', 'a', 'w', 32, 0,
  /* 11107 */ 'v', 's', 'r', 'a', 'w', 32, 0,
  /* 11114 */ 'v', 'p', 'r', 't', 'y', 'b', 'w', 32, 0,
  /* 11123 */ 'e', 'v', 'a', 'd', 'd', 'w', 32, 0,
  /* 11131 */ 'e', 'v', 'l', 'd', 'w', 32, 0,
  /* 11138 */ 'e', 'v', 'r', 'n', 'd', 'w', 32, 0,
  /* 11146 */ 'e', 'v', 's', 't', 'd', 'w', 32, 0,
  /* 11154 */ 'v', 'm', 'r', 'g', 'e', 'w', 32, 0,
  /* 11162 */ 'v', 'c', 'm', 'p', 'n', 'e', 'w', 32, 0,
  /* 11171 */ 'e', 'v', 's', 'u', 'b', 'f', 'w', 32, 0,
  /* 11180 */ 'e', 'v', 's', 'u', 'b', 'i', 'f', 'w', 32, 0,
  /* 11190 */ 'v', 'n', 'e', 'g', 'w', 32, 0,
  /* 11197 */ 'v', 'm', 'r', 'g', 'h', 'w', 32, 0,
  /* 11205 */ 'x', 'x', 'm', 'r', 'g', 'h', 'w', 32, 0,
  /* 11214 */ 'm', 'u', 'l', 'h', 'w', 32, 0,
  /* 11221 */ 'e', 'v', 'a', 'd', 'd', 'i', 'w', 32, 0,
  /* 11230 */ 'q', 'v', 'f', 'c', 't', 'i', 'w', 32, 0,
  /* 11239 */ 'v', 'm', 'r', 'g', 'l', 'w', 32, 0,
  /* 11247 */ 'x', 'x', 'm', 'r', 'g', 'l', 'w', 32, 0,
  /* 11256 */ 'm', 'u', 'l', 'l', 'w', 32, 0,
  /* 11263 */ 'c', 'm', 'p', 'l', 'w', 32, 0,
  /* 11270 */ 'e', 'v', 'r', 'l', 'w', 32, 0,
  /* 11277 */ 'e', 'v', 's', 'l', 'w', 32, 0,
  /* 11284 */ 'l', 'm', 'w', 32, 0,
  /* 11289 */ 's', 't', 'm', 'w', 32, 0,
  /* 11295 */ 'v', 'p', 'm', 's', 'u', 'm', 'w', 32, 0,
  /* 11304 */ 'e', 'v', 'm', 'h', 'e', 's', 'm', 'f', 'a', 'n', 'w', 32, 0,
  /* 11317 */ 'e', 'v', 'm', 'h', 'o', 's', 'm', 'f', 'a', 'n', 'w', 32, 0,
  /* 11330 */ 'e', 'v', 'm', 'h', 'e', 's', 's', 'f', 'a', 'n', 'w', 32, 0,
  /* 11343 */ 'e', 'v', 'm', 'h', 'o', 's', 's', 'f', 'a', 'n', 'w', 32, 0,
  /* 11356 */ 'e', 'v', 'm', 'h', 'e', 's', 'm', 'i', 'a', 'n', 'w', 32, 0,
  /* 11369 */ 'e', 'v', 'm', 'w', 'l', 's', 'm', 'i', 'a', 'n', 'w', 32, 0,
  /* 11382 */ 'e', 'v', 'm', 'h', 'o', 's', 'm', 'i', 'a', 'n', 'w', 32, 0,
  /* 11395 */ 'e', 'v', 'm', 'h', 'e', 'u', 'm', 'i', 'a', 'n', 'w', 32, 0,
  /* 11408 */ 'e', 'v', 'm', 'w', 'l', 'u', 'm', 'i', 'a', 'n', 'w', 32, 0,
  /* 11421 */ 'e', 'v', 'm', 'h', 'o', 'u', 'm', 'i', 'a', 'n', 'w', 32, 0,
  /* 11434 */ 'e', 'v', 'm', 'h', 'e', 's', 's', 'i', 'a', 'n', 'w', 32, 0,
  /* 11447 */ 'e', 'v', 'm', 'w', 'l', 's', 's', 'i', 'a', 'n', 'w', 32, 0,
  /* 11460 */ 'e', 'v', 'm', 'h', 'o', 's', 's', 'i', 'a', 'n', 'w', 32, 0,
  /* 11473 */ 'e', 'v', 'm', 'h', 'e', 'u', 's', 'i', 'a', 'n', 'w', 32, 0,
  /* 11486 */ 'e', 'v', 'm', 'w', 'l', 'u', 's', 'i', 'a', 'n', 'w', 32, 0,
  /* 11499 */ 'e', 'v', 'm', 'h', 'o', 'u', 's', 'i', 'a', 'n', 'w', 32, 0,
  /* 11512 */ 'v', 'm', 'r', 'g', 'o', 'w', 32, 0,
  /* 11520 */ 'c', 'm', 'p', 'w', 32, 0,
  /* 11526 */ 'x', 'x', 'b', 'r', 'w', 32, 0,
  /* 11533 */ 'v', 's', 'r', 'w', 32, 0,
  /* 11539 */ 'm', 'o', 'd', 's', 'w', 32, 0,
  /* 11546 */ 'v', 'm', 'u', 'l', 'e', 's', 'w', 32, 0,
  /* 11555 */ 'v', 'a', 'v', 'g', 's', 'w', 32, 0,
  /* 11563 */ 'v', 'u', 'p', 'k', 'h', 's', 'w', 32, 0,
  /* 11572 */ 'v', 's', 'p', 'l', 't', 'i', 's', 'w', 32, 0,
  /* 11582 */ 'v', 'u', 'p', 'k', 'l', 's', 'w', 32, 0,
  /* 11591 */ 'e', 'v', 'c', 'n', 't', 'l', 's', 'w', 32, 0,
  /* 11601 */ 'v', 'm', 'i', 'n', 's', 'w', 32, 0,
  /* 11609 */ 'v', 'm', 'u', 'l', 'o', 's', 'w', 32, 0,
  /* 11618 */ 'v', 'c', 'm', 'p', 'g', 't', 's', 'w', 32, 0,
  /* 11628 */ 'e', 'x', 't', 's', 'w', 32, 0,
  /* 11635 */ 'v', 'm', 'a', 'x', 's', 'w', 32, 0,
  /* 11643 */ 'v', 's', 'p', 'l', 't', 'w', 32, 0,
  /* 11651 */ 'x', 'x', 's', 'p', 'l', 't', 'w', 32, 0,
  /* 11660 */ 'v', 'p', 'o', 'p', 'c', 'n', 't', 'w', 32, 0,
  /* 11670 */ 'v', 'i', 'n', 's', 'e', 'r', 't', 'w', 32, 0,
  /* 11680 */ 'x', 'x', 'i', 'n', 's', 'e', 'r', 't', 'w', 32, 0,
  /* 11691 */ 's', 't', 'w', 32, 0,
  /* 11696 */ 'v', 's', 'u', 'b', 'c', 'u', 'w', 32, 0,
  /* 11705 */ 'v', 'a', 'd', 'd', 'c', 'u', 'w', 32, 0,
  /* 11714 */ 'm', 'o', 'd', 'u', 'w', 32, 0,
  /* 11721 */ 'v', 'a', 'b', 's', 'd', 'u', 'w', 32, 0,
  /* 11730 */ 'v', 'm', 'u', 'l', 'e', 'u', 'w', 32, 0,
  /* 11739 */ 'v', 'a', 'v', 'g', 'u', 'w', 32, 0,
  /* 11747 */ 'v', 'm', 'i', 'n', 'u', 'w', 32, 0,
  /* 11755 */ 'v', 'm', 'u', 'l', 'o', 'u', 'w', 32, 0,
  /* 11764 */ 'v', 'c', 'm', 'p', 'e', 'q', 'u', 'w', 32, 0,
  /* 11774 */ 'v', 'e', 'x', 't', 'r', 'a', 'c', 't', 'u', 'w', 32, 0,
  /* 11786 */ 'x', 'x', 'e', 'x', 't', 'r', 'a', 'c', 't', 'u', 'w', 32, 0,
  /* 11799 */ 'v', 'c', 'm', 'p', 'g', 't', 'u', 'w', 32, 0,
  /* 11809 */ 'v', 'm', 'a', 'x', 'u', 'w', 32, 0,
  /* 11817 */ 'd', 'i', 'v', 'w', 32, 0,
  /* 11823 */ 'v', 'c', 'm', 'p', 'n', 'e', 'z', 'w', 32, 0,
  /* 11833 */ 'v', 'c', 'l', 'z', 'w', 32, 0,
  /* 11840 */ 'e', 'v', 'c', 'n', 't', 'l', 'z', 'w', 32, 0,
  /* 11850 */ 'v', 'c', 't', 'z', 'w', 32, 0,
  /* 11857 */ 'c', 'n', 't', 't', 'z', 'w', 32, 0,
  /* 11865 */ 'l', 'x', 'v', 'd', '2', 'x', 32, 0,
  /* 11873 */ 's', 't', 'x', 'v', 'd', '2', 'x', 32, 0,
  /* 11882 */ 'l', 'x', 'v', 'w', '4', 'x', 32, 0,
  /* 11890 */ 's', 't', 'x', 'v', 'w', '4', 'x', 32, 0,
  /* 11899 */ 'l', 'x', 'v', 'b', '1', '6', 'x', 32, 0,
  /* 11908 */ 's', 't', 'x', 'v', 'b', '1', '6', 'x', 32, 0,
  /* 11918 */ 'l', 'x', 'v', 'h', '8', 'x', 32, 0,
  /* 11926 */ 's', 't', 'x', 'v', 'h', '8', 'x', 32, 0,
  /* 11935 */ 'l', 'h', 'a', 'x', 32, 0,
  /* 11941 */ 't', 'l', 'b', 'i', 'v', 'a', 'x', 32, 0,
  /* 11950 */ 'q', 'v', 'l', 'f', 'i', 'w', 'a', 'x', 32, 0,
  /* 11960 */ 'l', 'x', 's', 'i', 'w', 'a', 'x', 32, 0,
  /* 11969 */ 'l', 'w', 'a', 'x', 32, 0,
  /* 11975 */ 'l', 'v', 'e', 'b', 'x', 32, 0,
  /* 11982 */ 's', 't', 'v', 'e', 'b', 'x', 32, 0,
  /* 11990 */ 's', 't', 'x', 's', 'i', 'b', 'x', 32, 0,
  /* 11999 */ 's', 't', 'b', 'x', 32, 0,
  /* 12005 */ 'q', 'v', 'l', 'f', 'c', 'd', 'x', 32, 0,
  /* 12014 */ 'q', 'v', 's', 't', 'f', 'c', 'd', 'x', 32, 0,
  /* 12024 */ 'e', 'v', 'l', 'd', 'd', 'x', 32, 0,
  /* 12032 */ 'e', 'v', 's', 't', 'd', 'd', 'x', 32, 0,
  /* 12041 */ 'q', 'v', 'l', 'f', 'd', 'x', 32, 0,
  /* 12049 */ 'q', 'v', 's', 't', 'f', 'd', 'x', 32, 0,
  /* 12058 */ 'q', 'v', 'l', 'p', 'c', 'l', 'd', 'x', 32, 0,
  /* 12068 */ 'q', 'v', 'l', 'p', 'c', 'r', 'd', 'x', 32, 0,
  /* 12078 */ 'l', 'x', 's', 'd', 'x', 32, 0,
  /* 12085 */ 's', 't', 'x', 's', 'd', 'x', 32, 0,
  /* 12093 */ 's', 't', 'd', 'x', 32, 0,
  /* 12099 */ 'e', 'v', 'l', 'w', 'h', 'e', 'x', 32, 0,
  /* 12108 */ 'e', 'v', 's', 't', 'w', 'h', 'e', 'x', 32, 0,
  /* 12118 */ 'e', 'v', 's', 't', 'w', 'w', 'e', 'x', 32, 0,
  /* 12128 */ 'e', 'v', 'l', 'd', 'h', 'x', 32, 0,
  /* 12136 */ 'e', 'v', 's', 't', 'd', 'h', 'x', 32, 0,
  /* 12145 */ 'l', 'v', 'e', 'h', 'x', 32, 0,
  /* 12152 */ 's', 't', 'v', 'e', 'h', 'x', 32, 0,
  /* 12160 */ 's', 't', 'x', 's', 'i', 'h', 'x', 32, 0,
  /* 12169 */ 's', 't', 'h', 'x', 32, 0,
  /* 12175 */ 's', 't', 'b', 'c', 'i', 'x', 32, 0,
  /* 12183 */ 'l', 'd', 'c', 'i', 'x', 32, 0,
  /* 12190 */ 's', 't', 'd', 'c', 'i', 'x', 32, 0,
  /* 12198 */ 's', 't', 'h', 'c', 'i', 'x', 32, 0,
  /* 12206 */ 's', 't', 'w', 'c', 'i', 'x', 32, 0,
  /* 12214 */ 'l', 'b', 'z', 'c', 'i', 'x', 32, 0,
  /* 12222 */ 'l', 'h', 'z', 'c', 'i', 'x', 32, 0,
  /* 12230 */ 'l', 'w', 'z', 'c', 'i', 'x', 32, 0,
  /* 12238 */ 'x', 's', 'r', 'q', 'p', 'i', 'x', 32, 0,
  /* 12247 */ 'p', 's', 'q', '_', 'l', 'x', 32, 0,
  /* 12255 */ 'v', 'e', 'x', 't', 'u', 'b', 'l', 'x', 32, 0,
  /* 12265 */ 'v', 'e', 'x', 't', 'u', 'h', 'l', 'x', 32, 0,
  /* 12275 */ 'v', 'e', 'x', 't', 'u', 'w', 'l', 'x', 32, 0,
  /* 12285 */ 'l', 'd', 'm', 'x', 32, 0,
  /* 12291 */ 'v', 's', 'b', 'o', 'x', 32, 0,
  /* 12298 */ 'e', 'v', 's', 't', 'w', 'h', 'o', 'x', 32, 0,
  /* 12308 */ 'e', 'v', 's', 't', 'w', 'w', 'o', 'x', 32, 0,
  /* 12318 */ 'l', 'b', 'e', 'p', 'x', 32, 0,
  /* 12325 */ 's', 't', 'b', 'e', 'p', 'x', 32, 0,
  /* 12333 */ 'l', 'f', 'd', 'e', 'p', 'x', 32, 0,
  /* 12341 */ 's', 't', 'f', 'd', 'e', 'p', 'x', 32, 0,
  /* 12350 */ 'l', 'h', 'e', 'p', 'x', 32, 0,
  /* 12357 */ 's', 't', 'h', 'e', 'p', 'x', 32, 0,
  /* 12365 */ 'l', 'w', 'e', 'p', 'x', 32, 0,
  /* 12372 */ 's', 't', 'w', 'e', 'p', 'x', 32, 0,
  /* 12380 */ 'v', 'u', 'p', 'k', 'h', 'p', 'x', 32, 0,
  /* 12389 */ 'v', 'p', 'k', 'p', 'x', 32, 0,
  /* 12396 */ 'v', 'u', 'p', 'k', 'l', 'p', 'x', 32, 0,
  /* 12405 */ 'l', 'x', 's', 's', 'p', 'x', 32, 0,
  /* 12413 */ 's', 't', 'x', 's', 's', 'p', 'x', 32, 0,
  /* 12422 */ 'l', 'b', 'a', 'r', 'x', 32, 0,
  /* 12429 */ 'l', 'd', 'a', 'r', 'x', 32, 0,
  /* 12436 */ 'l', 'h', 'a', 'r', 'x', 32, 0,
  /* 12443 */ 'l', 'w', 'a', 'r', 'x', 32, 0,
  /* 12450 */ 'l', 'd', 'b', 'r', 'x', 32, 0,
  /* 12457 */ 's', 't', 'd', 'b', 'r', 'x', 32, 0,
  /* 12465 */ 'l', 'h', 'b', 'r', 'x', 32, 0,
  /* 12472 */ 's', 't', 'h', 'b', 'r', 'x', 32, 0,
  /* 12480 */ 'v', 'e', 'x', 't', 'u', 'b', 'r', 'x', 32, 0,
  /* 12490 */ 'l', 'w', 'b', 'r', 'x', 32, 0,
  /* 12497 */ 's', 't', 'w', 'b', 'r', 'x', 32, 0,
  /* 12505 */ 'v', 'e', 'x', 't', 'u', 'h', 'r', 'x', 32, 0,
  /* 12515 */ 'v', 'e', 'x', 't', 'u', 'w', 'r', 'x', 32, 0,
  /* 12525 */ 'm', 'c', 'r', 'x', 'r', 'x', 32, 0,
  /* 12533 */ 't', 'l', 'b', 's', 'x', 32, 0,
  /* 12540 */ 'q', 'v', 'l', 'f', 'c', 's', 'x', 32, 0,
  /* 12549 */ 'q', 'v', 's', 't', 'f', 'c', 's', 'x', 32, 0,
  /* 12559 */ 'l', 'x', 'v', 'd', 's', 'x', 32, 0,
  /* 12567 */ 'v', 'c', 'f', 's', 'x', 32, 0,
  /* 12574 */ 'q', 'v', 'l', 'f', 's', 'x', 32, 0,
  /* 12582 */ 'q', 'v', 's', 't', 'f', 's', 'x', 32, 0,
  /* 12591 */ 'q', 'v', 'l', 'p', 'c', 'l', 's', 'x', 32, 0,
  /* 12601 */ 'e', 'v', 'l', 'w', 'h', 'o', 's', 'x', 32, 0,
  /* 12611 */ 'q', 'v', 'l', 'p', 'c', 'r', 's', 'x', 32, 0,
  /* 12621 */ 'l', 'x', 'v', 'w', 's', 'x', 32, 0,
  /* 12629 */ 'e', 'v', 'l', 'h', 'h', 'e', 's', 'p', 'l', 'a', 't', 'x', 32, 0,
  /* 12643 */ 'e', 'v', 'l', 'w', 'h', 's', 'p', 'l', 'a', 't', 'x', 32, 0,
  /* 12656 */ 'e', 'v', 'l', 'h', 'h', 'o', 's', 's', 'p', 'l', 'a', 't', 'x', 32, 0,
  /* 12671 */ 'e', 'v', 'l', 'h', 'h', 'o', 'u', 's', 'p', 'l', 'a', 't', 'x', 32, 0,
  /* 12686 */ 'e', 'v', 'l', 'w', 'w', 's', 'p', 'l', 'a', 't', 'x', 32, 0,
  /* 12699 */ 'p', 's', 'q', '_', 's', 't', 'x', 32, 0,
  /* 12708 */ 'l', 'h', 'a', 'u', 'x', 32, 0,
  /* 12715 */ 'l', 'w', 'a', 'u', 'x', 32, 0,
  /* 12722 */ 's', 't', 'b', 'u', 'x', 32, 0,
  /* 12729 */ 'q', 'v', 'l', 'f', 'c', 'd', 'u', 'x', 32, 0,
  /* 12739 */ 'q', 'v', 's', 't', 'f', 'c', 'd', 'u', 'x', 32, 0,
  /* 12750 */ 'q', 'v', 'l', 'f', 'd', 'u', 'x', 32, 0,
  /* 12759 */ 'q', 'v', 's', 't', 'f', 'd', 'u', 'x', 32, 0,
  /* 12769 */ 'l', 'd', 'u', 'x', 32, 0,
  /* 12775 */ 's', 't', 'd', 'u', 'x', 32, 0,
  /* 12782 */ 'v', 'c', 'f', 'u', 'x', 32, 0,
  /* 12789 */ 's', 't', 'h', 'u', 'x', 32, 0,
  /* 12796 */ 'p', 's', 'q', '_', 'l', 'u', 'x', 32, 0,
  /* 12805 */ 'e', 'v', 'l', 'w', 'h', 'o', 'u', 'x', 32, 0,
  /* 12815 */ 'q', 'v', 'l', 'f', 'c', 's', 'u', 'x', 32, 0,
  /* 12825 */ 'q', 'v', 's', 't', 'f', 'c', 's', 'u', 'x', 32, 0,
  /* 12836 */ 'q', 'v', 'l', 'f', 's', 'u', 'x', 32, 0,
  /* 12845 */ 'q', 'v', 's', 't', 'f', 's', 'u', 'x', 32, 0,
  /* 12855 */ 'p', 's', 'q', '_', 's', 't', 'u', 'x', 32, 0,
  /* 12865 */ 's', 't', 'w', 'u', 'x', 32, 0,
  /* 12872 */ 'l', 'b', 'z', 'u', 'x', 32, 0,
  /* 12879 */ 'l', 'h', 'z', 'u', 'x', 32, 0,
  /* 12886 */ 'l', 'w', 'z', 'u', 'x', 32, 0,
  /* 12893 */ 'l', 'v', 'x', 32, 0,
  /* 12898 */ 's', 't', 'v', 'x', 32, 0,
  /* 12904 */ 'l', 'x', 'v', 'x', 32, 0,
  /* 12910 */ 's', 't', 'x', 'v', 'x', 32, 0,
  /* 12917 */ 'e', 'v', 'l', 'd', 'w', 'x', 32, 0,
  /* 12925 */ 'e', 'v', 's', 't', 'd', 'w', 'x', 32, 0,
  /* 12934 */ 'l', 'v', 'e', 'w', 'x', 32, 0,
  /* 12941 */ 's', 't', 'v', 'e', 'w', 'x', 32, 0,
  /* 12949 */ 'q', 'v', 's', 't', 'f', 'i', 'w', 'x', 32, 0,
  /* 12959 */ 's', 't', 'x', 's', 'i', 'w', 'x', 32, 0,
  /* 12968 */ 's', 't', 'w', 'x', 32, 0,
  /* 12974 */ 'l', 'x', 's', 'i', 'b', 'z', 'x', 32, 0,
  /* 12983 */ 'l', 'b', 'z', 'x', 32, 0,
  /* 12989 */ 'l', 'x', 's', 'i', 'h', 'z', 'x', 32, 0,
  /* 12998 */ 'l', 'h', 'z', 'x', 32, 0,
  /* 13004 */ 'q', 'v', 'l', 'f', 'i', 'w', 'z', 'x', 32, 0,
  /* 13014 */ 'l', 'x', 's', 'i', 'w', 'z', 'x', 32, 0,
  /* 13023 */ 'l', 'w', 'z', 'x', 32, 0,
  /* 13029 */ 'c', 'o', 'p', 'y', 32, 0,
  /* 13035 */ 'd', 'c', 'b', 'z', 32, 0,
  /* 13041 */ 'l', 'b', 'z', 32, 0,
  /* 13046 */ 'b', 'd', 'z', 32, 0,
  /* 13051 */ 'e', 'f', 'd', 'c', 't', 's', 'i', 'd', 'z', 32, 0,
  /* 13062 */ 'q', 'v', 'f', 'c', 't', 'i', 'd', 'z', 32, 0,
  /* 13072 */ 'e', 'f', 'd', 'c', 't', 'u', 'i', 'd', 'z', 32, 0,
  /* 13083 */ 'x', 's', 'c', 'v', 'q', 'p', 's', 'd', 'z', 32, 0,
  /* 13094 */ 'x', 's', 'c', 'v', 'q', 'p', 'u', 'd', 'z', 32, 0,
  /* 13105 */ 'l', 'h', 'z', 32, 0,
  /* 13110 */ 'v', 'r', 'f', 'i', 'z', 32, 0,
  /* 13117 */ 'x', 's', 'r', 'd', 'p', 'i', 'z', 32, 0,
  /* 13126 */ 'x', 'v', 'r', 'd', 'p', 'i', 'z', 32, 0,
  /* 13135 */ 'x', 'v', 'r', 's', 'p', 'i', 'z', 32, 0,
  /* 13144 */ 'q', 'v', 'f', 'r', 'i', 'z', 32, 0,
  /* 13152 */ 'e', 'f', 'd', 'c', 't', 's', 'i', 'z', 32, 0,
  /* 13162 */ 'e', 'f', 's', 'c', 't', 's', 'i', 'z', 32, 0,
  /* 13172 */ 'e', 'v', 'f', 's', 'c', 't', 's', 'i', 'z', 32, 0,
  /* 13183 */ 'e', 'f', 'd', 'c', 't', 'u', 'i', 'z', 32, 0,
  /* 13193 */ 'e', 'f', 's', 'c', 't', 'u', 'i', 'z', 32, 0,
  /* 13203 */ 'b', 'd', 'n', 'z', 32, 0,
  /* 13209 */ 'q', 'v', 'f', 'c', 't', 'i', 'd', 'u', 'z', 32, 0,
  /* 13220 */ 'q', 'v', 'f', 'c', 't', 'i', 'w', 'u', 'z', 32, 0,
  /* 13231 */ 'q', 'v', 'f', 'c', 't', 'i', 'w', 'z', 32, 0,
  /* 13241 */ 'l', 'w', 'z', 32, 0,
  /* 13246 */ 'm', 'f', 'v', 's', 'r', 'w', 'z', 32, 0,
  /* 13255 */ 'm', 't', 'v', 's', 'r', 'w', 'z', 32, 0,
  /* 13264 */ 'x', 's', 'c', 'v', 'q', 'p', 's', 'w', 'z', 32, 0,
  /* 13275 */ 'x', 's', 'c', 'v', 'q', 'p', 'u', 'w', 'z', 32, 0,
  /* 13286 */ 'b', 'd', 'z', 'l', 'r', 'l', '+', 0,
  /* 13294 */ 'b', 'd', 'n', 'z', 'l', 'r', 'l', '+', 0,
  /* 13303 */ 'b', 'd', 'z', 'l', 'r', '+', 0,
  /* 13310 */ 'b', 'd', 'n', 'z', 'l', 'r', '+', 0,
  /* 13318 */ 'e', 'v', 's', 'e', 'l', 32, 'c', 'r', 'D', ',', 0,
  /* 13329 */ 'b', 'd', 'z', 'l', 'r', 'l', '-', 0,
  /* 13337 */ 'b', 'd', 'n', 'z', 'l', 'r', 'l', '-', 0,
  /* 13346 */ 'b', 'd', 'z', 'l', 'r', '-', 0,
  /* 13353 */ 'b', 'd', 'n', 'z', 'l', 'r', '-', 0,
  /* 13361 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'F', 'u', 'n', 'c', 't', 'i', 'o', 'n', 32, 'P', 'a', 't', 'c', 'h', 'a', 'b', 'l', 'e', 32, 'R', 'E', 'T', '.', 0,
  /* 13392 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'T', 'y', 'p', 'e', 'd', 32, 'E', 'v', 'e', 'n', 't', 32, 'L', 'o', 'g', '.', 0,
  /* 13416 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'C', 'u', 's', 't', 'o', 'm', 32, 'E', 'v', 'e', 'n', 't', 32, 'L', 'o', 'g', '.', 0,
  /* 13441 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'F', 'u', 'n', 'c', 't', 'i', 'o', 'n', 32, 'E', 'n', 't', 'e', 'r', '.', 0,
  /* 13464 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'T', 'a', 'i', 'l', 32, 'C', 'a', 'l', 'l', 32, 'E', 'x', 'i', 't', '.', 0,
  /* 13487 */ '#', 32, 'X', 'R', 'a', 'y', 32, 'F', 'u', 'n', 'c', 't', 'i', 'o', 'n', 32, 'E', 'x', 'i', 't', '.', 0,
  /* 13509 */ 't', 'r', 'e', 'c', 'h', 'k', 'p', 't', '.', 0,
  /* 13519 */ 'o', 'r', 'i', 32, '1', ',', 32, '1', ',', 32, '0', 0,
  /* 13531 */ 'o', 'r', 'i', 32, '2', ',', 32, '2', ',', 32, '0', 0,
  /* 13543 */ '#', 'A', 'D', 'D', 'I', 'S', 'd', 't', 'p', 'r', 'e', 'l', 'H', 'A', '3', '2', 0,
  /* 13560 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'S', 'U', 'B', '_', 'I', '3', '2', 0,
  /* 13581 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'D', 'D', '_', 'I', '3', '2', 0,
  /* 13602 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'N', 'A', 'N', 'D', '_', 'I', '3', '2', 0,
  /* 13624 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'N', 'D', '_', 'I', '3', '2', 0,
  /* 13645 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'U', 'M', 'I', 'N', '_', 'I', '3', '2', 0,
  /* 13667 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'M', 'I', 'N', '_', 'I', '3', '2', 0,
  /* 13688 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'S', 'W', 'A', 'P', '_', 'I', '3', '2', 0,
  /* 13705 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'X', 'O', 'R', '_', 'I', '3', '2', 0,
  /* 13726 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'O', 'R', '_', 'I', '3', '2', 0,
  /* 13746 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'U', 'M', 'A', 'X', '_', 'I', '3', '2', 0,
  /* 13768 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'M', 'A', 'X', '_', 'I', '3', '2', 0,
  /* 13789 */ '#', 'A', 'D', 'D', 'I', 't', 'l', 's', 'g', 'd', 'L', '3', '2', 0,
  /* 13803 */ '#', 'A', 'D', 'D', 'I', 't', 'l', 's', 'l', 'd', 'L', '3', '2', 0,
  /* 13817 */ '#', 'L', 'D', 'g', 'o', 't', 'T', 'p', 'r', 'e', 'l', 'L', '3', '2', 0,
  /* 13832 */ '#', 'A', 'D', 'D', 'I', 'd', 't', 'p', 'r', 'e', 'l', 'L', '3', '2', 0,
  /* 13847 */ '#', 'E', 'H', '_', 'S', 'J', 'L', 'J', '_', 'L', 'O', 'N', 'G', 'J', 'M', 'P', '3', '2', 0,
  /* 13866 */ '#', 'E', 'H', '_', 'S', 'J', 'L', 'J', '_', 'S', 'E', 'T', 'J', 'M', 'P', '3', '2', 0,
  /* 13884 */ '#', 'A', 'D', 'D', 'I', 't', 'l', 's', 'g', 'd', 'L', 'A', 'D', 'D', 'R', '3', '2', 0,
  /* 13902 */ '#', 'A', 'D', 'D', 'I', 't', 'l', 's', 'l', 'd', 'L', 'A', 'D', 'D', 'R', '3', '2', 0,
  /* 13920 */ 'G', 'E', 'T', 't', 'l', 's', 'l', 'd', 'A', 'D', 'D', 'R', '3', '2', 0,
  /* 13935 */ 'G', 'E', 'T', 't', 'l', 's', 'A', 'D', 'D', 'R', '3', '2', 0,
  /* 13948 */ '#', 'D', 'F', 'L', 'O', 'A', 'D', 'f', '3', '2', 0,
  /* 13959 */ '#', 'X', 'F', 'L', 'O', 'A', 'D', 'f', '3', '2', 0,
  /* 13970 */ '#', 'D', 'F', 'S', 'T', 'O', 'R', 'E', 'f', '3', '2', 0,
  /* 13982 */ '#', 'X', 'F', 'S', 'T', 'O', 'R', 'E', 'f', '3', '2', 0,
  /* 13994 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'S', 'U', 'B', '_', 'I', '6', '4', 0,
  /* 14015 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'D', 'D', '_', 'I', '6', '4', 0,
  /* 14036 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'N', 'A', 'N', 'D', '_', 'I', '6', '4', 0,
  /* 14058 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'U', 'M', 'I', 'N', '_', 'I', '6', '4', 0,
  /* 14080 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'M', 'I', 'N', '_', 'I', '6', '4', 0,
  /* 14101 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'S', 'W', 'A', 'P', '_', 'I', '6', '4', 0,
  /* 14118 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'C', 'M', 'P', '_', 'S', 'W', 'A', 'P', '_', 'I', '6', '4', 0,
  /* 14139 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'X', 'O', 'R', '_', 'I', '6', '4', 0,
  /* 14160 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'O', 'R', '_', 'I', '6', '4', 0,
  /* 14180 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'U', 'M', 'A', 'X', '_', 'I', '6', '4', 0,
  /* 14202 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'M', 'A', 'X', '_', 'I', '6', '4', 0,
  /* 14223 */ '#', 'E', 'H', '_', 'S', 'J', 'L', 'J', '_', 'L', 'O', 'N', 'G', 'J', 'M', 'P', '6', '4', 0,
  /* 14242 */ '#', 'E', 'H', '_', 'S', 'J', 'L', 'J', '_', 'S', 'E', 'T', 'J', 'M', 'P', '6', '4', 0,
  /* 14260 */ '#', 'D', 'F', 'L', 'O', 'A', 'D', 'f', '6', '4', 0,
  /* 14271 */ '#', 'X', 'F', 'L', 'O', 'A', 'D', 'f', '6', '4', 0,
  /* 14282 */ '#', 'D', 'F', 'S', 'T', 'O', 'R', 'E', 'f', '6', '4', 0,
  /* 14294 */ '#', 'X', 'F', 'S', 'T', 'O', 'R', 'E', 'f', '6', '4', 0,
  /* 14306 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'N', 'D', '_', 'i', '6', '4', 0,
  /* 14327 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'S', 'P', 'E', '4', 0,
  /* 14343 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'S', 'P', 'E', '4', 0,
  /* 14356 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'F', '4', 0,
  /* 14370 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'F', '4', 0,
  /* 14381 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'I', '4', 0,
  /* 14395 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'I', '4', 0,
  /* 14406 */ 'c', 'r', 'x', 'o', 'r', 32, '6', ',', 32, '6', ',', 32, '6', 0,
  /* 14420 */ 'c', 'r', 'e', 'q', 'v', 32, '6', ',', 32, '6', ',', 32, '6', 0,
  /* 14434 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'F', '1', '6', 0,
  /* 14449 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'F', '1', '6', 0,
  /* 14461 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'S', 'U', 'B', '_', 'I', '1', '6', 0,
  /* 14482 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'D', 'D', '_', 'I', '1', '6', 0,
  /* 14503 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'N', 'A', 'N', 'D', '_', 'I', '1', '6', 0,
  /* 14525 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'N', 'D', '_', 'I', '1', '6', 0,
  /* 14546 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'U', 'M', 'I', 'N', '_', 'I', '1', '6', 0,
  /* 14568 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'M', 'I', 'N', '_', 'I', '1', '6', 0,
  /* 14589 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'S', 'W', 'A', 'P', '_', 'I', '1', '6', 0,
  /* 14606 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'X', 'O', 'R', '_', 'I', '1', '6', 0,
  /* 14627 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'O', 'R', '_', 'I', '1', '6', 0,
  /* 14647 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'U', 'M', 'A', 'X', '_', 'I', '1', '6', 0,
  /* 14669 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'M', 'A', 'X', '_', 'I', '1', '6', 0,
  /* 14690 */ '#', 'D', 'Y', 'N', 'A', 'L', 'L', 'O', 'C', '8', 0,
  /* 14701 */ '#', 'C', 'F', 'E', 'N', 'C', 'E', '8', 0,
  /* 14710 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'F', '8', 0,
  /* 14724 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'F', '8', 0,
  /* 14735 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'S', 'U', 'B', '_', 'I', '8', 0,
  /* 14755 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'I', '8', 0,
  /* 14769 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'D', 'D', '_', 'I', '8', 0,
  /* 14789 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'N', 'A', 'N', 'D', '_', 'I', '8', 0,
  /* 14810 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'A', 'N', 'D', '_', 'I', '8', 0,
  /* 14830 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'U', 'M', 'I', 'N', '_', 'I', '8', 0,
  /* 14851 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'M', 'I', 'N', '_', 'I', '8', 0,
  /* 14871 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'C', 'M', 'P', '_', 'S', 'W', 'A', 'P', '_', 'I', '8', 0,
  /* 14891 */ 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'X', 'O', 'R', '_', 'I', '8', 0,
  /* 14910 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'O', 'R', '_', 'I', '8', 0,
  /* 14929 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'I', '8', 0,
  /* 14940 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'U', 'M', 'A', 'X', '_', 'I', '8', 0,
  /* 14961 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'L', 'O', 'A', 'D', '_', 'M', 'A', 'X', '_', 'I', '8', 0,
  /* 14981 */ '#', 'M', 'o', 'v', 'e', 'P', 'C', 't', 'o', 'L', 'R', '8', 0,
  /* 14994 */ '#', 'D', 'Y', 'N', 'A', 'R', 'E', 'A', 'O', 'F', 'F', 'S', 'E', 'T', '8', 0,
  /* 15010 */ '#', 'A', 'N', 'D', 'I', 'o', '_', '1', '_', 'E', 'Q', '_', 'B', 'I', 'T', '8', 0,
  /* 15027 */ '#', 'A', 'N', 'D', 'I', 'o', '_', '1', '_', 'G', 'T', '_', 'B', 'I', 'T', '8', 0,
  /* 15044 */ '#', 'A', 'T', 'O', 'M', 'I', 'C', '_', 'S', 'W', 'A', 'P', '_', 'i', '8', 0,
  /* 15060 */ '#', 'A', 'D', 'D', 'I', 'S', 't', 'o', 'c', 'H', 'A', 0,
  /* 15072 */ '#', 'A', 'D', 'D', 'I', 'S', 't', 'l', 's', 'g', 'd', 'H', 'A', 0,
  /* 15086 */ '#', 'A', 'D', 'D', 'I', 'S', 't', 'l', 's', 'l', 'd', 'H', 'A', 0,
  /* 15100 */ '#', 'A', 'D', 'D', 'I', 'S', 'g', 'o', 't', 'T', 'p', 'r', 'e', 'l', 'H', 'A', 0,
  /* 15117 */ '#', 'A', 'D', 'D', 'I', 'S', 'd', 't', 'p', 'r', 'e', 'l', 'H', 'A', 0,
  /* 15132 */ '#', 'R', 'e', 'a', 'd', 'T', 'B', 0,
  /* 15140 */ '#', 'D', 'Y', 'N', 'A', 'L', 'L', 'O', 'C', 0,
  /* 15150 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'Q', 'B', 'R', 'C', 0,
  /* 15166 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'Q', 'B', 'R', 'C', 0,
  /* 15179 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'Q', 'F', 'R', 'C', 0,
  /* 15195 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'Q', 'F', 'R', 'C', 0,
  /* 15208 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'V', 'S', 'F', 'R', 'C', 0,
  /* 15225 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'V', 'S', 'F', 'R', 'C', 0,
  /* 15239 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'V', 'R', 'R', 'C', 0,
  /* 15255 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'V', 'R', 'R', 'C', 0,
  /* 15268 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'Q', 'S', 'R', 'C', 0,
  /* 15284 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'Q', 'S', 'R', 'C', 0,
  /* 15297 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'V', 'S', 'S', 'R', 'C', 0,
  /* 15314 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'V', 'S', 'S', 'R', 'C', 0,
  /* 15328 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'V', 'S', 'R', 'C', 0,
  /* 15344 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'V', 'S', 'R', 'C', 0,
  /* 15357 */ '#', 'S', 'P', 'I', 'L', 'L', 'T', 'O', 'V', 'S', 'R', '_', 'L', 'D', 0,
  /* 15372 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'E', 'N', 'D', 0,
  /* 15385 */ 'B', 'U', 'N', 'D', 'L', 'E', 0,
  /* 15392 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'C', 'C', '_', 'S', 'P', 'E', 0,
  /* 15407 */ '#', 'S', 'E', 'L', 'E', 'C', 'T', '_', 'S', 'P', 'E', 0,
  /* 15419 */ 'D', 'B', 'G', '_', 'V', 'A', 'L', 'U', 'E', 0,
  /* 15429 */ '#', 'R', 'E', 'S', 'T', 'O', 'R', 'E', '_', 'V', 'R', 'S', 'A', 'V', 'E', 0,
  /* 15445 */ '#', 'S', 'P', 'I', 'L', 'L', '_', 'V', 'R', 'S', 'A', 'V', 'E', 0,
  /* 15459 */ '#', 'L', 'D', 't', 'o', 'c', 'J', 'T', 'I', 0,
  /* 15469 */ 'D', 'B', 'G', '_', 'L', 'A', 'B', 'E', 'L', 0,
  /* 15479 */ '#', 'L', 'D', 't', 'o', 'c', 'L', 0,
  /* 15487 */ '#', 'A', 'D', 'D', 'I', 't', 'o', 'c', 'L', 0,
  /* 15497 */ '#', 'A', 'D', 'D', 'I', 't', 'l', 's', 'g', 'd', 'L', 0,
  /* 15509 */ '#', 'A', 'D', 'D', 'I', 't', 'l', 's', 'l', 'd', 'L', 0,
  /* 15521 */ '#', 'L', 'D', 'g', 'o', 't', 'T', 'p', 'r', 'e', 'l', 'L', 0,
  /* 15534 */ '#', 'A', 'D', 'D', 'I', 'd', 't', 'p', 'r', 'e', 'l', 'L', 0,
  /* 15547 */ '#', 'U', 'p', 'd', 'a', 't', 'e', 'G', 'B', 'R', 0,
  /* 15558 */ '#', 'R', 'E', 'S', 'T', 'O', 'R', 'E', '_', 'C', 'R', 0,
  /* 15570 */ '#', 'S', 'P', 'I', 'L', 'L', '_', 'C', 'R', 0,
  /* 15580 */ '#', 'A', 'D', 'D', 'I', 't', 'l', 's', 'g', 'd', 'L', 'A', 'D', 'D', 'R', 0,
  /* 15596 */ '#', 'A', 'D', 'D', 'I', 't', 'l', 's', 'l', 'd', 'L', 'A', 'D', 'D', 'R', 0,
  /* 15612 */ '#', 'G', 'E', 'T', 't', 'l', 's', 'l', 'd', 'A', 'D', 'D', 'R', 0,
  /* 15626 */ '#', 'G', 'E', 'T', 't', 'l', 's', 'A', 'D', 'D', 'R', 0,
  /* 15638 */ '#', 'M', 'o', 'v', 'e', 'P', 'C', 't', 'o', 'L', 'R', 0,
  /* 15650 */ '#', 'M', 'o', 'v', 'e', 'G', 'O', 'T', 't', 'o', 'L', 'R', 0,
  /* 15663 */ '#', 'T', 'C', 'H', 'E', 'C', 'K', '_', 'R', 'E', 'T', 0,
  /* 15675 */ '#', 'T', 'B', 'E', 'G', 'I', 'N', '_', 'R', 'E', 'T', 0,
  /* 15687 */ '#', 'D', 'Y', 'N', 'A', 'R', 'E', 'A', 'O', 'F', 'F', 'S', 'E', 'T', 0,
  /* 15702 */ '#', 'R', 'E', 'S', 'T', 'O', 'R', 'E', '_', 'C', 'R', 'B', 'I', 'T', 0,
  /* 15717 */ '#', 'S', 'P', 'I', 'L', 'L', '_', 'C', 'R', 'B', 'I', 'T', 0,
  /* 15730 */ '#', 'A', 'N', 'D', 'I', 'o', '_', '1', '_', 'E', 'Q', '_', 'B', 'I', 'T', 0,
  /* 15746 */ '#', 'A', 'N', 'D', 'I', 'o', '_', '1', '_', 'G', 'T', '_', 'B', 'I', 'T', 0,
  /* 15762 */ '#', 'P', 'P', 'C', '3', '2', 'G', 'O', 'T', 0,
  /* 15772 */ '#', 'P', 'P', 'C', '3', '2', 'P', 'I', 'C', 'G', 'O', 'T', 0,
  /* 15785 */ '#', 'L', 'D', 't', 'o', 'c', 'C', 'P', 'T', 0,
  /* 15795 */ 'L', 'I', 'F', 'E', 'T', 'I', 'M', 'E', '_', 'S', 'T', 'A', 'R', 'T', 0,
  /* 15810 */ '#', 'S', 'P', 'I', 'L', 'L', 'T', 'O', 'V', 'S', 'R', '_', 'S', 'T', 0,
  /* 15825 */ '#', 'L', 'I', 'W', 'A', 'X', 0,
  /* 15832 */ '#', 'S', 'P', 'I', 'L', 'L', 'T', 'O', 'V', 'S', 'R', '_', 'L', 'D', 'X', 0,
  /* 15848 */ '#', 'S', 'P', 'I', 'L', 'L', 'T', 'O', 'V', 'S', 'R', '_', 'S', 'T', 'X', 0,
  /* 15864 */ '#', 'S', 'T', 'I', 'W', 'X', 0,
  /* 15871 */ '#', 'L', 'I', 'W', 'Z', 'X', 0,
  /* 15878 */ 'b', 'c', 'a', 0,
  /* 15882 */ 's', 'l', 'b', 'i', 'a', 0,
  /* 15888 */ 't', 'l', 'b', 'i', 'a', 0,
  /* 15894 */ 'b', 'c', 'l', 'a', 0,
  /* 15899 */ 'c', 'l', 'r', 'b', 'h', 'r', 'b', 0,
  /* 15907 */ 'b', 'c', 0,
  /* 15910 */ 's', 'l', 'b', 's', 'y', 'n', 'c', 0,
  /* 15918 */ 't', 'l', 'b', 's', 'y', 'n', 'c', 0,
  /* 15926 */ 'm', 's', 'g', 's', 'y', 'n', 'c', 0,
  /* 15934 */ 'i', 's', 'y', 'n', 'c', 0,
  /* 15940 */ 'm', 's', 'y', 'n', 'c', 0,
  /* 15946 */ '#', 'L', 'D', 't', 'o', 'c', 0,
  /* 15953 */ '#', 'L', 'W', 'Z', 't', 'o', 'c', 0,
  /* 15961 */ 'h', 'r', 'f', 'i', 'd', 0,
  /* 15967 */ 't', 'l', 'b', 'r', 'e', 0,
  /* 15973 */ 't', 'l', 'b', 'w', 'e', 0,
  /* 15979 */ 'r', 'f', 'c', 'i', 0,
  /* 15984 */ 'r', 'f', 'm', 'c', 'i', 0,
  /* 15990 */ 'r', 'f', 'd', 'i', 0,
  /* 15995 */ 'r', 'f', 'i', 0,
  /* 15999 */ 'b', 'c', 'l', 0,
  /* 16003 */ '#', 32, 'F', 'E', 'n', 't', 'r', 'y', 32, 'c', 'a', 'l', 'l', 0,
  /* 16017 */ 'd', 's', 's', 'a', 'l', 'l', 0,
  /* 16024 */ 'b', 'l', 'r', 'l', 0,
  /* 16029 */ 'b', 'd', 'z', 'l', 'r', 'l', 0,
  /* 16036 */ 'b', 'd', 'n', 'z', 'l', 'r', 'l', 0,
  /* 16044 */ 'b', 'c', 't', 'r', 'l', 0,
  /* 16050 */ 'a', 't', 't', 'n', 0,
  /* 16055 */ 'e', 'i', 'e', 'i', 'o', 0,
  /* 16061 */ 'n', 'a', 'p', 0,
  /* 16065 */ 't', 'r', 'a', 'p', 0,
  /* 16070 */ 'n', 'o', 'p', 0,
  /* 16074 */ 's', 't', 'o', 'p', 0,
  /* 16079 */ 'b', 'l', 'r', 0,
  /* 16083 */ 'b', 'd', 'z', 'l', 'r', 0,
  /* 16089 */ 'b', 'd', 'n', 'z', 'l', 'r', 0,
  /* 16096 */ 'b', 'c', 't', 'r', 0,
  /* 16101 */ 'c', 'p', '_', 'a', 'b', 'o', 'r', 't', 0,
  };
#endif

  static const uint32_t OpInfo0[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// ANNOTATION_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    15420U,	// DBG_VALUE
    15470U,	// DBG_LABEL
    0U,	// REG_SEQUENCE
    0U,	// COPY
    15386U,	// BUNDLE
    15796U,	// LIFETIME_START
    15373U,	// LIFETIME_END
    0U,	// STACKMAP
    16004U,	// FENTRY_CALL
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_OP
    0U,	// PATCHABLE_OP
    13442U,	// PATCHABLE_FUNCTION_ENTER
    13362U,	// PATCHABLE_RET
    13488U,	// PATCHABLE_FUNCTION_EXIT
    13465U,	// PATCHABLE_TAIL_CALL
    13417U,	// PATCHABLE_EVENT_CALL
    13393U,	// PATCHABLE_TYPED_EVENT_CALL
    0U,	// ICALL_BRANCH_FUNNEL
    0U,	// G_ADD
    0U,	// G_SUB
    0U,	// G_MUL
    0U,	// G_SDIV
    0U,	// G_UDIV
    0U,	// G_SREM
    0U,	// G_UREM
    0U,	// G_AND
    0U,	// G_OR
    0U,	// G_XOR
    0U,	// G_IMPLICIT_DEF
    0U,	// G_PHI
    0U,	// G_FRAME_INDEX
    0U,	// G_GLOBAL_VALUE
    0U,	// G_EXTRACT
    0U,	// G_UNMERGE_VALUES
    0U,	// G_INSERT
    0U,	// G_MERGE_VALUES
    0U,	// G_PTRTOINT
    0U,	// G_INTTOPTR
    0U,	// G_BITCAST
    0U,	// G_LOAD
    0U,	// G_SEXTLOAD
    0U,	// G_ZEXTLOAD
    0U,	// G_STORE
    0U,	// G_ATOMIC_CMPXCHG_WITH_SUCCESS
    0U,	// G_ATOMIC_CMPXCHG
    0U,	// G_ATOMICRMW_XCHG
    0U,	// G_ATOMICRMW_ADD
    0U,	// G_ATOMICRMW_SUB
    0U,	// G_ATOMICRMW_AND
    0U,	// G_ATOMICRMW_NAND
    0U,	// G_ATOMICRMW_OR
    0U,	// G_ATOMICRMW_XOR
    0U,	// G_ATOMICRMW_MAX
    0U,	// G_ATOMICRMW_MIN
    0U,	// G_ATOMICRMW_UMAX
    0U,	// G_ATOMICRMW_UMIN
    0U,	// G_BRCOND
    0U,	// G_BRINDIRECT
    0U,	// G_INTRINSIC
    0U,	// G_INTRINSIC_W_SIDE_EFFECTS
    0U,	// G_ANYEXT
    0U,	// G_TRUNC
    0U,	// G_CONSTANT
    0U,	// G_FCONSTANT
    0U,	// G_VASTART
    0U,	// G_VAARG
    0U,	// G_SEXT
    0U,	// G_ZEXT
    0U,	// G_SHL
    0U,	// G_LSHR
    0U,	// G_ASHR
    0U,	// G_ICMP
    0U,	// G_FCMP
    0U,	// G_SELECT
    0U,	// G_UADDE
    0U,	// G_USUBE
    0U,	// G_SADDO
    0U,	// G_SSUBO
    0U,	// G_UMULO
    0U,	// G_SMULO
    0U,	// G_UMULH
    0U,	// G_SMULH
    0U,	// G_FADD
    0U,	// G_FSUB
    0U,	// G_FMUL
    0U,	// G_FMA
    0U,	// G_FDIV
    0U,	// G_FREM
    0U,	// G_FPOW
    0U,	// G_FEXP
    0U,	// G_FEXP2
    0U,	// G_FLOG
    0U,	// G_FLOG2
    0U,	// G_FNEG
    0U,	// G_FPEXT
    0U,	// G_FPTRUNC
    0U,	// G_FPTOSI
    0U,	// G_FPTOUI
    0U,	// G_SITOFP
    0U,	// G_UITOFP
    0U,	// G_FABS
    0U,	// G_GEP
    0U,	// G_PTR_MASK
    0U,	// G_BR
    0U,	// G_INSERT_VECTOR_ELT
    0U,	// G_EXTRACT_VECTOR_ELT
    0U,	// G_SHUFFLE_VECTOR
    0U,	// G_BSWAP
    0U,	// G_ADDRSPACE_CAST
    0U,	// G_BLOCK_ADDR
    14702U,	// CFENCE8
    21525U,	// CLRLSLDI
    17410U,	// CLRLSLDIo
    22034U,	// CLRLSLWI
    17519U,	// CLRLSLWIo
    21560U,	// CLRRDI
    17437U,	// CLRRDIo
    22075U,	// CLRRWI
    17548U,	// CLRRWIo
    536897663U,	// CP_COPY_FIRST
    536900326U,	// CP_COPYx
    536897612U,	// CP_PASTE_LAST
    536891737U,	// CP_PASTEx
    562987U,	// DCBFL
    564850U,	// DCBFLP
    561542U,	// DCBFx
    553691021U,	// DCBTCT
    553690294U,	// DCBTDS
    553691029U,	// DCBTSTCT
    553690302U,	// DCBTSTDS
    567463U,	// DCBTSTT
    567435U,	// DCBTSTx
    567450U,	// DCBTT
    567169U,	// DCBTx
    13949U,	// DFLOADf32
    14261U,	// DFLOADf64
    13971U,	// DFSTOREf32
    14283U,	// DFSTOREf64
    21535U,	// EXTLDI
    17421U,	// EXTLDIo
    22060U,	// EXTLWI
    17539U,	// EXTLWIo
    21584U,	// EXTRDI
    17464U,	// EXTRDIo
    22099U,	// EXTRWI
    17575U,	// EXTRWIo
    22044U,	// INSLWI
    17530U,	// INSLWIo
    21568U,	// INSRDI
    17446U,	// INSRDIo
    22083U,	// INSRWI
    17557U,	// INSRWIo
    33573652U,	// LAx
    15826U,	// LIWAX
    15872U,	// LIWZX
    21688U,	// RLWIMIbm
    17502U,	// RLWIMIobm
    22616U,	// RLWINMbm
    17651U,	// RLWINMobm
    22625U,	// RLWNMbm
    17660U,	// RLWNMobm
    21576U,	// ROTRDI
    17455U,	// ROTRDIo
    22091U,	// ROTRWI
    17566U,	// ROTRWIo
    21529U,	// SLDI
    17414U,	// SLDIo
    22038U,	// SLWI
    17523U,	// SLWIo
    15358U,	// SPILLTOVSR_LD
    15833U,	// SPILLTOVSR_LDX
    15811U,	// SPILLTOVSR_ST
    15849U,	// SPILLTOVSR_STX
    21570U,	// SRDI
    17448U,	// SRDIo
    22085U,	// SRWI
    17559U,	// SRWIo
    15865U,	// STIWX
    21476U,	// SUBI
    19959U,	// SUBIC
    16943U,	// SUBICo
    26021U,	// SUBIS
    50357676U,	// SUBPCIS
    13960U,	// XFLOADf32
    14272U,	// XFLOADf64
    13983U,	// XFSTOREf32
    14295U,	// XFSTOREf64
    20142U,	// ADD4
    20142U,	// ADD4TLS
    17017U,	// ADD4o
    20142U,	// ADD8
    20142U,	// ADD8TLS
    20142U,	// ADD8TLS_
    17017U,	// ADD8o
    19921U,	// ADDC
    19921U,	// ADDC8
    16910U,	// ADDC8o
    16910U,	// ADDCo
    20699U,	// ADDE
    20699U,	// ADDE8
    17184U,	// ADDE8o
    17184U,	// ADDEo
    21511U,	// ADDI
    21511U,	// ADDI8
    19966U,	// ADDIC
    19966U,	// ADDIC8
    16951U,	// ADDICo
    26046U,	// ADDIS
    26046U,	// ADDIS8
    15118U,	// ADDISdtprelHA
    13544U,	// ADDISdtprelHA32
    15101U,	// ADDISgotTprelHA
    15073U,	// ADDIStlsgdHA
    15087U,	// ADDIStlsldHA
    15061U,	// ADDIStocHA
    15535U,	// ADDIdtprelL
    13833U,	// ADDIdtprelL32
    15498U,	// ADDItlsgdL
    13790U,	// ADDItlsgdL32
    15581U,	// ADDItlsgdLADDR
    13885U,	// ADDItlsgdLADDR32
    15510U,	// ADDItlsldL
    13804U,	// ADDItlsldL32
    15597U,	// ADDItlsldLADDR
    13903U,	// ADDItlsldLADDR32
    15488U,	// ADDItocL
    536891678U,	// ADDME
    536891678U,	// ADDME8
    536888119U,	// ADDME8o
    536888119U,	// ADDMEo
    536896949U,	// ADDPCIS
    536891767U,	// ADDZE
    536891767U,	// ADDZE8
    536888180U,	// ADDZE8o
    536888180U,	// ADDZEo
    51521U,	// ADJCALLSTACKDOWN
    51540U,	// ADJCALLSTACKUP
    20440U,	// AND
    20440U,	// AND8
    17107U,	// AND8o
    19930U,	// ANDC
    19930U,	// ANDC8
    16917U,	// ANDC8o
    16917U,	// ANDCo
    18086U,	// ANDISo
    18086U,	// ANDISo8
    17430U,	// ANDIo
    17430U,	// ANDIo8
    15731U,	// ANDIo_1_EQ_BIT
    15011U,	// ANDIo_1_EQ_BIT8
    15747U,	// ANDIo_1_GT_BIT
    15028U,	// ANDIo_1_GT_BIT8
    17107U,	// ANDo
    1141917938U,	// ATOMIC_CMP_SWAP_I16
    1141917916U,	// ATOMIC_CMP_SWAP_I32
    14119U,	// ATOMIC_CMP_SWAP_I64
    14872U,	// ATOMIC_CMP_SWAP_I8
    14483U,	// ATOMIC_LOAD_ADD_I16
    13582U,	// ATOMIC_LOAD_ADD_I32
    14016U,	// ATOMIC_LOAD_ADD_I64
    14770U,	// ATOMIC_LOAD_ADD_I8
    14526U,	// ATOMIC_LOAD_AND_I16
    13625U,	// ATOMIC_LOAD_AND_I32
    14307U,	// ATOMIC_LOAD_AND_I64
    14811U,	// ATOMIC_LOAD_AND_I8
    14670U,	// ATOMIC_LOAD_MAX_I16
    13769U,	// ATOMIC_LOAD_MAX_I32
    14203U,	// ATOMIC_LOAD_MAX_I64
    14962U,	// ATOMIC_LOAD_MAX_I8
    14569U,	// ATOMIC_LOAD_MIN_I16
    13668U,	// ATOMIC_LOAD_MIN_I32
    14081U,	// ATOMIC_LOAD_MIN_I64
    14852U,	// ATOMIC_LOAD_MIN_I8
    14504U,	// ATOMIC_LOAD_NAND_I16
    13603U,	// ATOMIC_LOAD_NAND_I32
    14037U,	// ATOMIC_LOAD_NAND_I64
    14790U,	// ATOMIC_LOAD_NAND_I8
    14628U,	// ATOMIC_LOAD_OR_I16
    13727U,	// ATOMIC_LOAD_OR_I32
    14161U,	// ATOMIC_LOAD_OR_I64
    14911U,	// ATOMIC_LOAD_OR_I8
    14462U,	// ATOMIC_LOAD_SUB_I16
    13561U,	// ATOMIC_LOAD_SUB_I32
    13995U,	// ATOMIC_LOAD_SUB_I64
    14736U,	// ATOMIC_LOAD_SUB_I8
    14648U,	// ATOMIC_LOAD_UMAX_I16
    13747U,	// ATOMIC_LOAD_UMAX_I32
    14181U,	// ATOMIC_LOAD_UMAX_I64
    14941U,	// ATOMIC_LOAD_UMAX_I8
    14547U,	// ATOMIC_LOAD_UMIN_I16
    13646U,	// ATOMIC_LOAD_UMIN_I32
    14059U,	// ATOMIC_LOAD_UMIN_I64
    14831U,	// ATOMIC_LOAD_UMIN_I8
    14607U,	// ATOMIC_LOAD_XOR_I16
    13706U,	// ATOMIC_LOAD_XOR_I32
    14140U,	// ATOMIC_LOAD_XOR_I64
    14892U,	// ATOMIC_LOAD_XOR_I8
    14590U,	// ATOMIC_SWAP_I16
    13689U,	// ATOMIC_SWAP_I32
    14102U,	// ATOMIC_SWAP_I64
    15045U,	// ATOMIC_SWAP_I8
    16051U,	// ATTN
    592924U,	// B
    608750U,	// BA
    83902568U,	// BC
    1687074U,	// BCC
    2211362U,	// BCCA
    2735650U,	// BCCCTR
    2735650U,	// BCCCTR8
    3259938U,	// BCCCTRL
    3259938U,	// BCCCTRL8
    3784226U,	// BCCL
    4308514U,	// BCCLA
    4832802U,	// BCCLR
    5357090U,	// BCCLRL
    5783706U,	// BCCTR
    5783706U,	// BCCTR8
    5783762U,	// BCCTR8n
    5783684U,	// BCCTRL
    5783684U,	// BCCTRL8
    5783742U,	// BCCTRL8n
    5783742U,	// BCCTRLn
    5783762U,	// BCCTRn
    17668U,	// BCDCFNo
    17871U,	// BCDCFSQo
    18434U,	// BCDCFZo
    17677U,	// BCDCPSGNo
    536888637U,	// BCDCTNo
    536888793U,	// BCDCTSQo
    18450U,	// BCDCTZo
    17697U,	// BCDSETSGNo
    17934U,	// BCDSRo
    18009U,	// BCDSo
    16967U,	// BCDTRUNCo
    18111U,	// BCDUSo
    16978U,	// BCDUTRUNCo
    83902576U,	// BCL
    5783696U,	// BCLR
    5783673U,	// BCLRL
    5783732U,	// BCLRLn
    5783753U,	// BCLRn
    589901U,	// BCLalways
    83902636U,	// BCLn
    16097U,	// BCTR
    16097U,	// BCTR8
    16045U,	// BCTRL
    16045U,	// BCTRL8
    114778U,	// BCTRL8_LDinto_toc
    83902629U,	// BCn
    603028U,	// BDNZ
    603028U,	// BDNZ8
    609297U,	// BDNZA
    606464U,	// BDNZAm
    606249U,	// BDNZAp
    595894U,	// BDNZL
    609061U,	// BDNZLA
    606448U,	// BDNZLAm
    606233U,	// BDNZLAp
    16090U,	// BDNZLR
    16090U,	// BDNZLR8
    16037U,	// BDNZLRL
    13338U,	// BDNZLRLm
    13295U,	// BDNZLRLp
    13354U,	// BDNZLRm
    13311U,	// BDNZLRp
    590095U,	// BDNZLm
    589880U,	// BDNZLp
    590109U,	// BDNZm
    589894U,	// BDNZp
    602871U,	// BDZ
    602871U,	// BDZ8
    609291U,	// BDZA
    606457U,	// BDZAm
    606242U,	// BDZAp
    595888U,	// BDZL
    609054U,	// BDZLA
    606440U,	// BDZLAm
    606225U,	// BDZLAp
    16084U,	// BDZLR
    16084U,	// BDZLR8
    16030U,	// BDZLRL
    13330U,	// BDZLRLm
    13287U,	// BDZLRLp
    13347U,	// BDZLRm
    13304U,	// BDZLRp
    590088U,	// BDZLm
    589873U,	// BDZLp
    590103U,	// BDZm
    589888U,	// BDZp
    595688U,	// BL
    595688U,	// BL8
    6362856U,	// BL8_NOP
    6428392U,	// BL8_NOP_TLS
    661224U,	// BL8_TLS
    661224U,	// BL8_TLS_
    609043U,	// BLA
    609043U,	// BLA8
    6376211U,	// BLA8_NOP
    16080U,	// BLR
    16080U,	// BLR8
    16025U,	// BLRL
    661224U,	// BL_TLS
    20420U,	// BPERMD
    20022U,	// BRINC
    15900U,	// CLRBHRB
    19570U,	// CMPB
    19570U,	// CMPB8
    20484U,	// CMPD
    21553U,	// CMPDI
    19576U,	// CMPEQB
    20391U,	// CMPLD
    21517U,	// CMPLDI
    27648U,	// CMPLW
    22018U,	// CMPLWI
    100682880U,	// CMPRB
    100682880U,	// CMPRB8
    27905U,	// CMPW
    22068U,	// CMPWI
    536891571U,	// CNTLZD
    536888078U,	// CNTLZDo
    536899139U,	// CNTLZW
    536899139U,	// CNTLZW8
    536889279U,	// CNTLZW8o
    536889279U,	// CNTLZWo
    536891586U,	// CNTTZD
    536888087U,	// CNTTZDo
    536899154U,	// CNTTZW
    536899154U,	// CNTTZW8
    536889288U,	// CNTTZW8o
    536889288U,	// CNTTZWo
    16102U,	// CP_ABORT
    29414U,	// CP_COPY
    29414U,	// CP_COPY8
    20825U,	// CP_PASTE
    20825U,	// CP_PASTE8
    17252U,	// CP_PASTE8o
    17252U,	// CP_PASTEo
    14421U,	// CR6SET
    14407U,	// CR6UNSET
    20470U,	// CRAND
    19936U,	// CRANDC
    27113U,	// CREQV
    20454U,	// CRNAND
    25385U,	// CRNOR
    25399U,	// CROR
    20043U,	// CRORC
    117467625U,	// CRSET
    117465941U,	// CRUNSET
    25429U,	// CRXOR
    1687074U,	// CTRL_DEP
    536893856U,	// DARN
    559596U,	// DCBA
    151942U,	// DCBF
    564601U,	// DCBFEP
    562136U,	// DCBI
    567411U,	// DCBST
    564634U,	// DCBSTEP
    157569U,	// DCBT
    171410U,	// DCBTEP
    157835U,	// DCBTST
    171427U,	// DCBTSTEP
    570092U,	// DCBZ
    564653U,	// DCBZEP
    563113U,	// DCBZL
    564617U,	// DCBZLEP
    536892394U,	// DCCCI
    20646U,	// DIVD
    20705U,	// DIVDE
    26888U,	// DIVDEU
    18189U,	// DIVDEUo
    17191U,	// DIVDEo
    26881U,	// DIVDU
    18181U,	// DIVDUo
    17159U,	// DIVDo
    28202U,	// DIVW
    20839U,	// DIVWE
    26896U,	// DIVWEU
    18198U,	// DIVWEUo
    17260U,	// DIVWEo
    27019U,	// DIVWU
    18225U,	// DIVWUo
    18349U,	// DIVWo
    714242U,	// DSS
    16018U,	// DSSALL
    1745037434U,	// DST
    1745037434U,	// DST64
    1745037459U,	// DSTST
    1745037459U,	// DSTST64
    1745037488U,	// DSTSTT
    1745037488U,	// DSTSTT64
    1745037473U,	// DSTT
    1745037473U,	// DSTT64
    15141U,	// DYNALLOC
    14691U,	// DYNALLOC8
    15688U,	// DYNAREAOFFSET
    14995U,	// DYNAREAOFFSET8
    536896430U,	// EFDABS
    20147U,	// EFDADD
    536896812U,	// EFDCFS
    536891862U,	// EFDCFSF
    536892781U,	// EFDCFSI
    536891252U,	// EFDCFSID
    536891964U,	// EFDCFUF
    536892858U,	// EFDCFUI
    536891271U,	// EFDCFUID
    25039U,	// EFDCMPEQ
    26527U,	// EFDCMPGT
    26605U,	// EFDCMPLT
    536891936U,	// EFDCTSF
    536892809U,	// EFDCTSI
    536900348U,	// EFDCTSIDZ
    536900449U,	// EFDCTSIZ
    536891992U,	// EFDCTUF
    536892886U,	// EFDCTUI
    536900369U,	// EFDCTUIDZ
    536900480U,	// EFDCTUIZ
    27061U,	// EFDDIV
    22373U,	// EFDMUL
    536896455U,	// EFDNABS
    536892026U,	// EFDNEG
    19792U,	// EFDSUB
    25089U,	// EFDTSTEQ
    26568U,	// EFDTSTGT
    26646U,	// EFDTSTLT
    536896492U,	// EFSABS
    20249U,	// EFSADD
    536891202U,	// EFSCFD
    536891871U,	// EFSCFSF
    536892790U,	// EFSCFSI
    536891973U,	// EFSCFUF
    536892867U,	// EFSCFUI
    25059U,	// EFSCMPEQ
    26547U,	// EFSCMPGT
    26625U,	// EFSCMPLT
    536891945U,	// EFSCTSF
    536892818U,	// EFSCTSI
    536900459U,	// EFSCTSIZ
    536892001U,	// EFSCTUF
    536892895U,	// EFSCTUI
    536900490U,	// EFSCTUIZ
    27075U,	// EFSDIV
    22389U,	// EFSMUL
    536896473U,	// EFSNABS
    536892042U,	// EFSNEG
    19846U,	// EFSSUB
    25099U,	// EFSTSTEQ
    26578U,	// EFSTSTGT
    26656U,	// EFSTSTLT
    13848U,	// EH_SjLj_LongJmp32
    14224U,	// EH_SjLj_LongJmp64
    13867U,	// EH_SjLj_SetJmp32
    14243U,	// EH_SjLj_SetJmp64
    589825U,	// EH_SjLj_Setup
    27108U,	// EQV
    27108U,	// EQV8
    18249U,	// EQV8o
    18249U,	// EQVo
    536896509U,	// EVABS
    16804822U,	// EVADDIW
    536898128U,	// EVADDSMIAAW
    536898260U,	// EVADDSSIAAW
    536898194U,	// EVADDUMIAAW
    536898326U,	// EVADDUSIAAW
    27508U,	// EVADDW
    20477U,	// EVAND
    19944U,	// EVANDC
    25080U,	// EVCMPEQ
    26137U,	// EVCMPGTS
    26956U,	// EVCMPGTU
    26147U,	// EVCMPLTS
    26966U,	// EVCMPLTU
    536898888U,	// EVCNTLSW
    536899137U,	// EVCNTLZW
    26309U,	// EVDIVWS
    27017U,	// EVDIVWU
    27120U,	// EVEQV
    536890581U,	// EVEXTSB
    536892219U,	// EVEXTSH
    536896500U,	// EVFSABS
    20257U,	// EVFSADD
    536891880U,	// EVFSCFSF
    536892799U,	// EVFSCFSI
    536891982U,	// EVFSCFUF
    536892876U,	// EVFSCFUI
    25069U,	// EVFSCMPEQ
    26557U,	// EVFSCMPGT
    26635U,	// EVFSCMPLT
    536891954U,	// EVFSCTSF
    536892827U,	// EVFSCTSI
    536900469U,	// EVFSCTSIZ
    536891954U,	// EVFSCTUF
    536892904U,	// EVFSCTUI
    536900469U,	// EVFSCTUIZ
    27083U,	// EVFSDIV
    22397U,	// EVFSMUL
    536896482U,	// EVFSNABS
    536892050U,	// EVFSNEG
    19854U,	// EVFSSUB
    25109U,	// EVFSTSTEQ
    26588U,	// EVFSTSTGT
    26666U,	// EVFSTSTLT
    33574698U,	// EVLDD
    604008185U,	// EVLDDX
    33575593U,	// EVLDH
    604008289U,	// EVLDHX
    33581948U,	// EVLDW
    604009078U,	// EVLDWX
    33580851U,	// EVLHHESPLAT
    604008790U,	// EVLHHESPLATX
    33580876U,	// EVLHHOSSPLAT
    604008817U,	// EVLHHOSSPLATX
    33580890U,	// EVLHHOUSPLAT
    604008832U,	// EVLHHOUSPLATX
    33575167U,	// EVLWHE
    604008260U,	// EVLWHEX
    33580533U,	// EVLWHOS
    604008762U,	// EVLWHOSX
    33581359U,	// EVLWHOU
    604008966U,	// EVLWHOUX
    33580864U,	// EVLWHSPLAT
    604008804U,	// EVLWHSPLATX
    33580904U,	// EVLWWSPLAT
    604008847U,	// EVLWWSPLATX
    21624U,	// EVMERGEHI
    22989U,	// EVMERGEHILO
    22978U,	// EVMERGELO
    21635U,	// EVMERGELOHI
    18802U,	// EVMHEGSMFAA
    22748U,	// EVMHEGSMFAN
    18850U,	// EVMHEGSMIAA
    22796U,	// EVMHEGSMIAN
    18887U,	// EVMHEGUMIAA
    22833U,	// EVMHEGUMIAN
    20882U,	// EVMHESMF
    18935U,	// EVMHESMFA
    27164U,	// EVMHESMFAAW
    27689U,	// EVMHESMFANW
    21696U,	// EVMHESMI
    19026U,	// EVMHESMIA
    27229U,	// EVMHESMIAAW
    27741U,	// EVMHESMIANW
    20985U,	// EVMHESSF
    18978U,	// EVMHESSFA
    27190U,	// EVMHESSFAAW
    27715U,	// EVMHESSFANW
    27361U,	// EVMHESSIAAW
    27819U,	// EVMHESSIANW
    21735U,	// EVMHEUMI
    19069U,	// EVMHEUMIA
    27295U,	// EVMHEUMIAAW
    27780U,	// EVMHEUMIANW
    27427U,	// EVMHEUSIAAW
    27858U,	// EVMHEUSIANW
    18815U,	// EVMHOGSMFAA
    22761U,	// EVMHOGSMFAN
    18863U,	// EVMHOGSMIAA
    22809U,	// EVMHOGSMIAN
    18900U,	// EVMHOGUMIAA
    22846U,	// EVMHOGUMIAN
    20902U,	// EVMHOSMF
    18957U,	// EVMHOSMFA
    27177U,	// EVMHOSMFAAW
    27702U,	// EVMHOSMFANW
    21716U,	// EVMHOSMI
    19048U,	// EVMHOSMIA
    27269U,	// EVMHOSMIAAW
    27767U,	// EVMHOSMIANW
    21005U,	// EVMHOSSF
    19000U,	// EVMHOSSFA
    27203U,	// EVMHOSSFAAW
    27728U,	// EVMHOSSFANW
    27401U,	// EVMHOSSIAAW
    27845U,	// EVMHOSSIANW
    21765U,	// EVMHOUMI
    19102U,	// EVMHOUMIA
    27335U,	// EVMHOUMIAAW
    27806U,	// EVMHOUMIANW
    27467U,	// EVMHOUSIAAW
    27884U,	// EVMHOUSIANW
    536890157U,	// EVMRA
    20892U,	// EVMWHSMF
    18946U,	// EVMWHSMFA
    21706U,	// EVMWHSMI
    19037U,	// EVMWHSMIA
    20995U,	// EVMWHSSF
    18989U,	// EVMWHSSFA
    21745U,	// EVMWHUMI
    19080U,	// EVMWHUMIA
    27256U,	// EVMWLSMIAAW
    27754U,	// EVMWLSMIANW
    27388U,	// EVMWLSSIAAW
    27832U,	// EVMWLSSIANW
    21755U,	// EVMWLUMI
    19091U,	// EVMWLUMIA
    27322U,	// EVMWLUMIAAW
    27793U,	// EVMWLUMIANW
    27454U,	// EVMWLUSIAAW
    27871U,	// EVMWLUSIANW
    20912U,	// EVMWSMF
    18968U,	// EVMWSMFA
    18828U,	// EVMWSMFAA
    22774U,	// EVMWSMFAN
    21726U,	// EVMWSMI
    19059U,	// EVMWSMIA
    18876U,	// EVMWSMIAA
    22822U,	// EVMWSMIAN
    21015U,	// EVMWSSF
    19011U,	// EVMWSSFA
    18839U,	// EVMWSSFAA
    22785U,	// EVMWSSFAN
    21775U,	// EVMWUMI
    19113U,	// EVMWUMIA
    18913U,	// EVMWUMIAA
    22859U,	// EVMWUMIAN
    20462U,	// EVNAND
    536892059U,	// EVNEG
    25392U,	// EVNOR
    25405U,	// EVOR
    20050U,	// EVORC
    27655U,	// EVRLW
    22026U,	// EVRLWI
    536898435U,	// EVRNDW
    2154329095U,	// EVSEL
    27662U,	// EVSLW
    22052U,	// EVSLWI
    151016557U,	// EVSPLATFI
    151016880U,	// EVSPLATI
    26065U,	// EVSRWIS
    26910U,	// EVSRWIU
    26237U,	// EVSRWS
    27003U,	// EVSRWU
    33574714U,	// EVSTDD
    604008193U,	// EVSTDDX
    33575600U,	// EVSTDH
    604008297U,	// EVSTDHX
    33581963U,	// EVSTDW
    604009086U,	// EVSTDWX
    33575175U,	// EVSTWHE
    604008269U,	// EVSTWHEX
    33577401U,	// EVSTWHO
    604008459U,	// EVSTWHOX
    33575278U,	// EVSTWWE
    604008279U,	// EVSTWWEX
    33577554U,	// EVSTWWO
    604008469U,	// EVSTWWOX
    536898154U,	// EVSUBFSMIAAW
    536898286U,	// EVSUBFSSIAAW
    536898220U,	// EVSUBFUMIAAW
    536898352U,	// EVSUBFUSIAAW
    27556U,	// EVSUBFW
    167799725U,	// EVSUBIFW
    25436U,	// EVXOR
    536890583U,	// EXTSB
    536890583U,	// EXTSB8
    536890583U,	// EXTSB8_32_64
    536887727U,	// EXTSB8o
    536887727U,	// EXTSBo
    536892221U,	// EXTSH
    536892221U,	// EXTSH8
    536892221U,	// EXTSH8_32_64
    536888249U,	// EXTSH8o
    536888249U,	// EXTSHo
    536898925U,	// EXTSW
    21662U,	// EXTSWSLI
    17482U,	// EXTSWSLIo
    536898925U,	// EXTSW_32
    536898925U,	// EXTSW_32_64
    536889231U,	// EXTSW_32_64o
    536889231U,	// EXTSWo
    16056U,	// EnforceIEIO
    536896440U,	// FABSD
    536888869U,	// FABSDo
    536896440U,	// FABSS
    536888869U,	// FABSSo
    20157U,	// FADD
    25692U,	// FADDS
    18016U,	// FADDSo
    17023U,	// FADDo
    0U,	// FADDrtz
    536891245U,	// FCFID
    536896686U,	// FCFIDS
    536888955U,	// FCFIDSo
    536897764U,	// FCFIDU
    536897079U,	// FCFIDUS
    536889031U,	// FCFIDUSo
    536889075U,	// FCFIDUo
    536887988U,	// FCFIDo
    26936U,	// FCMPUD
    26936U,	// FCMPUS
    22883U,	// FCPSGND
    17688U,	// FCPSGNDo
    22883U,	// FCPSGNS
    17688U,	// FCPSGNSo
    536891264U,	// FCTID
    536897774U,	// FCTIDU
    536900508U,	// FCTIDUZ
    536889371U,	// FCTIDUZo
    536889084U,	// FCTIDUo
    536900361U,	// FCTIDZ
    536889337U,	// FCTIDZo
    536887996U,	// FCTIDo
    536898529U,	// FCTIW
    536897907U,	// FCTIWU
    536900519U,	// FCTIWUZ
    536889381U,	// FCTIWUZo
    536889128U,	// FCTIWUo
    536900530U,	// FCTIWZ
    536889391U,	// FCTIWZo
    536889192U,	// FCTIWo
    27069U,	// FDIV
    26230U,	// FDIVS
    18129U,	// FDIVSo
    18242U,	// FDIVo
    20174U,	// FMADD
    25701U,	// FMADDS
    18024U,	// FMADDSo
    17040U,	// FMADDo
    536896246U,	// FMR
    536888828U,	// FMRo
    19819U,	// FMSUB
    25671U,	// FMSUBS
    17990U,	// FMSUBSo
    16860U,	// FMSUBo
    22383U,	// FMUL
    26084U,	// FMULS
    18094U,	// FMULSo
    17626U,	// FMULo
    536896466U,	// FNABSD
    536888886U,	// FNABSDo
    536896466U,	// FNABSS
    536888886U,	// FNABSSo
    536892036U,	// FNEGD
    536888221U,	// FNEGDo
    536892036U,	// FNEGS
    536888221U,	// FNEGSo
    20193U,	// FNMADD
    25711U,	// FNMADDS
    18033U,	// FNMADDSo
    17059U,	// FNMADDo
    19838U,	// FNMSUB
    25681U,	// FNMSUBS
    17999U,	// FNMSUBSo
    16879U,	// FNMSUBo
    536891702U,	// FRE
    536896794U,	// FRES
    536888973U,	// FRESo
    536888136U,	// FREo
    536893514U,	// FRIMD
    536888556U,	// FRIMDo
    536893514U,	// FRIMS
    536888556U,	// FRIMSo
    536893812U,	// FRIND
    536888630U,	// FRINDo
    536893812U,	// FRINS
    536888630U,	// FRINSo
    536895084U,	// FRIPD
    536888725U,	// FRIPDo
    536895084U,	// FRIPS
    536888725U,	// FRIPSo
    536900443U,	// FRIZD
    536889355U,	// FRIZDo
    536900443U,	// FRIZS
    536889355U,	// FRIZSo
    536895785U,	// FRSP
    536888756U,	// FRSPo
    536891728U,	// FRSQRTE
    536896802U,	// FRSQRTES
    536888980U,	// FRSQRTESo
    536888154U,	// FRSQRTEo
    22290U,	// FSELD
    17610U,	// FSELDo
    22290U,	// FSELS
    17610U,	// FSELSo
    536897589U,	// FSQRT
    536897069U,	// FSQRTS
    536889014U,	// FSQRTSo
    536889058U,	// FSQRTo
    19802U,	// FSUB
    25662U,	// FSUBS
    17982U,	// FSUBSo
    16843U,	// FSUBo
    27092U,	// FTDIV
    536897596U,	// FTSQRT
    15627U,	// GETtlsADDR
    13936U,	// GETtlsADDR32
    15613U,	// GETtlsldADDR
    13921U,	// GETtlsldADDR32
    15962U,	// HRFID
    562142U,	// ICBI
    564609U,	// ICBIEP
    216623U,	// ICBLC
    214471U,	// ICBLQ
    223111U,	// ICBT
    222682U,	// ICBTLS
    536892401U,	// ICCCI
    22296U,	// ISEL
    22296U,	// ISEL8
    15935U,	// ISYNC
    184568596U,	// LA
    604008583U,	// LBARX
    2751492231U,	// LBARXL
    604008479U,	// LBEPX
    33583858U,	// LBZ
    33583858U,	// LBZ8
    28599U,	// LBZCIX
    201353618U,	// LBZU
    201353618U,	// LBZU8
    218133065U,	// LBZUX
    218133065U,	// LBZUX8
    604009144U,	// LBZX
    604009144U,	// LBZX8
    29368U,	// LBZXTLS
    29368U,	// LBZXTLS_
    29368U,	// LBZXTLS_32
    33574804U,	// LD
    604008590U,	// LDARX
    2751492238U,	// LDARXL
    26406U,	// LDAT
    604008611U,	// LDBRX
    28568U,	// LDCIX
    604008446U,	// LDMX
    201353462U,	// LDU
    218132962U,	// LDUX
    604008224U,	// LDX
    28448U,	// LDXTLS
    28448U,	// LDXTLS_
    15522U,	// LDgotTprelL
    13818U,	// LDgotTprelL32
    15947U,	// LDtoc
    15786U,	// LDtocBA
    15786U,	// LDtocCPT
    15460U,	// LDtocJTI
    15480U,	// LDtocL
    33574730U,	// LFD
    604008494U,	// LFDEPX
    201353412U,	// LFDU
    218132945U,	// LFDUX
    604008204U,	// LFDX
    604008113U,	// LFIWAX
    604009167U,	// LFIWZX
    33580346U,	// LFS
    201353535U,	// LFSU
    218133031U,	// LFSUX
    604008737U,	// LFSX
    33573453U,	// LHA
    33573453U,	// LHA8
    604008597U,	// LHARX
    2751492245U,	// LHARXL
    201353400U,	// LHAU
    201353400U,	// LHAU8
    218132901U,	// LHAUX
    218132901U,	// LHAUX8
    604008096U,	// LHAX
    604008096U,	// LHAX8
    604008626U,	// LHBRX
    604008626U,	// LHBRX8
    604008511U,	// LHEPX
    33583922U,	// LHZ
    33583922U,	// LHZ8
    28607U,	// LHZCIX
    201353624U,	// LHZU
    201353624U,	// LHZU8
    218133072U,	// LHZUX
    218133072U,	// LHZUX8
    604009159U,	// LHZX
    604009159U,	// LHZX8
    29383U,	// LHZXTLS
    29383U,	// LHZXTLS_
    29383U,	// LHZXTLS_32
    50353299U,	// LI
    50353299U,	// LI8
    50357701U,	// LIS
    50357701U,	// LIS8
    33582101U,	// LMW
    22107U,	// LSWI
    604008136U,	// LVEBX
    604008306U,	// LVEHX
    604009095U,	// LVEWX
    604002135U,	// LVSL
    604005259U,	// LVSR
    604009054U,	// LVX
    604002204U,	// LVXL
    33573684U,	// LWA
    604008604U,	// LWARX
    2751492252U,	// LWARXL
    26484U,	// LWAT
    218132908U,	// LWAUX
    604008130U,	// LWAX
    604008130U,	// LWAX_32
    33573684U,	// LWA_32
    604008651U,	// LWBRX
    604008651U,	// LWBRX8
    604008526U,	// LWEPX
    33584058U,	// LWZ
    33584058U,	// LWZ8
    28615U,	// LWZCIX
    201353630U,	// LWZU
    201353630U,	// LWZU8
    218133079U,	// LWZUX
    218133079U,	// LWZUX8
    604009184U,	// LWZX
    604009184U,	// LWZX8
    29408U,	// LWZXTLS
    29408U,	// LWZXTLS_
    29408U,	// LWZXTLS_32
    15954U,	// LWZtoc
    33574986U,	// LXSD
    604008239U,	// LXSDX
    604009135U,	// LXSIBZX
    604009150U,	// LXSIHZX
    604008121U,	// LXSIWAX
    604009175U,	// LXSIWZX
    33579337U,	// LXSSP
    604008566U,	// LXSSPX
    33581565U,	// LXV
    604008060U,	// LXVB16X
    604008026U,	// LXVD2X
    604008720U,	// LXVDSX
    604008079U,	// LXVH8X
    22415U,	// LXVL
    22322U,	// LXVLL
    604008043U,	// LXVW4X
    604008782U,	// LXVWSX
    604009065U,	// LXVX
    20316U,	// MADDHD
    26833U,	// MADDHDU
    20376U,	// MADDLD
    713359U,	// MBAR
    536891833U,	// MCRF
    536896831U,	// MCRFS
    553198U,	// MCRXRX
    234901706U,	// MFBHRBE
    549546U,	// MFCR
    549546U,	// MFCR8
    549784U,	// MFCTR
    549784U,	// MFCTR8
    536896149U,	// MFDCR
    550196U,	// MFFS
    536893871U,	// MFFSCDRN
    251680052U,	// MFFSCDRNI
    544979U,	// MFFSCE
    536893862U,	// MFFSCRN
    268457258U,	// MFFSCRNI
    546640U,	// MFFSL
    542367U,	// MFFSo
    549601U,	// MFLR
    549601U,	// MFLR8
    549751U,	// MFMSR
    285233599U,	// MFOCRF
    285233599U,	// MFOCRF8
    536896251U,	// MFPMR
    536896355U,	// MFSPR
    536896355U,	// MFSPR8
    302015345U,	// MFSR
    536893818U,	// MFSRIN
    536890604U,	// MFTB
    7365475U,	// MFTB8
    536891417U,	// MFVRD
    7889763U,	// MFVRSAVE
    7889763U,	// MFVRSAVEv
    549560U,	// MFVSCR
    536891417U,	// MFVSRD
    536891310U,	// MFVSRLD
    536900543U,	// MFVSRWZ
    20521U,	// MODSD
    27924U,	// MODSW
    20603U,	// MODUD
    28099U,	// MODUW
    15927U,	// MSGSYNC
    15941U,	// MSYNC
    536891855U,	// MTCRF
    536891855U,	// MTCRF8
    549791U,	// MTCTR
    549791U,	// MTCTR8
    549791U,	// MTCTR8loop
    549791U,	// MTCTRloop
    654516899U,	// MTDCR
    706640U,	// MTFSB0
    706722U,	// MTFSB1
    20978U,	// MTFSF
    21605U,	// MTFSFI
    17473U,	// MTFSFIo
    536891890U,	// MTFSFb
    17292U,	// MTFSFo
    549607U,	// MTLR
    549607U,	// MTLR8
    536896382U,	// MTMSR
    536891409U,	// MTMSRD
    233927U,	// MTOCRF
    233927U,	// MTOCRF8
    536896258U,	// MTPMR
    536896362U,	// MTSPR
    536896362U,	// MTSPR8
    254853U,	// MTSR
    536893826U,	// MTSRIN
    540892U,	// MTVRSAVE
    721116U,	// MTVRSAVEv
    549568U,	// MTVSCR
    536891425U,	// MTVSRD
    20273U,	// MTVSRDD
    536890169U,	// MTVSRWA
    536897157U,	// MTVSRWS
    536900552U,	// MTVSRWZ
    20324U,	// MULHD
    26842U,	// MULHDU
    18154U,	// MULHDUo
    17068U,	// MULHDo
    27599U,	// MULHW
    26985U,	// MULHWU
    18207U,	// MULHWUo
    18272U,	// MULHWo
    20384U,	// MULLD
    17092U,	// MULLDo
    21655U,	// MULLI
    21655U,	// MULLI8
    27641U,	// MULLW
    18288U,	// MULLWo
    15651U,	// MoveGOTtoLR
    15639U,	// MovePCtoLR
    14982U,	// MovePCtoLR8
    20448U,	// NAND
    20448U,	// NAND8
    17106U,	// NAND8o
    17106U,	// NANDo
    16062U,	// NAP
    536892021U,	// NEG
    536892021U,	// NEG8
    536888215U,	// NEG8o
    536888215U,	// NEGo
    16071U,	// NOP
    13520U,	// NOP_GT_PWR6
    13532U,	// NOP_GT_PWR7
    25380U,	// NOR
    25380U,	// NOR8
    17922U,	// NOR8o
    17922U,	// NORo
    25373U,	// OR
    25373U,	// OR8
    17923U,	// OR8o
    20038U,	// ORC
    20038U,	// ORC8
    16990U,	// ORC8o
    16990U,	// ORCo
    21864U,	// ORI
    21864U,	// ORI8
    26059U,	// ORIS
    26059U,	// ORIS8
    17923U,	// ORo
    536890619U,	// POPCNTB
    536891491U,	// POPCNTD
    536898958U,	// POPCNTW
    15763U,	// PPC32GOT
    15773U,	// PPC32PICGOT
    536893140U,	// PSC_DCBZL
    318789325U,	// PSQ_L
    318794023U,	// PSQ_LU
    29181U,	// PSQ_LUX
    28632U,	// PSQ_LX
    318793796U,	// PSQ_ST
    318794080U,	// PSQ_STU
    29240U,	// PSQ_STUX
    29084U,	// PSQ_STX
    536896422U,	// PS_ABS
    536888860U,	// PS_ABSo
    20139U,	// PS_ADD
    17014U,	// PS_ADDo
    18529U,	// PS_CMPO0
    18611U,	// PS_CMPO1
    18560U,	// PS_CMPU0
    18642U,	// PS_CMPU1
    27053U,	// PS_DIV
    18233U,	// PS_DIVo
    20163U,	// PS_MADD
    18539U,	// PS_MADDS0
    16712U,	// PS_MADDS0o
    18621U,	// PS_MADDS1
    16771U,	// PS_MADDS1o
    17030U,	// PS_MADDo
    18488U,	// PS_MERGE00
    16676U,	// PS_MERGE00o
    18570U,	// PS_MERGE01
    16735U,	// PS_MERGE01o
    18500U,	// PS_MERGE10
    16689U,	// PS_MERGE10o
    18582U,	// PS_MERGE11
    16748U,	// PS_MERGE11o
    536896237U,	// PS_MR
    536888820U,	// PS_MRo
    19808U,	// PS_MSUB
    16850U,	// PS_MSUBo
    22365U,	// PS_MUL
    18550U,	// PS_MULS0
    16724U,	// PS_MULS0o
    18632U,	// PS_MULS1
    16783U,	// PS_MULS1o
    17617U,	// PS_MULo
    536896446U,	// PS_NABS
    536888876U,	// PS_NABSo
    536892018U,	// PS_NEG
    536888212U,	// PS_NEGo
    20181U,	// PS_NMADD
    17048U,	// PS_NMADDo
    19826U,	// PS_NMSUB
    16868U,	// PS_NMSUBo
    536896784U,	// PS_RES
    536888964U,	// PS_RESo
    536891715U,	// PS_RSQRTE
    536888142U,	// PS_RSQRTEo
    22280U,	// PS_SEL
    17601U,	// PS_SELo
    19784U,	// PS_SUB
    16834U,	// PS_SUBo
    18520U,	// PS_SUM0
    16702U,	// PS_SUM0o
    18602U,	// PS_SUM1
    16761U,	// PS_SUM1o
    21792U,	// QVALIGNI
    21792U,	// QVALIGNIb
    21792U,	// QVALIGNIs
    21925U,	// QVESPLATI
    21925U,	// QVESPLATIb
    21925U,	// QVESPLATIs
    536896438U,	// QVFABS
    536896438U,	// QVFABSs
    20155U,	// QVFADD
    25690U,	// QVFADDS
    25690U,	// QVFADDSs
    536891243U,	// QVFCFID
    536896684U,	// QVFCFIDS
    536897762U,	// QVFCFIDU
    536897077U,	// QVFCFIDUS
    536891243U,	// QVFCFIDb
    25049U,	// QVFCMPEQ
    25049U,	// QVFCMPEQb
    25049U,	// QVFCMPEQbs
    26537U,	// QVFCMPGT
    26537U,	// QVFCMPGTb
    26537U,	// QVFCMPGTbs
    26615U,	// QVFCMPLT
    26615U,	// QVFCMPLTb
    26615U,	// QVFCMPLTbs
    22881U,	// QVFCPSGN
    22881U,	// QVFCPSGNs
    536891262U,	// QVFCTID
    536897772U,	// QVFCTIDU
    536900506U,	// QVFCTIDUZ
    536900359U,	// QVFCTIDZ
    536891262U,	// QVFCTIDb
    536898527U,	// QVFCTIW
    536897905U,	// QVFCTIWU
    536900517U,	// QVFCTIWUZ
    536900528U,	// QVFCTIWZ
    22236U,	// QVFLOGICAL
    22236U,	// QVFLOGICALb
    22236U,	// QVFLOGICALs
    20172U,	// QVFMADD
    25699U,	// QVFMADDS
    25699U,	// QVFMADDSs
    536896244U,	// QVFMR
    536896244U,	// QVFMRb
    536896244U,	// QVFMRs
    19817U,	// QVFMSUB
    25669U,	// QVFMSUBS
    25669U,	// QVFMSUBSs
    22381U,	// QVFMUL
    26082U,	// QVFMULS
    26082U,	// QVFMULSs
    536896464U,	// QVFNABS
    536896464U,	// QVFNABSs
    536892034U,	// QVFNEG
    536892034U,	// QVFNEGs
    20191U,	// QVFNMADD
    25709U,	// QVFNMADDS
    25709U,	// QVFNMADDSs
    19836U,	// QVFNMSUB
    25679U,	// QVFNMSUBS
    25679U,	// QVFNMSUBSs
    22670U,	// QVFPERM
    22670U,	// QVFPERMs
    536891700U,	// QVFRE
    536896792U,	// QVFRES
    536896792U,	// QVFRESs
    536893512U,	// QVFRIM
    536893512U,	// QVFRIMs
    536893810U,	// QVFRIN
    536893810U,	// QVFRINs
    536895082U,	// QVFRIP
    536895082U,	// QVFRIPs
    536900441U,	// QVFRIZ
    536900441U,	// QVFRIZs
    536895783U,	// QVFRSP
    536895783U,	// QVFRSPs
    536891726U,	// QVFRSQRTE
    536896800U,	// QVFRSQRTES
    536896800U,	// QVFRSQRTESs
    22288U,	// QVFSEL
    22288U,	// QVFSELb
    22288U,	// QVFSELbb
    22288U,	// QVFSELbs
    19800U,	// QVFSUB
    25660U,	// QVFSUBS
    25660U,	// QVFSUBSs
    22870U,	// QVFTSTNAN
    22870U,	// QVFTSTNANb
    22870U,	// QVFTSTNANbs
    20228U,	// QVFXMADD
    25749U,	// QVFXMADDS
    22406U,	// QVFXMUL
    26091U,	// QVFXMULS
    20201U,	// QVFXXCPNMADD
    25720U,	// QVFXXCPNMADDS
    20238U,	// QVFXXMADD
    25760U,	// QVFXXMADDS
    20215U,	// QVFXXNPMADD
    25735U,	// QVFXXNPMADDS
    335565816U,	// QVGPCI
    604008890U,	// QVLFCDUX
    603999133U,	// QVLFCDUXA
    604008166U,	// QVLFCDX
    603999053U,	// QVLFCDXA
    604008976U,	// QVLFCSUX
    603999177U,	// QVLFCSUXA
    604008701U,	// QVLFCSX
    603999093U,	// QVLFCSXA
    604008701U,	// QVLFCSXs
    218132943U,	// QVLFDUX
    603999156U,	// QVLFDUXA
    604008202U,	// QVLFDX
    603999074U,	// QVLFDXA
    604008202U,	// QVLFDXb
    604008111U,	// QVLFIWAX
    603999042U,	// QVLFIWAXA
    604009165U,	// QVLFIWZX
    603999232U,	// QVLFIWZXA
    218133029U,	// QVLFSUX
    603999200U,	// QVLFSUXA
    604008735U,	// QVLFSX
    603999114U,	// QVLFSXA
    604008735U,	// QVLFSXb
    604008735U,	// QVLFSXs
    604008219U,	// QVLPCLDX
    604008752U,	// QVLPCLSX
    8417584U,	// QVLPCLSXint
    604008229U,	// QVLPCRDX
    604008772U,	// QVLPCRSX
    604008900U,	// QVSTFCDUX
    603999144U,	// QVSTFCDUXA
    604001943U,	// QVSTFCDUXI
    603998945U,	// QVSTFCDUXIA
    604008175U,	// QVSTFCDX
    603999063U,	// QVSTFCDXA
    604001901U,	// QVSTFCDXI
    603998899U,	// QVSTFCDXIA
    604008986U,	// QVSTFCSUX
    603999188U,	// QVSTFCSUXA
    604001966U,	// QVSTFCSUXI
    603998970U,	// QVSTFCSUXIA
    604008710U,	// QVSTFCSX
    603999103U,	// QVSTFCSXA
    604001922U,	// QVSTFCSXI
    603998922U,	// QVSTFCSXIA
    604008710U,	// QVSTFCSXs
    218313176U,	// QVSTFDUX
    603999166U,	// QVSTFDUXA
    604001955U,	// QVSTFDUXI
    603998958U,	// QVSTFDUXIA
    604008210U,	// QVSTFDX
    603999083U,	// QVSTFDXA
    604001912U,	// QVSTFDXI
    603998911U,	// QVSTFDXIA
    604008210U,	// QVSTFDXb
    604009110U,	// QVSTFIWX
    603999221U,	// QVSTFIWXA
    218313262U,	// QVSTFSUX
    603999210U,	// QVSTFSUXA
    604001978U,	// QVSTFSUXI
    603998983U,	// QVSTFSUXIA
    218313262U,	// QVSTFSUXs
    604008743U,	// QVSTFSX
    603999123U,	// QVSTFSXA
    604001933U,	// QVSTFSXI
    603998934U,	// QVSTFSXIA
    604008743U,	// QVSTFSXs
    15559U,	// RESTORE_CR
    15703U,	// RESTORE_CRBIT
    15430U,	// RESTORE_VRSAVE
    15980U,	// RFCI
    15991U,	// RFDI
    265247U,	// RFEBB
    15996U,	// RFI
    15963U,	// RFID
    15985U,	// RFMCI
    22257U,	// RLDCL
    17584U,	// RLDCLo
    25244U,	// RLDCR
    17891U,	// RLDCRo
    19973U,	// RLDIC
    22264U,	// RLDICL
    22264U,	// RLDICL_32
    22264U,	// RLDICL_32_64
    17592U,	// RLDICL_32o
    17592U,	// RLDICLo
    25264U,	// RLDICR
    25264U,	// RLDICR_32
    17899U,	// RLDICRo
    16959U,	// RLDICo
    3355464880U,	// RLDIMI
    3355460693U,	// RLDIMIo
    3892335800U,	// RLWIMI
    3892335800U,	// RLWIMI8
    3892331614U,	// RLWIMI8o
    3892331614U,	// RLWIMIo
    22616U,	// RLWINM
    22616U,	// RLWINM8
    17651U,	// RLWINM8o
    17651U,	// RLWINMo
    22625U,	// RLWNM
    22625U,	// RLWNM8
    17660U,	// RLWNM8o
    17660U,	// RLWNMo
    15133U,	// ReadTB
    544345U,	// SC
    14435U,	// SELECT_CC_F16
    14357U,	// SELECT_CC_F4
    14711U,	// SELECT_CC_F8
    14382U,	// SELECT_CC_I4
    14756U,	// SELECT_CC_I8
    15151U,	// SELECT_CC_QBRC
    15180U,	// SELECT_CC_QFRC
    15269U,	// SELECT_CC_QSRC
    15393U,	// SELECT_CC_SPE
    14328U,	// SELECT_CC_SPE4
    15240U,	// SELECT_CC_VRRC
    15209U,	// SELECT_CC_VSFRC
    15329U,	// SELECT_CC_VSRC
    15298U,	// SELECT_CC_VSSRC
    14450U,	// SELECT_F16
    14371U,	// SELECT_F4
    14725U,	// SELECT_F8
    14396U,	// SELECT_I4
    14930U,	// SELECT_I8
    15167U,	// SELECT_QBRC
    15196U,	// SELECT_QFRC
    15285U,	// SELECT_QSRC
    15408U,	// SELECT_SPE
    14344U,	// SELECT_SPE4
    15256U,	// SELECT_VRRC
    15226U,	// SELECT_VSFRC
    15345U,	// SELECT_VSRC
    15315U,	// SELECT_VSSRC
    536890598U,	// SETB
    15883U,	// SLBIA
    545040U,	// SLBIE
    536892010U,	// SLBIEG
    536891624U,	// SLBMFEE
    536897956U,	// SLBMFEV
    536891707U,	// SLBMTE
    15911U,	// SLBSYNC
    20414U,	// SLD
    17100U,	// SLDo
    27664U,	// SLW
    27664U,	// SLW8
    18296U,	// SLW8o
    18296U,	// SLWo
    33584058U,	// SPELWZ
    604009184U,	// SPELWZX
    33582508U,	// SPESTW
    604009129U,	// SPESTWX
    15571U,	// SPILL_CR
    15718U,	// SPILL_CRBIT
    15446U,	// SPILL_VRSAVE
    20117U,	// SRAD
    21504U,	// SRADI
    21504U,	// SRADI_32
    17402U,	// SRADIo
    17007U,	// SRADo
    27493U,	// SRAW
    22002U,	// SRAWI
    17511U,	// SRAWIo
    18255U,	// SRAWo
    20500U,	// SRD
    17120U,	// SRDo
    27919U,	// SRW
    27919U,	// SRW8
    18302U,	// SRW8o
    18302U,	// SRWo
    33574158U,	// STB
    33574158U,	// STB8
    28560U,	// STBCIX
    603998161U,	// STBCX
    604008486U,	// STBEPX
    201533630U,	// STBU
    201533630U,	// STBU8
    218313139U,	// STBUX
    218313139U,	// STBUX8
    604008160U,	// STBX
    604008160U,	// STBX8
    28384U,	// STBXTLS
    28384U,	// STBXTLS_
    28384U,	// STBXTLS_32
    33575030U,	// STD
    26412U,	// STDAT
    604008618U,	// STDBRX
    28575U,	// STDCIX
    603998169U,	// STDCX
    201533691U,	// STDU
    218313192U,	// STDUX
    604008254U,	// STDX
    28478U,	// STDXTLS
    28478U,	// STDXTLS_
    33574735U,	// STFD
    604008502U,	// STFDEPX
    201533642U,	// STFDU
    218313178U,	// STFDUX
    604008212U,	// STFDX
    604009112U,	// STFIWX
    33580358U,	// STFS
    201533765U,	// STFSU
    218313264U,	// STFSUX
    604008745U,	// STFSX
    33575784U,	// STH
    33575784U,	// STH8
    604008633U,	// STHBRX
    28583U,	// STHCIX
    603998177U,	// STHCX
    604008518U,	// STHEPX
    201533720U,	// STHU
    201533720U,	// STHU8
    218313206U,	// STHUX
    218313206U,	// STHUX8
    604008330U,	// STHX
    604008330U,	// STHX8
    28554U,	// STHXTLS
    28554U,	// STHXTLS_
    28554U,	// STHXTLS_32
    33582106U,	// STMW
    16075U,	// STOP
    22113U,	// STSWI
    604008143U,	// STVEBX
    604008313U,	// STVEHX
    604009102U,	// STVEWX
    604009059U,	// STVX
    604002210U,	// STVXL
    33582508U,	// STW
    33582508U,	// STW8
    26490U,	// STWAT
    604008658U,	// STWBRX
    28591U,	// STWCIX
    603998185U,	// STWCX
    604008533U,	// STWEPX
    201533827U,	// STWU
    201533827U,	// STWU8
    218313282U,	// STWUX
    218313282U,	// STWUX8
    604009129U,	// STWX
    604009129U,	// STWX8
    29353U,	// STWXTLS
    29353U,	// STWXTLS_
    29353U,	// STWXTLS_32
    33574992U,	// STXSD
    604008246U,	// STXSDX
    604008151U,	// STXSIBX
    604008151U,	// STXSIBXv
    604008321U,	// STXSIHX
    604008321U,	// STXSIHXv
    604009120U,	// STXSIWX
    33579344U,	// STXSSP
    604008574U,	// STXSSPX
    33581570U,	// STXV
    604008069U,	// STXVB16X
    604008034U,	// STXVD2X
    604008087U,	// STXVH8X
    22421U,	// STXVL
    22329U,	// STXVLL
    604008051U,	// STXVW4X
    604009071U,	// STXVX
    20876U,	// SUBF
    20876U,	// SUBF8
    17285U,	// SUBF8o
    19952U,	// SUBFC
    19952U,	// SUBFC8
    16935U,	// SUBFC8o
    16935U,	// SUBFCo
    20728U,	// SUBFE
    20728U,	// SUBFE8
    17199U,	// SUBFE8o
    17199U,	// SUBFEo
    19980U,	// SUBFIC
    19980U,	// SUBFIC8
    536891685U,	// SUBFME
    536891685U,	// SUBFME8
    536888127U,	// SUBFME8o
    536888127U,	// SUBFMEo
    536891774U,	// SUBFZE
    536891774U,	// SUBFZE8
    536888188U,	// SUBFZE8o
    536888188U,	// SUBFZEo
    17285U,	// SUBFo
    544317U,	// SYNC
    542425U,	// TABORT
    180764U,	// TABORTDC
    181218U,	// TABORTDCI
    180836U,	// TABORTWC
    181230U,	// TABORTWCI
    592924U,	// TAILB
    592924U,	// TAILB8
    608750U,	// TAILBA
    608750U,	// TAILBA8
    16097U,	// TAILBCTR
    16097U,	// TAILBCTR8
    263469U,	// TBEGIN
    15676U,	// TBEGIN_RET
    546501U,	// TCHECK
    15664U,	// TCHECK_RET
    538003813U,	// TCRETURNai
    538003720U,	// TCRETURNai8
    537988731U,	// TCRETURNdi
    537987350U,	// TCRETURNdi8
    537944706U,	// TCRETURNri
    537938212U,	// TCRETURNri8
    184414U,	// TD
    185432U,	// TDI
    262873U,	// TEND
    15889U,	// TLBIA
    661328151U,	// TLBIE
    546560U,	// TLBIEL
    536899238U,	// TLBIVAX
    544657U,	// TLBLD
    545936U,	// TLBLI
    15968U,	// TLBRE
    20781U,	// TLBRE2
    536899830U,	// TLBSX
    28918U,	// TLBSX2
    18417U,	// TLBSX2D
    15919U,	// TLBSYNC
    15974U,	// TLBWE
    20832U,	// TLBWE2
    16066U,	// TRAP
    13510U,	// TRECHKPT
    541921U,	// TRECLAIM
    263702U,	// TSR
    191872U,	// TW
    185960U,	// TWI
    536889650U,	// UPDATE_VRSAVE
    15548U,	// UpdateGBR
    19731U,	// VABSDUB
    21357U,	// VABSDUH
    28106U,	// VABSDUW
    25166U,	// VADDCUQ
    28090U,	// VADDCUW
    25197U,	// VADDECUQ
    22660U,	// VADDEUQM
    24025U,	// VADDFP
    25623U,	// VADDSBS
    25974U,	// VADDSHS
    26273U,	// VADDSWS
    22480U,	// VADDUBM
    25651U,	// VADDUBS
    22508U,	// VADDUDM
    22547U,	// VADDUHM
    26002U,	// VADDUHS
    22641U,	// VADDUQM
    22730U,	// VADDUWM
    26300U,	// VADDUWS
    20478U,	// VAND
    19945U,	// VANDC
    19606U,	// VAVGSB
    21244U,	// VAVGSH
    27940U,	// VAVGSW
    19749U,	// VAVGUB
    21375U,	// VAVGUH
    28124U,	// VAVGUW
    20419U,	// VBPERMD
    25120U,	// VBPERMQ
    134246680U,	// VCFSX
    536899864U,	// VCFSX_0
    134246895U,	// VCFUX
    536900079U,	// VCFUX_0
    25298U,	// VCIPHER
    26726U,	// VCIPHERLAST
    536890815U,	// VCLZB
    536891564U,	// VCLZD
    536892362U,	// VCLZH
    536890406U,	// VCLZLSBB
    536899130U,	// VCLZW
    23989U,	// VCMPBFP
    17770U,	// VCMPBFPo
    24088U,	// VCMPEQFP
    17791U,	// VCMPEQFPo
    19774U,	// VCMPEQUB
    16823U,	// VCMPEQUBo
    20618U,	// VCMPEQUD
    17137U,	// VCMPEQUDo
    21400U,	// VCMPEQUH
    17345U,	// VCMPEQUHo
    28149U,	// VCMPEQUW
    18327U,	// VCMPEQUWo
    24042U,	// VCMPGEFP
    17780U,	// VCMPGEFPo
    24098U,	// VCMPGTFP
    17802U,	// VCMPGTFPo
    19659U,	// VCMPGTSB
    16804U,	// VCMPGTSBo
    20536U,	// VCMPGTSD
    17126U,	// VCMPGTSDo
    21297U,	// VCMPGTSH
    17326U,	// VCMPGTSHo
    28003U,	// VCMPGTSW
    18308U,	// VCMPGTSWo
    19875U,	// VCMPGTUB
    16888U,	// VCMPGTUBo
    20628U,	// VCMPGTUD
    17148U,	// VCMPGTUDo
    21422U,	// VCMPGTUH
    17356U,	// VCMPGTUHo
    28184U,	// VCMPGTUW
    18338U,	// VCMPGTUWo
    19514U,	// VCMPNEB
    16794U,	// VCMPNEBo
    21176U,	// VCMPNEH
    17316U,	// VCMPNEHo
    27547U,	// VCMPNEW
    18262U,	// VCMPNEWo
    19893U,	// VCMPNEZB
    16899U,	// VCMPNEZBo
    21440U,	// VCMPNEZH
    17367U,	// VCMPNEZHo
    28208U,	// VCMPNEZW
    18356U,	// VCMPNEZWo
    134244118U,	// VCTSXS
    536897302U,	// VCTSXS_0
    134244126U,	// VCTUXS
    536897310U,	// VCTUXS_0
    536890822U,	// VCTZB
    536891579U,	// VCTZD
    536892369U,	// VCTZH
    536890416U,	// VCTZLSBB
    536899147U,	// VCTZW
    27121U,	// VEQV
    536894971U,	// VEXPTEFP
    1207980119U,	// VEXTRACTD
    1207979415U,	// VEXTRACTUB
    1207980962U,	// VEXTRACTUH
    1207987711U,	// VEXTRACTUW
    536890973U,	// VEXTSB2D
    536890973U,	// VEXTSB2Ds
    536898056U,	// VEXTSB2W
    536898056U,	// VEXTSB2Ws
    536890983U,	// VEXTSH2D
    536890983U,	// VEXTSH2Ds
    536898066U,	// VEXTSH2W
    536898066U,	// VEXTSH2Ws
    536890993U,	// VEXTSW2D
    536890993U,	// VEXTSW2Ds
    28640U,	// VEXTUBLX
    28865U,	// VEXTUBRX
    28650U,	// VEXTUHLX
    28890U,	// VEXTUHRX
    28660U,	// VEXTUWLX
    28900U,	// VEXTUWRX
    536891035U,	// VGBBD
    352341252U,	// VINSERTB
    1207980140U,	// VINSERTD
    352342878U,	// VINSERTH
    1207987607U,	// VINSERTW
    536894945U,	// VLOGEFP
    24016U,	// VMADDFP
    24108U,	// VMAXFP
    19678U,	// VMAXSB
    20546U,	// VMAXSD
    21316U,	// VMAXSH
    28020U,	// VMAXSW
    19885U,	// VMAXUB
    20638U,	// VMAXUD
    21432U,	// VMAXUH
    28194U,	// VMAXUW
    25951U,	// VMHADDSHS
    25962U,	// VMHRADDSHS
    24080U,	// VMINFP
    19642U,	// VMINSB
    20528U,	// VMINSD
    21280U,	// VMINSH
    27986U,	// VMINSW
    19757U,	// VMINUB
    20610U,	// VMINUD
    21383U,	// VMINUH
    28132U,	// VMINUW
    22536U,	// VMLADDUHM
    27539U,	// VMRGEW
    19523U,	// VMRGHB
    21185U,	// VMRGHH
    27582U,	// VMRGHW
    19541U,	// VMRGLB
    21193U,	// VMRGLH
    27624U,	// VMRGLW
    27897U,	// VMRGOW
    22461U,	// VMSUMMBM
    22517U,	// VMSUMSHM
    25983U,	// VMSUMSHS
    22489U,	// VMSUMUBM
    22556U,	// VMSUMUHM
    26011U,	// VMSUMUHS
    536896058U,	// VMUL10CUQ
    25175U,	// VMUL10ECUQ
    25207U,	// VMUL10EUQ
    536896048U,	// VMUL10UQ
    19597U,	// VMULESB
    21235U,	// VMULESH
    27931U,	// VMULESW
    19740U,	// VMULEUB
    21366U,	// VMULEUH
    28115U,	// VMULEUW
    19650U,	// VMULOSB
    21288U,	// VMULOSH
    27994U,	// VMULOSW
    19765U,	// VMULOUB
    21391U,	// VMULOUH
    28140U,	// VMULOUW
    22739U,	// VMULUWM
    20463U,	// VNAND
    25288U,	// VNCIPHER
    26712U,	// VNCIPHERLAST
    536891221U,	// VNEGD
    536898487U,	// VNEGW
    23998U,	// VNMSUBFP
    25393U,	// VNOR
    25406U,	// VOR
    20051U,	// VORC
    22679U,	// VPERM
    25353U,	// VPERMR
    25419U,	// VPERMXOR
    28774U,	// VPKPX
    26110U,	// VPKSDSS
    26176U,	// VPKSDUS
    26119U,	// VPKSHSS
    26194U,	// VPKSHUS
    26128U,	// VPKSWSS
    26212U,	// VPKSWUS
    22694U,	// VPKUDUM
    26185U,	// VPKUDUS
    22703U,	// VPKUHUM
    26203U,	// VPKUHUS
    22712U,	// VPKUWUM
    26221U,	// VPKUWUS
    19561U,	// VPMSUMB
    20428U,	// VPMSUMD
    21213U,	// VPMSUMH
    27680U,	// VPMSUMW
    536890618U,	// VPOPCNTB
    536891490U,	// VPOPCNTD
    536892244U,	// VPOPCNTH
    536898957U,	// VPOPCNTW
    536891042U,	// VPRTYBD
    536895942U,	// VPRTYBQ
    536898411U,	// VPRTYBW
    536894964U,	// VREFP
    536893478U,	// VRFIM
    536893803U,	// VRFIN
    536895048U,	// VRFIP
    536900407U,	// VRFIZ
    19549U,	// VRLB
    20407U,	// VRLD
    21672U,	// VRLDMI
    22608U,	// VRLDNM
    21201U,	// VRLH
    27656U,	// VRLW
    21784U,	// VRLWMI
    22624U,	// VRLWNM
    536894981U,	// VRSQRTEFP
    536899588U,	// VSBOX
    22302U,	// VSEL
    20104U,	// VSHASIGMAD
    27480U,	// VSHASIGMAW
    22360U,	// VSL
    19555U,	// VSLB
    20413U,	// VSLD
    21823U,	// VSLDOI
    21207U,	// VSLH
    23002U,	// VSLO
    27099U,	// VSLV
    27663U,	// VSLW
    134237426U,	// VSPLTB
    134237426U,	// VSPLTBs
    134239052U,	// VSPLTH
    134239052U,	// VSPLTHs
    151014567U,	// VSPLTISB
    151016205U,	// VSPLTISH
    151022901U,	// VSPLTISW
    134245756U,	// VSPLTW
    25484U,	// VSR
    19480U,	// VSRAB
    20116U,	// VSRAD
    21154U,	// VSRAH
    27492U,	// VSRAW
    19591U,	// VSRB
    20507U,	// VSRD
    21229U,	// VSRH
    23116U,	// VSRO
    27127U,	// VSRV
    27918U,	// VSRW
    25157U,	// VSUBCUQ
    28081U,	// VSUBCUW
    25187U,	// VSUBECUQ
    22650U,	// VSUBEUQM
    24008U,	// VSUBFP
    25614U,	// VSUBSBS
    25942U,	// VSUBSHS
    26264U,	// VSUBSWS
    22471U,	// VSUBUBM
    25642U,	// VSUBUBS
    22499U,	// VSUBUDM
    22527U,	// VSUBUHM
    25993U,	// VSUBUHS
    22632U,	// VSUBUQM
    22721U,	// VSUBUWM
    26291U,	// VSUBUWS
    26254U,	// VSUM2SWS
    25604U,	// VSUM4SBS
    25932U,	// VSUM4SHS
    25632U,	// VSUM4UBS
    26282U,	// VSUMSWS
    536899677U,	// VUPKHPX
    536890526U,	// VUPKHSB
    536892164U,	// VUPKHSH
    536898860U,	// VUPKHSW
    536899693U,	// VUPKLPX
    536890545U,	// VUPKLSB
    536892183U,	// VUPKLSH
    536898879U,	// VUPKLSW
    25437U,	// VXOR
    117465949U,	// V_SET0
    117465949U,	// V_SET0B
    117465949U,	// V_SET0H
    8940853U,	// V_SETALLONES
    8940853U,	// V_SETALLONESB
    8940853U,	// V_SETALLONESH
    550887U,	// WAIT
    545009U,	// WRTEE
    545885U,	// WRTEEI
    25414U,	// XOR
    25414U,	// XOR8
    17928U,	// XOR8o
    21863U,	// XORI
    21863U,	// XORI8
    26058U,	// XORIS
    26058U,	// XORIS8
    17928U,	// XORo
    536894671U,	// XSABSDP
    536895290U,	// XSABSQP
    23283U,	// XSADDDP
    24248U,	// XSADDQP
    23075U,	// XSADDQPO
    24548U,	// XSADDSP
    23717U,	// XSCMPEQDP
    23685U,	// XSCMPEXPDP
    24346U,	// XSCMPEXPQP
    23345U,	// XSCMPGEDP
    23777U,	// XSCMPGTDP
    23615U,	// XSCMPODP
    24316U,	// XSCMPOQP
    23841U,	// XSCMPUDP
    24397U,	// XSCMPUQP
    23575U,	// XSCPSGNDP
    24305U,	// XSCPSGNQP
    536895028U,	// XSCVDPHP
    536895238U,	// XSCVDPQP
    536895722U,	// XSCVDPSP
    536893845U,	// XSCVDPSPN
    536896712U,	// XSCVDPSXDS
    536896712U,	// XSCVDPSXDSs
    536897230U,	// XSCVDPSXWS
    536897230U,	// XSCVDPSXWSs
    536896748U,	// XSCVDPUXDS
    536896748U,	// XSCVDPUXDSs
    536897266U,	// XSCVDPUXWS
    536897266U,	// XSCVDPUXWSs
    536894537U,	// XSCVHPDP
    536894547U,	// XSCVQPDP
    536893920U,	// XSCVQPDPO
    536900380U,	// XSCVQPSDZ
    536900561U,	// XSCVQPSWZ
    536900391U,	// XSCVQPUDZ
    536900572U,	// XSCVQPUWZ
    536895169U,	// XSCVSDQP
    536894557U,	// XSCVSPDP
    536893834U,	// XSCVSPDPN
    536894213U,	// XSCVSXDDP
    536895478U,	// XSCVSXDSP
    536895179U,	// XSCVUDQP
    536894235U,	// XSCVUXDDP
    536895500U,	// XSCVUXDSP
    23851U,	// XSDIVDP
    24407U,	// XSDIVQP
    23106U,	// XSDIVQPO
    24962U,	// XSDIVSP
    23665U,	// XSIEXPDP
    24336U,	// XSIEXPQP
    1744853665U,	// XSMADDADP
    1744854950U,	// XSMADDASP
    1744854017U,	// XSMADDMDP
    1744855232U,	// XSMADDMSP
    1744854702U,	// XSMADDQP
    1744853528U,	// XSMADDQPO
    23273U,	// XSMAXCDP
    23911U,	// XSMAXDP
    23455U,	// XSMAXJDP
    23263U,	// XSMINCDP
    23597U,	// XSMINDP
    23445U,	// XSMINJDP
    1744853619U,	// XSMSUBADP
    1744854904U,	// XSMSUBASP
    1744853971U,	// XSMSUBMDP
    1744855186U,	// XSMSUBMSP
    1744854661U,	// XSMSUBQP
    1744853495U,	// XSMSUBQPO
    23465U,	// XSMULDP
    24296U,	// XSMULQP
    23085U,	// XSMULQPO
    24680U,	// XSMULSP
    536894651U,	// XSNABSDP
    536895280U,	// XSNABSQP
    536894319U,	// XSNEGDP
    536895189U,	// XSNEGQP
    1744853641U,	// XSNMADDADP
    1744854926U,	// XSNMADDASP
    1744853993U,	// XSNMADDMDP
    1744855208U,	// XSNMADDMSP
    1744854691U,	// XSNMADDQP
    1744853516U,	// XSNMADDQPO
    1744853595U,	// XSNMSUBADP
    1744854880U,	// XSNMSUBASP
    1744853947U,	// XSNMSUBMDP
    1744855162U,	// XSNMSUBMSP
    1744854650U,	// XSNMSUBQP
    1744853483U,	// XSNMSUBQPO
    536892743U,	// XSRDPI
    536890900U,	// XSRDPIC
    536893485U,	// XSRDPIM
    536895055U,	// XSRDPIP
    536900414U,	// XSRDPIZ
    536894279U,	// XSREDP
    536895533U,	// XSRESP
    283991U,	// XSRQPI
    290767U,	// XSRQPIX
    287165U,	// XSRQPXP
    536895791U,	// XSRSP
    536894295U,	// XSRSQRTEDP
    536895549U,	// XSRSQRTESP
    536894711U,	// XSSQRTDP
    536895299U,	// XSSQRTQP
    536894007U,	// XSSQRTQPO
    536895843U,	// XSSQRTSP
    23223U,	// XSSUBDP
    24207U,	// XSSUBQP
    23042U,	// XSSUBQPO
    24508U,	// XSSUBSP
    23860U,	// XSTDIVDP
    536894721U,	// XSTSQRTDP
    2281724617U,	// XSTSTDCDP
    2281725592U,	// XSTSTDCQP
    2281725902U,	// XSTSTDCSP
    536894609U,	// XSXEXPDP
    536895270U,	// XSXEXPQP
    536894337U,	// XSXSIGDP
    536895198U,	// XSXSIGQP
    536894680U,	// XVABSDP
    536895808U,	// XVABSSP
    23292U,	// XVADDDP
    24557U,	// XVADDSP
    23728U,	// XVCMPEQDP
    17746U,	// XVCMPEQDPo
    24860U,	// XVCMPEQSP
    17832U,	// XVCMPEQSPo
    23356U,	// XVCMPGEDP
    17734U,	// XVCMPGEDPo
    24610U,	// XVCMPGESP
    17820U,	// XVCMPGESPo
    23788U,	// XVCMPGTDP
    17758U,	// XVCMPGTDPo
    24920U,	// XVCMPGTSP
    17851U,	// XVCMPGTSPo
    23586U,	// XVCPSGNDP
    24790U,	// XVCPSGNSP
    536895732U,	// XVCVDPSP
    536896724U,	// XVCVDPSXDS
    536897242U,	// XVCVDPSXWS
    536896760U,	// XVCVDPUXDS
    536897278U,	// XVCVDPUXWS
    536895742U,	// XVCVHPSP
    536894567U,	// XVCVSPDP
    536895038U,	// XVCVSPHP
    536896736U,	// XVCVSPSXDS
    536897254U,	// XVCVSPSXWS
    536896772U,	// XVCVSPUXDS
    536897290U,	// XVCVSPUXWS
    536894224U,	// XVCVSXDDP
    536895489U,	// XVCVSXDSP
    536894801U,	// XVCVSXWDP
    536895902U,	// XVCVSXWSP
    536894246U,	// XVCVUXDDP
    536895511U,	// XVCVUXDSP
    536894812U,	// XVCVUXWDP
    536895913U,	// XVCVUXWSP
    23880U,	// XVDIVDP
    24981U,	// XVDIVSP
    23675U,	// XVIEXPDP
    24840U,	// XVIEXPSP
    1744853676U,	// XVMADDADP
    1744854961U,	// XVMADDASP
    1744854028U,	// XVMADDMDP
    1744855243U,	// XVMADDMSP
    23920U,	// XVMAXDP
    25012U,	// XVMAXSP
    23606U,	// XVMINDP
    24801U,	// XVMINSP
    1744853630U,	// XVMSUBADP
    1744854915U,	// XVMSUBASP
    1744853982U,	// XVMSUBMDP
    1744855197U,	// XVMSUBMSP
    23474U,	// XVMULDP
    24689U,	// XVMULSP
    536894661U,	// XVNABSDP
    536895798U,	// XVNABSSP
    536894328U,	// XVNEGDP
    536895573U,	// XVNEGSP
    1744853653U,	// XVNMADDADP
    1744854938U,	// XVNMADDASP
    1744854005U,	// XVNMADDMDP
    1744855220U,	// XVNMADDMSP
    1744853607U,	// XVNMSUBADP
    1744854892U,	// XVNMSUBASP
    1744853959U,	// XVNMSUBMDP
    1744855174U,	// XVNMSUBMSP
    536892751U,	// XVRDPI
    536890909U,	// XVRDPIC
    536893494U,	// XVRDPIM
    536895064U,	// XVRDPIP
    536900423U,	// XVRDPIZ
    536894287U,	// XVREDP
    536895541U,	// XVRESP
    536892767U,	// XVRSPI
    536890918U,	// XVRSPIC
    536893503U,	// XVRSPIM
    536895073U,	// XVRSPIP
    536900432U,	// XVRSPIZ
    536894307U,	// XVRSQRTEDP
    536895561U,	// XVRSQRTESP
    536894743U,	// XVSQRTDP
    536895864U,	// XVSQRTSP
    23232U,	// XVSUBDP
    24517U,	// XVSUBSP
    23870U,	// XVTDIVDP
    24971U,	// XVTDIVSP
    536894732U,	// XVTSQRTDP
    536895853U,	// XVTSQRTSP
    2281724628U,	// XVTSTDCDP
    2281725913U,	// XVTSTDCSP
    536894619U,	// XVXEXPDP
    536895762U,	// XVXEXPSP
    536894347U,	// XVXSIGDP
    536895582U,	// XVXSIGSP
    536891402U,	// XXBRD
    536892134U,	// XXBRH
    536896041U,	// XXBRQ
    536898823U,	// XXBRW
    28171U,	// XXEXTRACTUW
    2818600353U,	// XXINSERTW
    20437U,	// XXLAND
    19927U,	// XXLANDC
    27105U,	// XXLEQV
    20445U,	// XXLNAND
    25377U,	// XXLNOR
    25370U,	// XXLOR
    20035U,	// XXLORC
    25370U,	// XXLORf
    25411U,	// XXLXOR
    117465923U,	// XXLXORdpz
    117465923U,	// XXLXORspz
    117465923U,	// XXLXORz
    27590U,	// XXMRGHW
    27632U,	// XXMRGLW
    22686U,	// XXPERM
    21543U,	// XXPERMDI
    21543U,	// XXPERMDIs
    25361U,	// XXPERMR
    22308U,	// XXSEL
    22009U,	// XXSLDWI
    22009U,	// XXSLDWIs
    369118283U,	// XXSPLTIB
    28036U,	// XXSPLTW
    28036U,	// XXSPLTWs
    183757U,	// gBC
    182770U,	// gBCA
    9747975U,	// gBCAat
    189329U,	// gBCCTR
    186184U,	// gBCCTRL
    186092U,	// gBCL
    183064U,	// gBCLA
    9747991U,	// gBCLAat
    189147U,	// gBCLR
    186177U,	// gBCLRL
    10272384U,	// gBCLat
    10272292U,	// gBCat
  };

  static const uint16_t OpInfo1[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// ANNOTATION_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    0U,	// DBG_VALUE
    0U,	// DBG_LABEL
    0U,	// REG_SEQUENCE
    0U,	// COPY
    0U,	// BUNDLE
    0U,	// LIFETIME_START
    0U,	// LIFETIME_END
    0U,	// STACKMAP
    0U,	// FENTRY_CALL
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_OP
    0U,	// PATCHABLE_OP
    0U,	// PATCHABLE_FUNCTION_ENTER
    0U,	// PATCHABLE_RET
    0U,	// PATCHABLE_FUNCTION_EXIT
    0U,	// PATCHABLE_TAIL_CALL
    0U,	// PATCHABLE_EVENT_CALL
    0U,	// PATCHABLE_TYPED_EVENT_CALL
    0U,	// ICALL_BRANCH_FUNNEL
    0U,	// G_ADD
    0U,	// G_SUB
    0U,	// G_MUL
    0U,	// G_SDIV
    0U,	// G_UDIV
    0U,	// G_SREM
    0U,	// G_UREM
    0U,	// G_AND
    0U,	// G_OR
    0U,	// G_XOR
    0U,	// G_IMPLICIT_DEF
    0U,	// G_PHI
    0U,	// G_FRAME_INDEX
    0U,	// G_GLOBAL_VALUE
    0U,	// G_EXTRACT
    0U,	// G_UNMERGE_VALUES
    0U,	// G_INSERT
    0U,	// G_MERGE_VALUES
    0U,	// G_PTRTOINT
    0U,	// G_INTTOPTR
    0U,	// G_BITCAST
    0U,	// G_LOAD
    0U,	// G_SEXTLOAD
    0U,	// G_ZEXTLOAD
    0U,	// G_STORE
    0U,	// G_ATOMIC_CMPXCHG_WITH_SUCCESS
    0U,	// G_ATOMIC_CMPXCHG
    0U,	// G_ATOMICRMW_XCHG
    0U,	// G_ATOMICRMW_ADD
    0U,	// G_ATOMICRMW_SUB
    0U,	// G_ATOMICRMW_AND
    0U,	// G_ATOMICRMW_NAND
    0U,	// G_ATOMICRMW_OR
    0U,	// G_ATOMICRMW_XOR
    0U,	// G_ATOMICRMW_MAX
    0U,	// G_ATOMICRMW_MIN
    0U,	// G_ATOMICRMW_UMAX
    0U,	// G_ATOMICRMW_UMIN
    0U,	// G_BRCOND
    0U,	// G_BRINDIRECT
    0U,	// G_INTRINSIC
    0U,	// G_INTRINSIC_W_SIDE_EFFECTS
    0U,	// G_ANYEXT
    0U,	// G_TRUNC
    0U,	// G_CONSTANT
    0U,	// G_FCONSTANT
    0U,	// G_VASTART
    0U,	// G_VAARG
    0U,	// G_SEXT
    0U,	// G_ZEXT
    0U,	// G_SHL
    0U,	// G_LSHR
    0U,	// G_ASHR
    0U,	// G_ICMP
    0U,	// G_FCMP
    0U,	// G_SELECT
    0U,	// G_UADDE
    0U,	// G_USUBE
    0U,	// G_SADDO
    0U,	// G_SSUBO
    0U,	// G_UMULO
    0U,	// G_SMULO
    0U,	// G_UMULH
    0U,	// G_SMULH
    0U,	// G_FADD
    0U,	// G_FSUB
    0U,	// G_FMUL
    0U,	// G_FMA
    0U,	// G_FDIV
    0U,	// G_FREM
    0U,	// G_FPOW
    0U,	// G_FEXP
    0U,	// G_FEXP2
    0U,	// G_FLOG
    0U,	// G_FLOG2
    0U,	// G_FNEG
    0U,	// G_FPEXT
    0U,	// G_FPTRUNC
    0U,	// G_FPTOSI
    0U,	// G_FPTOUI
    0U,	// G_SITOFP
    0U,	// G_UITOFP
    0U,	// G_FABS
    0U,	// G_GEP
    0U,	// G_PTR_MASK
    0U,	// G_BR
    0U,	// G_INSERT_VECTOR_ELT
    0U,	// G_EXTRACT_VECTOR_ELT
    0U,	// G_SHUFFLE_VECTOR
    0U,	// G_BSWAP
    0U,	// G_ADDRSPACE_CAST
    0U,	// G_BLOCK_ADDR
    0U,	// CFENCE8
    0U,	// CLRLSLDI
    0U,	// CLRLSLDIo
    66U,	// CLRLSLWI
    66U,	// CLRLSLWIo
    32U,	// CLRRDI
    32U,	// CLRRDIo
    34U,	// CLRRWI
    34U,	// CLRRWIo
    0U,	// CP_COPY_FIRST
    0U,	// CP_COPYx
    0U,	// CP_PASTE_LAST
    0U,	// CP_PASTEx
    0U,	// DCBFL
    0U,	// DCBFLP
    0U,	// DCBFx
    0U,	// DCBTCT
    0U,	// DCBTDS
    0U,	// DCBTSTCT
    0U,	// DCBTSTDS
    0U,	// DCBTSTT
    0U,	// DCBTSTx
    0U,	// DCBTT
    0U,	// DCBTx
    0U,	// DFLOADf32
    0U,	// DFLOADf64
    0U,	// DFSTOREf32
    0U,	// DFSTOREf64
    0U,	// EXTLDI
    0U,	// EXTLDIo
    66U,	// EXTLWI
    66U,	// EXTLWIo
    0U,	// EXTRDI
    0U,	// EXTRDIo
    66U,	// EXTRWI
    66U,	// EXTRWIo
    66U,	// INSLWI
    66U,	// INSLWIo
    0U,	// INSRDI
    0U,	// INSRDIo
    66U,	// INSRWI
    66U,	// INSRWIo
    0U,	// LAx
    0U,	// LIWAX
    0U,	// LIWZX
    130U,	// RLWIMIbm
    130U,	// RLWIMIobm
    130U,	// RLWINMbm
    130U,	// RLWINMobm
    130U,	// RLWNMbm
    130U,	// RLWNMobm
    32U,	// ROTRDI
    32U,	// ROTRDIo
    34U,	// ROTRWI
    34U,	// ROTRWIo
    32U,	// SLDI
    32U,	// SLDIo
    34U,	// SLWI
    34U,	// SLWIo
    0U,	// SPILLTOVSR_LD
    0U,	// SPILLTOVSR_LDX
    0U,	// SPILLTOVSR_ST
    0U,	// SPILLTOVSR_STX
    32U,	// SRDI
    32U,	// SRDIo
    34U,	// SRWI
    34U,	// SRWIo
    0U,	// STIWX
    4U,	// SUBI
    4U,	// SUBIC
    4U,	// SUBICo
    4U,	// SUBIS
    0U,	// SUBPCIS
    0U,	// XFLOADf32
    0U,	// XFLOADf64
    0U,	// XFSTOREf32
    0U,	// XFSTOREf64
    38U,	// ADD4
    38U,	// ADD4TLS
    38U,	// ADD4o
    38U,	// ADD8
    38U,	// ADD8TLS
    38U,	// ADD8TLS_
    38U,	// ADD8o
    38U,	// ADDC
    38U,	// ADDC8
    38U,	// ADDC8o
    38U,	// ADDCo
    38U,	// ADDE
    38U,	// ADDE8
    38U,	// ADDE8o
    38U,	// ADDEo
    4U,	// ADDI
    4U,	// ADDI8
    4U,	// ADDIC
    4U,	// ADDIC8
    4U,	// ADDICo
    4U,	// ADDIS
    4U,	// ADDIS8
    0U,	// ADDISdtprelHA
    0U,	// ADDISdtprelHA32
    0U,	// ADDISgotTprelHA
    0U,	// ADDIStlsgdHA
    0U,	// ADDIStlsldHA
    0U,	// ADDIStocHA
    0U,	// ADDIdtprelL
    0U,	// ADDIdtprelL32
    0U,	// ADDItlsgdL
    0U,	// ADDItlsgdL32
    0U,	// ADDItlsgdLADDR
    0U,	// ADDItlsgdLADDR32
    0U,	// ADDItlsldL
    0U,	// ADDItlsldL32
    0U,	// ADDItlsldLADDR
    0U,	// ADDItlsldLADDR32
    0U,	// ADDItocL
    0U,	// ADDME
    0U,	// ADDME8
    0U,	// ADDME8o
    0U,	// ADDMEo
    0U,	// ADDPCIS
    0U,	// ADDZE
    0U,	// ADDZE8
    0U,	// ADDZE8o
    0U,	// ADDZEo
    0U,	// ADJCALLSTACKDOWN
    0U,	// ADJCALLSTACKUP
    38U,	// AND
    38U,	// AND8
    38U,	// AND8o
    38U,	// ANDC
    38U,	// ANDC8
    38U,	// ANDC8o
    38U,	// ANDCo
    8U,	// ANDISo
    8U,	// ANDISo8
    8U,	// ANDIo
    8U,	// ANDIo8
    0U,	// ANDIo_1_EQ_BIT
    0U,	// ANDIo_1_EQ_BIT8
    0U,	// ANDIo_1_GT_BIT
    0U,	// ANDIo_1_GT_BIT8
    38U,	// ANDo
    0U,	// ATOMIC_CMP_SWAP_I16
    0U,	// ATOMIC_CMP_SWAP_I32
    0U,	// ATOMIC_CMP_SWAP_I64
    0U,	// ATOMIC_CMP_SWAP_I8
    0U,	// ATOMIC_LOAD_ADD_I16
    0U,	// ATOMIC_LOAD_ADD_I32
    0U,	// ATOMIC_LOAD_ADD_I64
    0U,	// ATOMIC_LOAD_ADD_I8
    0U,	// ATOMIC_LOAD_AND_I16
    0U,	// ATOMIC_LOAD_AND_I32
    0U,	// ATOMIC_LOAD_AND_I64
    0U,	// ATOMIC_LOAD_AND_I8
    0U,	// ATOMIC_LOAD_MAX_I16
    0U,	// ATOMIC_LOAD_MAX_I32
    0U,	// ATOMIC_LOAD_MAX_I64
    0U,	// ATOMIC_LOAD_MAX_I8
    0U,	// ATOMIC_LOAD_MIN_I16
    0U,	// ATOMIC_LOAD_MIN_I32
    0U,	// ATOMIC_LOAD_MIN_I64
    0U,	// ATOMIC_LOAD_MIN_I8
    0U,	// ATOMIC_LOAD_NAND_I16
    0U,	// ATOMIC_LOAD_NAND_I32
    0U,	// ATOMIC_LOAD_NAND_I64
    0U,	// ATOMIC_LOAD_NAND_I8
    0U,	// ATOMIC_LOAD_OR_I16
    0U,	// ATOMIC_LOAD_OR_I32
    0U,	// ATOMIC_LOAD_OR_I64
    0U,	// ATOMIC_LOAD_OR_I8
    0U,	// ATOMIC_LOAD_SUB_I16
    0U,	// ATOMIC_LOAD_SUB_I32
    0U,	// ATOMIC_LOAD_SUB_I64
    0U,	// ATOMIC_LOAD_SUB_I8
    0U,	// ATOMIC_LOAD_UMAX_I16
    0U,	// ATOMIC_LOAD_UMAX_I32
    0U,	// ATOMIC_LOAD_UMAX_I64
    0U,	// ATOMIC_LOAD_UMAX_I8
    0U,	// ATOMIC_LOAD_UMIN_I16
    0U,	// ATOMIC_LOAD_UMIN_I32
    0U,	// ATOMIC_LOAD_UMIN_I64
    0U,	// ATOMIC_LOAD_UMIN_I8
    0U,	// ATOMIC_LOAD_XOR_I16
    0U,	// ATOMIC_LOAD_XOR_I32
    0U,	// ATOMIC_LOAD_XOR_I64
    0U,	// ATOMIC_LOAD_XOR_I8
    0U,	// ATOMIC_SWAP_I16
    0U,	// ATOMIC_SWAP_I32
    0U,	// ATOMIC_SWAP_I64
    0U,	// ATOMIC_SWAP_I8
    0U,	// ATTN
    0U,	// B
    0U,	// BA
    0U,	// BC
    0U,	// BCC
    0U,	// BCCA
    0U,	// BCCCTR
    0U,	// BCCCTR8
    0U,	// BCCCTRL
    0U,	// BCCCTRL8
    0U,	// BCCL
    0U,	// BCCLA
    0U,	// BCCLR
    0U,	// BCCLRL
    0U,	// BCCTR
    0U,	// BCCTR8
    0U,	// BCCTR8n
    0U,	// BCCTRL
    0U,	// BCCTRL8
    0U,	// BCCTRL8n
    0U,	// BCCTRLn
    0U,	// BCCTRn
    42U,	// BCDCFNo
    42U,	// BCDCFSQo
    42U,	// BCDCFZo
    38U,	// BCDCPSGNo
    0U,	// BCDCTNo
    0U,	// BCDCTSQo
    42U,	// BCDCTZo
    42U,	// BCDSETSGNo
    198U,	// BCDSRo
    198U,	// BCDSo
    198U,	// BCDTRUNCo
    38U,	// BCDUSo
    38U,	// BCDUTRUNCo
    0U,	// BCL
    0U,	// BCLR
    0U,	// BCLRL
    0U,	// BCLRLn
    0U,	// BCLRn
    0U,	// BCLalways
    0U,	// BCLn
    0U,	// BCTR
    0U,	// BCTR8
    0U,	// BCTRL
    0U,	// BCTRL8
    0U,	// BCTRL8_LDinto_toc
    0U,	// BCn
    0U,	// BDNZ
    0U,	// BDNZ8
    0U,	// BDNZA
    0U,	// BDNZAm
    0U,	// BDNZAp
    0U,	// BDNZL
    0U,	// BDNZLA
    0U,	// BDNZLAm
    0U,	// BDNZLAp
    0U,	// BDNZLR
    0U,	// BDNZLR8
    0U,	// BDNZLRL
    0U,	// BDNZLRLm
    0U,	// BDNZLRLp
    0U,	// BDNZLRm
    0U,	// BDNZLRp
    0U,	// BDNZLm
    0U,	// BDNZLp
    0U,	// BDNZm
    0U,	// BDNZp
    0U,	// BDZ
    0U,	// BDZ8
    0U,	// BDZA
    0U,	// BDZAm
    0U,	// BDZAp
    0U,	// BDZL
    0U,	// BDZLA
    0U,	// BDZLAm
    0U,	// BDZLAp
    0U,	// BDZLR
    0U,	// BDZLR8
    0U,	// BDZLRL
    0U,	// BDZLRLm
    0U,	// BDZLRLp
    0U,	// BDZLRm
    0U,	// BDZLRp
    0U,	// BDZLm
    0U,	// BDZLp
    0U,	// BDZm
    0U,	// BDZp
    0U,	// BL
    0U,	// BL8
    0U,	// BL8_NOP
    0U,	// BL8_NOP_TLS
    0U,	// BL8_TLS
    0U,	// BL8_TLS_
    0U,	// BLA
    0U,	// BLA8
    0U,	// BLA8_NOP
    0U,	// BLR
    0U,	// BLR8
    0U,	// BLRL
    0U,	// BL_TLS
    38U,	// BPERMD
    38U,	// BRINC
    0U,	// CLRBHRB
    38U,	// CMPB
    38U,	// CMPB8
    38U,	// CMPD
    4U,	// CMPDI
    38U,	// CMPEQB
    38U,	// CMPLD
    8U,	// CMPLDI
    38U,	// CMPLW
    8U,	// CMPLWI
    0U,	// CMPRB
    0U,	// CMPRB8
    38U,	// CMPW
    4U,	// CMPWI
    0U,	// CNTLZD
    0U,	// CNTLZDo
    0U,	// CNTLZW
    0U,	// CNTLZW8
    0U,	// CNTLZW8o
    0U,	// CNTLZWo
    0U,	// CNTTZD
    0U,	// CNTTZDo
    0U,	// CNTTZW
    0U,	// CNTTZW8
    0U,	// CNTTZW8o
    0U,	// CNTTZWo
    0U,	// CP_ABORT
    42U,	// CP_COPY
    42U,	// CP_COPY8
    42U,	// CP_PASTE
    42U,	// CP_PASTE8
    42U,	// CP_PASTE8o
    42U,	// CP_PASTEo
    0U,	// CR6SET
    0U,	// CR6UNSET
    38U,	// CRAND
    38U,	// CRANDC
    38U,	// CREQV
    38U,	// CRNAND
    38U,	// CRNOR
    38U,	// CROR
    38U,	// CRORC
    12U,	// CRSET
    12U,	// CRUNSET
    38U,	// CRXOR
    0U,	// CTRL_DEP
    0U,	// DARN
    0U,	// DCBA
    0U,	// DCBF
    0U,	// DCBFEP
    0U,	// DCBI
    0U,	// DCBST
    0U,	// DCBSTEP
    0U,	// DCBT
    0U,	// DCBTEP
    0U,	// DCBTST
    0U,	// DCBTSTEP
    0U,	// DCBZ
    0U,	// DCBZEP
    0U,	// DCBZL
    0U,	// DCBZLEP
    0U,	// DCCCI
    38U,	// DIVD
    38U,	// DIVDE
    38U,	// DIVDEU
    38U,	// DIVDEUo
    38U,	// DIVDEo
    38U,	// DIVDU
    38U,	// DIVDUo
    38U,	// DIVDo
    38U,	// DIVW
    38U,	// DIVWE
    38U,	// DIVWEU
    38U,	// DIVWEUo
    38U,	// DIVWEo
    38U,	// DIVWU
    38U,	// DIVWUo
    38U,	// DIVWo
    0U,	// DSS
    0U,	// DSSALL
    0U,	// DST
    0U,	// DST64
    0U,	// DSTST
    0U,	// DSTST64
    0U,	// DSTSTT
    0U,	// DSTSTT64
    0U,	// DSTT
    0U,	// DSTT64
    0U,	// DYNALLOC
    0U,	// DYNALLOC8
    0U,	// DYNAREAOFFSET
    0U,	// DYNAREAOFFSET8
    0U,	// EFDABS
    38U,	// EFDADD
    0U,	// EFDCFS
    0U,	// EFDCFSF
    0U,	// EFDCFSI
    0U,	// EFDCFSID
    0U,	// EFDCFUF
    0U,	// EFDCFUI
    0U,	// EFDCFUID
    38U,	// EFDCMPEQ
    38U,	// EFDCMPGT
    38U,	// EFDCMPLT
    0U,	// EFDCTSF
    0U,	// EFDCTSI
    0U,	// EFDCTSIDZ
    0U,	// EFDCTSIZ
    0U,	// EFDCTUF
    0U,	// EFDCTUI
    0U,	// EFDCTUIDZ
    0U,	// EFDCTUIZ
    38U,	// EFDDIV
    38U,	// EFDMUL
    0U,	// EFDNABS
    0U,	// EFDNEG
    38U,	// EFDSUB
    38U,	// EFDTSTEQ
    38U,	// EFDTSTGT
    38U,	// EFDTSTLT
    0U,	// EFSABS
    38U,	// EFSADD
    0U,	// EFSCFD
    0U,	// EFSCFSF
    0U,	// EFSCFSI
    0U,	// EFSCFUF
    0U,	// EFSCFUI
    38U,	// EFSCMPEQ
    38U,	// EFSCMPGT
    38U,	// EFSCMPLT
    0U,	// EFSCTSF
    0U,	// EFSCTSI
    0U,	// EFSCTSIZ
    0U,	// EFSCTUF
    0U,	// EFSCTUI
    0U,	// EFSCTUIZ
    38U,	// EFSDIV
    38U,	// EFSMUL
    0U,	// EFSNABS
    0U,	// EFSNEG
    38U,	// EFSSUB
    38U,	// EFSTSTEQ
    38U,	// EFSTSTGT
    38U,	// EFSTSTLT
    0U,	// EH_SjLj_LongJmp32
    0U,	// EH_SjLj_LongJmp64
    0U,	// EH_SjLj_SetJmp32
    0U,	// EH_SjLj_SetJmp64
    0U,	// EH_SjLj_Setup
    38U,	// EQV
    38U,	// EQV8
    38U,	// EQV8o
    38U,	// EQVo
    0U,	// EVABS
    46U,	// EVADDIW
    0U,	// EVADDSMIAAW
    0U,	// EVADDSSIAAW
    0U,	// EVADDUMIAAW
    0U,	// EVADDUSIAAW
    38U,	// EVADDW
    38U,	// EVAND
    38U,	// EVANDC
    38U,	// EVCMPEQ
    38U,	// EVCMPGTS
    38U,	// EVCMPGTU
    38U,	// EVCMPLTS
    38U,	// EVCMPLTU
    0U,	// EVCNTLSW
    0U,	// EVCNTLZW
    38U,	// EVDIVWS
    38U,	// EVDIVWU
    38U,	// EVEQV
    0U,	// EVEXTSB
    0U,	// EVEXTSH
    0U,	// EVFSABS
    38U,	// EVFSADD
    0U,	// EVFSCFSF
    0U,	// EVFSCFSI
    0U,	// EVFSCFUF
    0U,	// EVFSCFUI
    38U,	// EVFSCMPEQ
    38U,	// EVFSCMPGT
    38U,	// EVFSCMPLT
    0U,	// EVFSCTSF
    0U,	// EVFSCTSI
    0U,	// EVFSCTSIZ
    0U,	// EVFSCTUF
    0U,	// EVFSCTUI
    0U,	// EVFSCTUIZ
    38U,	// EVFSDIV
    38U,	// EVFSMUL
    0U,	// EVFSNABS
    0U,	// EVFSNEG
    38U,	// EVFSSUB
    38U,	// EVFSTSTEQ
    38U,	// EVFSTSTGT
    38U,	// EVFSTSTLT
    0U,	// EVLDD
    0U,	// EVLDDX
    0U,	// EVLDH
    0U,	// EVLDHX
    0U,	// EVLDW
    0U,	// EVLDWX
    0U,	// EVLHHESPLAT
    0U,	// EVLHHESPLATX
    0U,	// EVLHHOSSPLAT
    0U,	// EVLHHOSSPLATX
    0U,	// EVLHHOUSPLAT
    0U,	// EVLHHOUSPLATX
    0U,	// EVLWHE
    0U,	// EVLWHEX
    0U,	// EVLWHOS
    0U,	// EVLWHOSX
    0U,	// EVLWHOU
    0U,	// EVLWHOUX
    0U,	// EVLWHSPLAT
    0U,	// EVLWHSPLATX
    0U,	// EVLWWSPLAT
    0U,	// EVLWWSPLATX
    38U,	// EVMERGEHI
    38U,	// EVMERGEHILO
    38U,	// EVMERGELO
    38U,	// EVMERGELOHI
    38U,	// EVMHEGSMFAA
    38U,	// EVMHEGSMFAN
    38U,	// EVMHEGSMIAA
    38U,	// EVMHEGSMIAN
    38U,	// EVMHEGUMIAA
    38U,	// EVMHEGUMIAN
    38U,	// EVMHESMF
    38U,	// EVMHESMFA
    38U,	// EVMHESMFAAW
    38U,	// EVMHESMFANW
    38U,	// EVMHESMI
    38U,	// EVMHESMIA
    38U,	// EVMHESMIAAW
    38U,	// EVMHESMIANW
    38U,	// EVMHESSF
    38U,	// EVMHESSFA
    38U,	// EVMHESSFAAW
    38U,	// EVMHESSFANW
    38U,	// EVMHESSIAAW
    38U,	// EVMHESSIANW
    38U,	// EVMHEUMI
    38U,	// EVMHEUMIA
    38U,	// EVMHEUMIAAW
    38U,	// EVMHEUMIANW
    38U,	// EVMHEUSIAAW
    38U,	// EVMHEUSIANW
    38U,	// EVMHOGSMFAA
    38U,	// EVMHOGSMFAN
    38U,	// EVMHOGSMIAA
    38U,	// EVMHOGSMIAN
    38U,	// EVMHOGUMIAA
    38U,	// EVMHOGUMIAN
    38U,	// EVMHOSMF
    38U,	// EVMHOSMFA
    38U,	// EVMHOSMFAAW
    38U,	// EVMHOSMFANW
    38U,	// EVMHOSMI
    38U,	// EVMHOSMIA
    38U,	// EVMHOSMIAAW
    38U,	// EVMHOSMIANW
    38U,	// EVMHOSSF
    38U,	// EVMHOSSFA
    38U,	// EVMHOSSFAAW
    38U,	// EVMHOSSFANW
    38U,	// EVMHOSSIAAW
    38U,	// EVMHOSSIANW
    38U,	// EVMHOUMI
    38U,	// EVMHOUMIA
    38U,	// EVMHOUMIAAW
    38U,	// EVMHOUMIANW
    38U,	// EVMHOUSIAAW
    38U,	// EVMHOUSIANW
    0U,	// EVMRA
    38U,	// EVMWHSMF
    38U,	// EVMWHSMFA
    38U,	// EVMWHSMI
    38U,	// EVMWHSMIA
    38U,	// EVMWHSSF
    38U,	// EVMWHSSFA
    38U,	// EVMWHUMI
    38U,	// EVMWHUMIA
    38U,	// EVMWLSMIAAW
    38U,	// EVMWLSMIANW
    38U,	// EVMWLSSIAAW
    38U,	// EVMWLSSIANW
    38U,	// EVMWLUMI
    38U,	// EVMWLUMIA
    38U,	// EVMWLUMIAAW
    38U,	// EVMWLUMIANW
    38U,	// EVMWLUSIAAW
    38U,	// EVMWLUSIANW
    38U,	// EVMWSMF
    38U,	// EVMWSMFA
    38U,	// EVMWSMFAA
    38U,	// EVMWSMFAN
    38U,	// EVMWSMI
    38U,	// EVMWSMIA
    38U,	// EVMWSMIAA
    38U,	// EVMWSMIAN
    38U,	// EVMWSSF
    38U,	// EVMWSSFA
    38U,	// EVMWSSFAA
    38U,	// EVMWSSFAN
    38U,	// EVMWUMI
    38U,	// EVMWUMIA
    38U,	// EVMWUMIAA
    38U,	// EVMWUMIAN
    38U,	// EVNAND
    0U,	// EVNEG
    38U,	// EVNOR
    38U,	// EVOR
    38U,	// EVORC
    38U,	// EVRLW
    34U,	// EVRLWI
    0U,	// EVRNDW
    0U,	// EVSEL
    38U,	// EVSLW
    34U,	// EVSLWI
    0U,	// EVSPLATFI
    0U,	// EVSPLATI
    34U,	// EVSRWIS
    34U,	// EVSRWIU
    38U,	// EVSRWS
    38U,	// EVSRWU
    0U,	// EVSTDD
    0U,	// EVSTDDX
    0U,	// EVSTDH
    0U,	// EVSTDHX
    0U,	// EVSTDW
    0U,	// EVSTDWX
    0U,	// EVSTWHE
    0U,	// EVSTWHEX
    0U,	// EVSTWHO
    0U,	// EVSTWHOX
    0U,	// EVSTWWE
    0U,	// EVSTWWEX
    0U,	// EVSTWWO
    0U,	// EVSTWWOX
    0U,	// EVSUBFSMIAAW
    0U,	// EVSUBFSSIAAW
    0U,	// EVSUBFUMIAAW
    0U,	// EVSUBFUSIAAW
    38U,	// EVSUBFW
    0U,	// EVSUBIFW
    38U,	// EVXOR
    0U,	// EXTSB
    0U,	// EXTSB8
    0U,	// EXTSB8_32_64
    0U,	// EXTSB8o
    0U,	// EXTSBo
    0U,	// EXTSH
    0U,	// EXTSH8
    0U,	// EXTSH8_32_64
    0U,	// EXTSH8o
    0U,	// EXTSHo
    0U,	// EXTSW
    32U,	// EXTSWSLI
    32U,	// EXTSWSLIo
    0U,	// EXTSW_32
    0U,	// EXTSW_32_64
    0U,	// EXTSW_32_64o
    0U,	// EXTSWo
    0U,	// EnforceIEIO
    0U,	// FABSD
    0U,	// FABSDo
    0U,	// FABSS
    0U,	// FABSSo
    38U,	// FADD
    38U,	// FADDS
    38U,	// FADDSo
    38U,	// FADDo
    0U,	// FADDrtz
    0U,	// FCFID
    0U,	// FCFIDS
    0U,	// FCFIDSo
    0U,	// FCFIDU
    0U,	// FCFIDUS
    0U,	// FCFIDUSo
    0U,	// FCFIDUo
    0U,	// FCFIDo
    38U,	// FCMPUD
    38U,	// FCMPUS
    38U,	// FCPSGND
    38U,	// FCPSGNDo
    38U,	// FCPSGNS
    38U,	// FCPSGNSo
    0U,	// FCTID
    0U,	// FCTIDU
    0U,	// FCTIDUZ
    0U,	// FCTIDUZo
    0U,	// FCTIDUo
    0U,	// FCTIDZ
    0U,	// FCTIDZo
    0U,	// FCTIDo
    0U,	// FCTIW
    0U,	// FCTIWU
    0U,	// FCTIWUZ
    0U,	// FCTIWUZo
    0U,	// FCTIWUo
    0U,	// FCTIWZ
    0U,	// FCTIWZo
    0U,	// FCTIWo
    38U,	// FDIV
    38U,	// FDIVS
    38U,	// FDIVSo
    38U,	// FDIVo
    134U,	// FMADD
    134U,	// FMADDS
    134U,	// FMADDSo
    134U,	// FMADDo
    0U,	// FMR
    0U,	// FMRo
    134U,	// FMSUB
    134U,	// FMSUBS
    134U,	// FMSUBSo
    134U,	// FMSUBo
    38U,	// FMUL
    38U,	// FMULS
    38U,	// FMULSo
    38U,	// FMULo
    0U,	// FNABSD
    0U,	// FNABSDo
    0U,	// FNABSS
    0U,	// FNABSSo
    0U,	// FNEGD
    0U,	// FNEGDo
    0U,	// FNEGS
    0U,	// FNEGSo
    134U,	// FNMADD
    134U,	// FNMADDS
    134U,	// FNMADDSo
    134U,	// FNMADDo
    134U,	// FNMSUB
    134U,	// FNMSUBS
    134U,	// FNMSUBSo
    134U,	// FNMSUBo
    0U,	// FRE
    0U,	// FRES
    0U,	// FRESo
    0U,	// FREo
    0U,	// FRIMD
    0U,	// FRIMDo
    0U,	// FRIMS
    0U,	// FRIMSo
    0U,	// FRIND
    0U,	// FRINDo
    0U,	// FRINS
    0U,	// FRINSo
    0U,	// FRIPD
    0U,	// FRIPDo
    0U,	// FRIPS
    0U,	// FRIPSo
    0U,	// FRIZD
    0U,	// FRIZDo
    0U,	// FRIZS
    0U,	// FRIZSo
    0U,	// FRSP
    0U,	// FRSPo
    0U,	// FRSQRTE
    0U,	// FRSQRTES
    0U,	// FRSQRTESo
    0U,	// FRSQRTEo
    134U,	// FSELD
    134U,	// FSELDo
    134U,	// FSELS
    134U,	// FSELSo
    0U,	// FSQRT
    0U,	// FSQRTS
    0U,	// FSQRTSo
    0U,	// FSQRTo
    38U,	// FSUB
    38U,	// FSUBS
    38U,	// FSUBSo
    38U,	// FSUBo
    38U,	// FTDIV
    0U,	// FTSQRT
    0U,	// GETtlsADDR
    0U,	// GETtlsADDR32
    0U,	// GETtlsldADDR
    0U,	// GETtlsldADDR32
    0U,	// HRFID
    0U,	// ICBI
    0U,	// ICBIEP
    0U,	// ICBLC
    0U,	// ICBLQ
    0U,	// ICBT
    0U,	// ICBTLS
    0U,	// ICCCI
    134U,	// ISEL
    134U,	// ISEL8
    0U,	// ISYNC
    0U,	// LA
    0U,	// LBARX
    0U,	// LBARXL
    0U,	// LBEPX
    0U,	// LBZ
    0U,	// LBZ8
    38U,	// LBZCIX
    0U,	// LBZU
    0U,	// LBZU8
    0U,	// LBZUX
    0U,	// LBZUX8
    0U,	// LBZX
    0U,	// LBZX8
    38U,	// LBZXTLS
    38U,	// LBZXTLS_
    38U,	// LBZXTLS_32
    0U,	// LD
    0U,	// LDARX
    0U,	// LDARXL
    34U,	// LDAT
    0U,	// LDBRX
    38U,	// LDCIX
    0U,	// LDMX
    0U,	// LDU
    0U,	// LDUX
    0U,	// LDX
    38U,	// LDXTLS
    38U,	// LDXTLS_
    0U,	// LDgotTprelL
    0U,	// LDgotTprelL32
    0U,	// LDtoc
    0U,	// LDtocBA
    0U,	// LDtocCPT
    0U,	// LDtocJTI
    0U,	// LDtocL
    0U,	// LFD
    0U,	// LFDEPX
    0U,	// LFDU
    0U,	// LFDUX
    0U,	// LFDX
    0U,	// LFIWAX
    0U,	// LFIWZX
    0U,	// LFS
    0U,	// LFSU
    0U,	// LFSUX
    0U,	// LFSX
    0U,	// LHA
    0U,	// LHA8
    0U,	// LHARX
    0U,	// LHARXL
    0U,	// LHAU
    0U,	// LHAU8
    0U,	// LHAUX
    0U,	// LHAUX8
    0U,	// LHAX
    0U,	// LHAX8
    0U,	// LHBRX
    0U,	// LHBRX8
    0U,	// LHEPX
    0U,	// LHZ
    0U,	// LHZ8
    38U,	// LHZCIX
    0U,	// LHZU
    0U,	// LHZU8
    0U,	// LHZUX
    0U,	// LHZUX8
    0U,	// LHZX
    0U,	// LHZX8
    38U,	// LHZXTLS
    38U,	// LHZXTLS_
    38U,	// LHZXTLS_32
    0U,	// LI
    0U,	// LI8
    0U,	// LIS
    0U,	// LIS8
    0U,	// LMW
    34U,	// LSWI
    0U,	// LVEBX
    0U,	// LVEHX
    0U,	// LVEWX
    0U,	// LVSL
    0U,	// LVSR
    0U,	// LVX
    0U,	// LVXL
    0U,	// LWA
    0U,	// LWARX
    0U,	// LWARXL
    34U,	// LWAT
    0U,	// LWAUX
    0U,	// LWAX
    0U,	// LWAX_32
    0U,	// LWA_32
    0U,	// LWBRX
    0U,	// LWBRX8
    0U,	// LWEPX
    0U,	// LWZ
    0U,	// LWZ8
    38U,	// LWZCIX
    0U,	// LWZU
    0U,	// LWZU8
    0U,	// LWZUX
    0U,	// LWZUX8
    0U,	// LWZX
    0U,	// LWZX8
    38U,	// LWZXTLS
    38U,	// LWZXTLS_
    38U,	// LWZXTLS_32
    0U,	// LWZtoc
    0U,	// LXSD
    0U,	// LXSDX
    0U,	// LXSIBZX
    0U,	// LXSIHZX
    0U,	// LXSIWAX
    0U,	// LXSIWZX
    0U,	// LXSSP
    0U,	// LXSSPX
    0U,	// LXV
    0U,	// LXVB16X
    0U,	// LXVD2X
    0U,	// LXVDSX
    0U,	// LXVH8X
    38U,	// LXVL
    38U,	// LXVLL
    0U,	// LXVW4X
    0U,	// LXVWSX
    0U,	// LXVX
    134U,	// MADDHD
    134U,	// MADDHDU
    134U,	// MADDLD
    0U,	// MBAR
    0U,	// MCRF
    0U,	// MCRFS
    0U,	// MCRXRX
    0U,	// MFBHRBE
    0U,	// MFCR
    0U,	// MFCR8
    0U,	// MFCTR
    0U,	// MFCTR8
    0U,	// MFDCR
    0U,	// MFFS
    0U,	// MFFSCDRN
    0U,	// MFFSCDRNI
    0U,	// MFFSCE
    0U,	// MFFSCRN
    0U,	// MFFSCRNI
    0U,	// MFFSL
    0U,	// MFFSo
    0U,	// MFLR
    0U,	// MFLR8
    0U,	// MFMSR
    0U,	// MFOCRF
    0U,	// MFOCRF8
    0U,	// MFPMR
    0U,	// MFSPR
    0U,	// MFSPR8
    0U,	// MFSR
    0U,	// MFSRIN
    0U,	// MFTB
    0U,	// MFTB8
    0U,	// MFVRD
    0U,	// MFVRSAVE
    0U,	// MFVRSAVEv
    0U,	// MFVSCR
    0U,	// MFVSRD
    0U,	// MFVSRLD
    0U,	// MFVSRWZ
    38U,	// MODSD
    38U,	// MODSW
    38U,	// MODUD
    38U,	// MODUW
    0U,	// MSGSYNC
    0U,	// MSYNC
    0U,	// MTCRF
    0U,	// MTCRF8
    0U,	// MTCTR
    0U,	// MTCTR8
    0U,	// MTCTR8loop
    0U,	// MTCTRloop
    0U,	// MTDCR
    0U,	// MTFSB0
    0U,	// MTFSB1
    134U,	// MTFSF
    38U,	// MTFSFI
    38U,	// MTFSFIo
    0U,	// MTFSFb
    134U,	// MTFSFo
    0U,	// MTLR
    0U,	// MTLR8
    0U,	// MTMSR
    0U,	// MTMSRD
    0U,	// MTOCRF
    0U,	// MTOCRF8
    0U,	// MTPMR
    0U,	// MTSPR
    0U,	// MTSPR8
    0U,	// MTSR
    0U,	// MTSRIN
    0U,	// MTVRSAVE
    0U,	// MTVRSAVEv
    0U,	// MTVSCR
    0U,	// MTVSRD
    38U,	// MTVSRDD
    0U,	// MTVSRWA
    0U,	// MTVSRWS
    0U,	// MTVSRWZ
    38U,	// MULHD
    38U,	// MULHDU
    38U,	// MULHDUo
    38U,	// MULHDo
    38U,	// MULHW
    38U,	// MULHWU
    38U,	// MULHWUo
    38U,	// MULHWo
    38U,	// MULLD
    38U,	// MULLDo
    4U,	// MULLI
    4U,	// MULLI8
    38U,	// MULLW
    38U,	// MULLWo
    0U,	// MoveGOTtoLR
    0U,	// MovePCtoLR
    0U,	// MovePCtoLR8
    38U,	// NAND
    38U,	// NAND8
    38U,	// NAND8o
    38U,	// NANDo
    0U,	// NAP
    0U,	// NEG
    0U,	// NEG8
    0U,	// NEG8o
    0U,	// NEGo
    0U,	// NOP
    0U,	// NOP_GT_PWR6
    0U,	// NOP_GT_PWR7
    38U,	// NOR
    38U,	// NOR8
    38U,	// NOR8o
    38U,	// NORo
    38U,	// OR
    38U,	// OR8
    38U,	// OR8o
    38U,	// ORC
    38U,	// ORC8
    38U,	// ORC8o
    38U,	// ORCo
    8U,	// ORI
    8U,	// ORI8
    8U,	// ORIS
    8U,	// ORIS8
    38U,	// ORo
    0U,	// POPCNTB
    0U,	// POPCNTD
    0U,	// POPCNTW
    0U,	// PPC32GOT
    0U,	// PPC32PICGOT
    0U,	// PSC_DCBZL
    0U,	// PSQ_L
    0U,	// PSQ_LU
    710U,	// PSQ_LUX
    710U,	// PSQ_LX
    0U,	// PSQ_ST
    0U,	// PSQ_STU
    710U,	// PSQ_STUX
    710U,	// PSQ_STX
    0U,	// PS_ABS
    0U,	// PS_ABSo
    38U,	// PS_ADD
    38U,	// PS_ADDo
    38U,	// PS_CMPO0
    38U,	// PS_CMPO1
    38U,	// PS_CMPU0
    38U,	// PS_CMPU1
    38U,	// PS_DIV
    38U,	// PS_DIVo
    134U,	// PS_MADD
    134U,	// PS_MADDS0
    134U,	// PS_MADDS0o
    134U,	// PS_MADDS1
    134U,	// PS_MADDS1o
    134U,	// PS_MADDo
    38U,	// PS_MERGE00
    38U,	// PS_MERGE00o
    38U,	// PS_MERGE01
    38U,	// PS_MERGE01o
    38U,	// PS_MERGE10
    38U,	// PS_MERGE10o
    38U,	// PS_MERGE11
    38U,	// PS_MERGE11o
    0U,	// PS_MR
    0U,	// PS_MRo
    134U,	// PS_MSUB
    134U,	// PS_MSUBo
    38U,	// PS_MUL
    38U,	// PS_MULS0
    38U,	// PS_MULS0o
    38U,	// PS_MULS1
    38U,	// PS_MULS1o
    38U,	// PS_MULo
    0U,	// PS_NABS
    0U,	// PS_NABSo
    0U,	// PS_NEG
    0U,	// PS_NEGo
    134U,	// PS_NMADD
    134U,	// PS_NMADDo
    134U,	// PS_NMSUB
    134U,	// PS_NMSUBo
    0U,	// PS_RES
    0U,	// PS_RESo
    0U,	// PS_RSQRTE
    0U,	// PS_RSQRTEo
    134U,	// PS_SEL
    134U,	// PS_SELo
    38U,	// PS_SUB
    38U,	// PS_SUBo
    134U,	// PS_SUM0
    134U,	// PS_SUM0o
    134U,	// PS_SUM1
    134U,	// PS_SUM1o
    262U,	// QVALIGNI
    262U,	// QVALIGNIb
    262U,	// QVALIGNIs
    16U,	// QVESPLATI
    16U,	// QVESPLATIb
    16U,	// QVESPLATIs
    0U,	// QVFABS
    0U,	// QVFABSs
    38U,	// QVFADD
    38U,	// QVFADDS
    38U,	// QVFADDSs
    0U,	// QVFCFID
    0U,	// QVFCFIDS
    0U,	// QVFCFIDU
    0U,	// QVFCFIDUS
    0U,	// QVFCFIDb
    38U,	// QVFCMPEQ
    38U,	// QVFCMPEQb
    38U,	// QVFCMPEQbs
    38U,	// QVFCMPGT
    38U,	// QVFCMPGTb
    38U,	// QVFCMPGTbs
    38U,	// QVFCMPLT
    38U,	// QVFCMPLTb
    38U,	// QVFCMPLTbs
    38U,	// QVFCPSGN
    38U,	// QVFCPSGNs
    0U,	// QVFCTID
    0U,	// QVFCTIDU
    0U,	// QVFCTIDUZ
    0U,	// QVFCTIDZ
    0U,	// QVFCTIDb
    0U,	// QVFCTIW
    0U,	// QVFCTIWU
    0U,	// QVFCTIWUZ
    0U,	// QVFCTIWZ
    326U,	// QVFLOGICAL
    326U,	// QVFLOGICALb
    326U,	// QVFLOGICALs
    18U,	// QVFMADD
    18U,	// QVFMADDS
    18U,	// QVFMADDSs
    0U,	// QVFMR
    0U,	// QVFMRb
    0U,	// QVFMRs
    18U,	// QVFMSUB
    18U,	// QVFMSUBS
    18U,	// QVFMSUBSs
    38U,	// QVFMUL
    38U,	// QVFMULS
    38U,	// QVFMULSs
    0U,	// QVFNABS
    0U,	// QVFNABSs
    0U,	// QVFNEG
    0U,	// QVFNEGs
    18U,	// QVFNMADD
    18U,	// QVFNMADDS
    18U,	// QVFNMADDSs
    18U,	// QVFNMSUB
    18U,	// QVFNMSUBS
    18U,	// QVFNMSUBSs
    134U,	// QVFPERM
    134U,	// QVFPERMs
    0U,	// QVFRE
    0U,	// QVFRES
    0U,	// QVFRESs
    0U,	// QVFRIM
    0U,	// QVFRIMs
    0U,	// QVFRIN
    0U,	// QVFRINs
    0U,	// QVFRIP
    0U,	// QVFRIPs
    0U,	// QVFRIZ
    0U,	// QVFRIZs
    0U,	// QVFRSP
    0U,	// QVFRSPs
    0U,	// QVFRSQRTE
    0U,	// QVFRSQRTES
    0U,	// QVFRSQRTESs
    18U,	// QVFSEL
    18U,	// QVFSELb
    18U,	// QVFSELbb
    18U,	// QVFSELbs
    38U,	// QVFSUB
    38U,	// QVFSUBS
    38U,	// QVFSUBSs
    38U,	// QVFTSTNAN
    38U,	// QVFTSTNANb
    38U,	// QVFTSTNANbs
    18U,	// QVFXMADD
    18U,	// QVFXMADDS
    38U,	// QVFXMUL
    38U,	// QVFXMULS
    18U,	// QVFXXCPNMADD
    18U,	// QVFXXCPNMADDS
    18U,	// QVFXXMADD
    18U,	// QVFXXMADDS
    18U,	// QVFXXNPMADD
    18U,	// QVFXXNPMADDS
    0U,	// QVGPCI
    0U,	// QVLFCDUX
    0U,	// QVLFCDUXA
    0U,	// QVLFCDX
    0U,	// QVLFCDXA
    0U,	// QVLFCSUX
    0U,	// QVLFCSUXA
    0U,	// QVLFCSX
    0U,	// QVLFCSXA
    0U,	// QVLFCSXs
    0U,	// QVLFDUX
    0U,	// QVLFDUXA
    0U,	// QVLFDX
    0U,	// QVLFDXA
    0U,	// QVLFDXb
    0U,	// QVLFIWAX
    0U,	// QVLFIWAXA
    0U,	// QVLFIWZX
    0U,	// QVLFIWZXA
    0U,	// QVLFSUX
    0U,	// QVLFSUXA
    0U,	// QVLFSX
    0U,	// QVLFSXA
    0U,	// QVLFSXb
    0U,	// QVLFSXs
    0U,	// QVLPCLDX
    0U,	// QVLPCLSX
    0U,	// QVLPCLSXint
    0U,	// QVLPCRDX
    0U,	// QVLPCRSX
    0U,	// QVSTFCDUX
    0U,	// QVSTFCDUXA
    0U,	// QVSTFCDUXI
    0U,	// QVSTFCDUXIA
    0U,	// QVSTFCDX
    0U,	// QVSTFCDXA
    0U,	// QVSTFCDXI
    0U,	// QVSTFCDXIA
    0U,	// QVSTFCSUX
    0U,	// QVSTFCSUXA
    0U,	// QVSTFCSUXI
    0U,	// QVSTFCSUXIA
    0U,	// QVSTFCSX
    0U,	// QVSTFCSXA
    0U,	// QVSTFCSXI
    0U,	// QVSTFCSXIA
    0U,	// QVSTFCSXs
    0U,	// QVSTFDUX
    0U,	// QVSTFDUXA
    0U,	// QVSTFDUXI
    0U,	// QVSTFDUXIA
    0U,	// QVSTFDX
    0U,	// QVSTFDXA
    0U,	// QVSTFDXI
    0U,	// QVSTFDXIA
    0U,	// QVSTFDXb
    0U,	// QVSTFIWX
    0U,	// QVSTFIWXA
    0U,	// QVSTFSUX
    0U,	// QVSTFSUXA
    0U,	// QVSTFSUXI
    0U,	// QVSTFSUXIA
    0U,	// QVSTFSUXs
    0U,	// QVSTFSX
    0U,	// QVSTFSXA
    0U,	// QVSTFSXI
    0U,	// QVSTFSXIA
    0U,	// QVSTFSXs
    0U,	// RESTORE_CR
    0U,	// RESTORE_CRBIT
    0U,	// RESTORE_VRSAVE
    0U,	// RFCI
    0U,	// RFDI
    0U,	// RFEBB
    0U,	// RFI
    0U,	// RFID
    0U,	// RFMCI
    6U,	// RLDCL
    6U,	// RLDCLo
    6U,	// RLDCR
    6U,	// RLDCRo
    0U,	// RLDIC
    0U,	// RLDICL
    0U,	// RLDICL_32
    0U,	// RLDICL_32_64
    0U,	// RLDICL_32o
    0U,	// RLDICLo
    0U,	// RLDICR
    0U,	// RLDICR_32
    0U,	// RLDICRo
    0U,	// RLDICo
    0U,	// RLDIMI
    0U,	// RLDIMIo
    0U,	// RLWIMI
    0U,	// RLWIMI8
    0U,	// RLWIMI8o
    0U,	// RLWIMIo
    1602U,	// RLWINM
    1602U,	// RLWINM8
    1602U,	// RLWINM8o
    1602U,	// RLWINMo
    1606U,	// RLWNM
    1606U,	// RLWNM8
    1606U,	// RLWNM8o
    1606U,	// RLWNMo
    0U,	// ReadTB
    0U,	// SC
    0U,	// SELECT_CC_F16
    0U,	// SELECT_CC_F4
    0U,	// SELECT_CC_F8
    0U,	// SELECT_CC_I4
    0U,	// SELECT_CC_I8
    0U,	// SELECT_CC_QBRC
    0U,	// SELECT_CC_QFRC
    0U,	// SELECT_CC_QSRC
    0U,	// SELECT_CC_SPE
    0U,	// SELECT_CC_SPE4
    0U,	// SELECT_CC_VRRC
    0U,	// SELECT_CC_VSFRC
    0U,	// SELECT_CC_VSRC
    0U,	// SELECT_CC_VSSRC
    0U,	// SELECT_F16
    0U,	// SELECT_F4
    0U,	// SELECT_F8
    0U,	// SELECT_I4
    0U,	// SELECT_I8
    0U,	// SELECT_QBRC
    0U,	// SELECT_QFRC
    0U,	// SELECT_QSRC
    0U,	// SELECT_SPE
    0U,	// SELECT_SPE4
    0U,	// SELECT_VRRC
    0U,	// SELECT_VSFRC
    0U,	// SELECT_VSRC
    0U,	// SELECT_VSSRC
    0U,	// SETB
    0U,	// SLBIA
    0U,	// SLBIE
    0U,	// SLBIEG
    0U,	// SLBMFEE
    0U,	// SLBMFEV
    0U,	// SLBMTE
    0U,	// SLBSYNC
    38U,	// SLD
    38U,	// SLDo
    38U,	// SLW
    38U,	// SLW8
    38U,	// SLW8o
    38U,	// SLWo
    0U,	// SPELWZ
    0U,	// SPELWZX
    0U,	// SPESTW
    0U,	// SPESTWX
    0U,	// SPILL_CR
    0U,	// SPILL_CRBIT
    0U,	// SPILL_VRSAVE
    38U,	// SRAD
    32U,	// SRADI
    32U,	// SRADI_32
    32U,	// SRADIo
    38U,	// SRADo
    38U,	// SRAW
    34U,	// SRAWI
    34U,	// SRAWIo
    38U,	// SRAWo
    38U,	// SRD
    38U,	// SRDo
    38U,	// SRW
    38U,	// SRW8
    38U,	// SRW8o
    38U,	// SRWo
    0U,	// STB
    0U,	// STB8
    38U,	// STBCIX
    0U,	// STBCX
    0U,	// STBEPX
    0U,	// STBU
    0U,	// STBU8
    0U,	// STBUX
    0U,	// STBUX8
    0U,	// STBX
    0U,	// STBX8
    38U,	// STBXTLS
    38U,	// STBXTLS_
    38U,	// STBXTLS_32
    0U,	// STD
    34U,	// STDAT
    0U,	// STDBRX
    38U,	// STDCIX
    0U,	// STDCX
    0U,	// STDU
    0U,	// STDUX
    0U,	// STDX
    38U,	// STDXTLS
    38U,	// STDXTLS_
    0U,	// STFD
    0U,	// STFDEPX
    0U,	// STFDU
    0U,	// STFDUX
    0U,	// STFDX
    0U,	// STFIWX
    0U,	// STFS
    0U,	// STFSU
    0U,	// STFSUX
    0U,	// STFSX
    0U,	// STH
    0U,	// STH8
    0U,	// STHBRX
    38U,	// STHCIX
    0U,	// STHCX
    0U,	// STHEPX
    0U,	// STHU
    0U,	// STHU8
    0U,	// STHUX
    0U,	// STHUX8
    0U,	// STHX
    0U,	// STHX8
    38U,	// STHXTLS
    38U,	// STHXTLS_
    38U,	// STHXTLS_32
    0U,	// STMW
    0U,	// STOP
    34U,	// STSWI
    0U,	// STVEBX
    0U,	// STVEHX
    0U,	// STVEWX
    0U,	// STVX
    0U,	// STVXL
    0U,	// STW
    0U,	// STW8
    34U,	// STWAT
    0U,	// STWBRX
    38U,	// STWCIX
    0U,	// STWCX
    0U,	// STWEPX
    0U,	// STWU
    0U,	// STWU8
    0U,	// STWUX
    0U,	// STWUX8
    0U,	// STWX
    0U,	// STWX8
    38U,	// STWXTLS
    38U,	// STWXTLS_
    38U,	// STWXTLS_32
    0U,	// STXSD
    0U,	// STXSDX
    0U,	// STXSIBX
    0U,	// STXSIBXv
    0U,	// STXSIHX
    0U,	// STXSIHXv
    0U,	// STXSIWX
    0U,	// STXSSP
    0U,	// STXSSPX
    0U,	// STXV
    0U,	// STXVB16X
    0U,	// STXVD2X
    0U,	// STXVH8X
    38U,	// STXVL
    38U,	// STXVLL
    0U,	// STXVW4X
    0U,	// STXVX
    38U,	// SUBF
    38U,	// SUBF8
    38U,	// SUBF8o
    38U,	// SUBFC
    38U,	// SUBFC8
    38U,	// SUBFC8o
    38U,	// SUBFCo
    38U,	// SUBFE
    38U,	// SUBFE8
    38U,	// SUBFE8o
    38U,	// SUBFEo
    4U,	// SUBFIC
    4U,	// SUBFIC8
    0U,	// SUBFME
    0U,	// SUBFME8
    0U,	// SUBFME8o
    0U,	// SUBFMEo
    0U,	// SUBFZE
    0U,	// SUBFZE8
    0U,	// SUBFZE8o
    0U,	// SUBFZEo
    38U,	// SUBFo
    0U,	// SYNC
    0U,	// TABORT
    38U,	// TABORTDC
    34U,	// TABORTDCI
    38U,	// TABORTWC
    34U,	// TABORTWCI
    0U,	// TAILB
    0U,	// TAILB8
    0U,	// TAILBA
    0U,	// TAILBA8
    0U,	// TAILBCTR
    0U,	// TAILBCTR8
    0U,	// TBEGIN
    0U,	// TBEGIN_RET
    0U,	// TCHECK
    0U,	// TCHECK_RET
    0U,	// TCRETURNai
    0U,	// TCRETURNai8
    0U,	// TCRETURNdi
    0U,	// TCRETURNdi8
    0U,	// TCRETURNri
    0U,	// TCRETURNri8
    38U,	// TD
    4U,	// TDI
    0U,	// TEND
    0U,	// TLBIA
    0U,	// TLBIE
    0U,	// TLBIEL
    0U,	// TLBIVAX
    0U,	// TLBLD
    0U,	// TLBLI
    0U,	// TLBRE
    38U,	// TLBRE2
    0U,	// TLBSX
    38U,	// TLBSX2
    38U,	// TLBSX2D
    0U,	// TLBSYNC
    0U,	// TLBWE
    38U,	// TLBWE2
    0U,	// TRAP
    0U,	// TRECHKPT
    0U,	// TRECLAIM
    0U,	// TSR
    38U,	// TW
    4U,	// TWI
    0U,	// UPDATE_VRSAVE
    0U,	// UpdateGBR
    38U,	// VABSDUB
    38U,	// VABSDUH
    38U,	// VABSDUW
    38U,	// VADDCUQ
    38U,	// VADDCUW
    134U,	// VADDECUQ
    134U,	// VADDEUQM
    38U,	// VADDFP
    38U,	// VADDSBS
    38U,	// VADDSHS
    38U,	// VADDSWS
    38U,	// VADDUBM
    38U,	// VADDUBS
    38U,	// VADDUDM
    38U,	// VADDUHM
    38U,	// VADDUHS
    38U,	// VADDUQM
    38U,	// VADDUWM
    38U,	// VADDUWS
    38U,	// VAND
    38U,	// VANDC
    38U,	// VAVGSB
    38U,	// VAVGSH
    38U,	// VAVGSW
    38U,	// VAVGUB
    38U,	// VAVGUH
    38U,	// VAVGUW
    38U,	// VBPERMD
    38U,	// VBPERMQ
    1U,	// VCFSX
    1U,	// VCFSX_0
    1U,	// VCFUX
    1U,	// VCFUX_0
    38U,	// VCIPHER
    38U,	// VCIPHERLAST
    0U,	// VCLZB
    0U,	// VCLZD
    0U,	// VCLZH
    0U,	// VCLZLSBB
    0U,	// VCLZW
    38U,	// VCMPBFP
    38U,	// VCMPBFPo
    38U,	// VCMPEQFP
    38U,	// VCMPEQFPo
    38U,	// VCMPEQUB
    38U,	// VCMPEQUBo
    38U,	// VCMPEQUD
    38U,	// VCMPEQUDo
    38U,	// VCMPEQUH
    38U,	// VCMPEQUHo
    38U,	// VCMPEQUW
    38U,	// VCMPEQUWo
    38U,	// VCMPGEFP
    38U,	// VCMPGEFPo
    38U,	// VCMPGTFP
    38U,	// VCMPGTFPo
    38U,	// VCMPGTSB
    38U,	// VCMPGTSBo
    38U,	// VCMPGTSD
    38U,	// VCMPGTSDo
    38U,	// VCMPGTSH
    38U,	// VCMPGTSHo
    38U,	// VCMPGTSW
    38U,	// VCMPGTSWo
    38U,	// VCMPGTUB
    38U,	// VCMPGTUBo
    38U,	// VCMPGTUD
    38U,	// VCMPGTUDo
    38U,	// VCMPGTUH
    38U,	// VCMPGTUHo
    38U,	// VCMPGTUW
    38U,	// VCMPGTUWo
    38U,	// VCMPNEB
    38U,	// VCMPNEBo
    38U,	// VCMPNEH
    38U,	// VCMPNEHo
    38U,	// VCMPNEW
    38U,	// VCMPNEWo
    38U,	// VCMPNEZB
    38U,	// VCMPNEZBo
    38U,	// VCMPNEZH
    38U,	// VCMPNEZHo
    38U,	// VCMPNEZW
    38U,	// VCMPNEZWo
    1U,	// VCTSXS
    1U,	// VCTSXS_0
    1U,	// VCTUXS
    1U,	// VCTUXS_0
    0U,	// VCTZB
    0U,	// VCTZD
    0U,	// VCTZH
    0U,	// VCTZLSBB
    0U,	// VCTZW
    38U,	// VEQV
    0U,	// VEXPTEFP
    1U,	// VEXTRACTD
    1U,	// VEXTRACTUB
    1U,	// VEXTRACTUH
    1U,	// VEXTRACTUW
    0U,	// VEXTSB2D
    0U,	// VEXTSB2Ds
    0U,	// VEXTSB2W
    0U,	// VEXTSB2Ws
    0U,	// VEXTSH2D
    0U,	// VEXTSH2Ds
    0U,	// VEXTSH2W
    0U,	// VEXTSH2Ws
    0U,	// VEXTSW2D
    0U,	// VEXTSW2Ds
    38U,	// VEXTUBLX
    38U,	// VEXTUBRX
    38U,	// VEXTUHLX
    38U,	// VEXTUHRX
    38U,	// VEXTUWLX
    38U,	// VEXTUWRX
    0U,	// VGBBD
    0U,	// VINSERTB
    1U,	// VINSERTD
    0U,	// VINSERTH
    1U,	// VINSERTW
    0U,	// VLOGEFP
    134U,	// VMADDFP
    38U,	// VMAXFP
    38U,	// VMAXSB
    38U,	// VMAXSD
    38U,	// VMAXSH
    38U,	// VMAXSW
    38U,	// VMAXUB
    38U,	// VMAXUD
    38U,	// VMAXUH
    38U,	// VMAXUW
    134U,	// VMHADDSHS
    134U,	// VMHRADDSHS
    38U,	// VMINFP
    38U,	// VMINSB
    38U,	// VMINSD
    38U,	// VMINSH
    38U,	// VMINSW
    38U,	// VMINUB
    38U,	// VMINUD
    38U,	// VMINUH
    38U,	// VMINUW
    134U,	// VMLADDUHM
    38U,	// VMRGEW
    38U,	// VMRGHB
    38U,	// VMRGHH
    38U,	// VMRGHW
    38U,	// VMRGLB
    38U,	// VMRGLH
    38U,	// VMRGLW
    38U,	// VMRGOW
    134U,	// VMSUMMBM
    134U,	// VMSUMSHM
    134U,	// VMSUMSHS
    134U,	// VMSUMUBM
    134U,	// VMSUMUHM
    134U,	// VMSUMUHS
    0U,	// VMUL10CUQ
    38U,	// VMUL10ECUQ
    38U,	// VMUL10EUQ
    0U,	// VMUL10UQ
    38U,	// VMULESB
    38U,	// VMULESH
    38U,	// VMULESW
    38U,	// VMULEUB
    38U,	// VMULEUH
    38U,	// VMULEUW
    38U,	// VMULOSB
    38U,	// VMULOSH
    38U,	// VMULOSW
    38U,	// VMULOUB
    38U,	// VMULOUH
    38U,	// VMULOUW
    38U,	// VMULUWM
    38U,	// VNAND
    38U,	// VNCIPHER
    38U,	// VNCIPHERLAST
    0U,	// VNEGD
    0U,	// VNEGW
    134U,	// VNMSUBFP
    38U,	// VNOR
    38U,	// VOR
    38U,	// VORC
    134U,	// VPERM
    134U,	// VPERMR
    134U,	// VPERMXOR
    38U,	// VPKPX
    38U,	// VPKSDSS
    38U,	// VPKSDUS
    38U,	// VPKSHSS
    38U,	// VPKSHUS
    38U,	// VPKSWSS
    38U,	// VPKSWUS
    38U,	// VPKUDUM
    38U,	// VPKUDUS
    38U,	// VPKUHUM
    38U,	// VPKUHUS
    38U,	// VPKUWUM
    38U,	// VPKUWUS
    38U,	// VPMSUMB
    38U,	// VPMSUMD
    38U,	// VPMSUMH
    38U,	// VPMSUMW
    0U,	// VPOPCNTB
    0U,	// VPOPCNTD
    0U,	// VPOPCNTH
    0U,	// VPOPCNTW
    0U,	// VPRTYBD
    0U,	// VPRTYBQ
    0U,	// VPRTYBW
    0U,	// VREFP
    0U,	// VRFIM
    0U,	// VRFIN
    0U,	// VRFIP
    0U,	// VRFIZ
    38U,	// VRLB
    38U,	// VRLD
    38U,	// VRLDMI
    38U,	// VRLDNM
    38U,	// VRLH
    38U,	// VRLW
    38U,	// VRLWMI
    38U,	// VRLWNM
    0U,	// VRSQRTEFP
    0U,	// VSBOX
    134U,	// VSEL
    394U,	// VSHASIGMAD
    394U,	// VSHASIGMAW
    38U,	// VSL
    38U,	// VSLB
    38U,	// VSLD
    390U,	// VSLDOI
    38U,	// VSLH
    38U,	// VSLO
    38U,	// VSLV
    38U,	// VSLW
    1U,	// VSPLTB
    1U,	// VSPLTBs
    1U,	// VSPLTH
    1U,	// VSPLTHs
    0U,	// VSPLTISB
    0U,	// VSPLTISH
    0U,	// VSPLTISW
    1U,	// VSPLTW
    38U,	// VSR
    38U,	// VSRAB
    38U,	// VSRAD
    38U,	// VSRAH
    38U,	// VSRAW
    38U,	// VSRB
    38U,	// VSRD
    38U,	// VSRH
    38U,	// VSRO
    38U,	// VSRV
    38U,	// VSRW
    38U,	// VSUBCUQ
    38U,	// VSUBCUW
    134U,	// VSUBECUQ
    134U,	// VSUBEUQM
    38U,	// VSUBFP
    38U,	// VSUBSBS
    38U,	// VSUBSHS
    38U,	// VSUBSWS
    38U,	// VSUBUBM
    38U,	// VSUBUBS
    38U,	// VSUBUDM
    38U,	// VSUBUHM
    38U,	// VSUBUHS
    38U,	// VSUBUQM
    38U,	// VSUBUWM
    38U,	// VSUBUWS
    38U,	// VSUM2SWS
    38U,	// VSUM4SBS
    38U,	// VSUM4SHS
    38U,	// VSUM4UBS
    38U,	// VSUMSWS
    0U,	// VUPKHPX
    0U,	// VUPKHSB
    0U,	// VUPKHSH
    0U,	// VUPKHSW
    0U,	// VUPKLPX
    0U,	// VUPKLSB
    0U,	// VUPKLSH
    0U,	// VUPKLSW
    38U,	// VXOR
    12U,	// V_SET0
    12U,	// V_SET0B
    12U,	// V_SET0H
    0U,	// V_SETALLONES
    0U,	// V_SETALLONESB
    0U,	// V_SETALLONESH
    0U,	// WAIT
    0U,	// WRTEE
    0U,	// WRTEEI
    38U,	// XOR
    38U,	// XOR8
    38U,	// XOR8o
    8U,	// XORI
    8U,	// XORI8
    8U,	// XORIS
    8U,	// XORIS8
    38U,	// XORo
    0U,	// XSABSDP
    0U,	// XSABSQP
    38U,	// XSADDDP
    38U,	// XSADDQP
    38U,	// XSADDQPO
    38U,	// XSADDSP
    38U,	// XSCMPEQDP
    38U,	// XSCMPEXPDP
    38U,	// XSCMPEXPQP
    38U,	// XSCMPGEDP
    38U,	// XSCMPGTDP
    38U,	// XSCMPODP
    38U,	// XSCMPOQP
    38U,	// XSCMPUDP
    38U,	// XSCMPUQP
    38U,	// XSCPSGNDP
    38U,	// XSCPSGNQP
    0U,	// XSCVDPHP
    0U,	// XSCVDPQP
    0U,	// XSCVDPSP
    0U,	// XSCVDPSPN
    0U,	// XSCVDPSXDS
    0U,	// XSCVDPSXDSs
    0U,	// XSCVDPSXWS
    0U,	// XSCVDPSXWSs
    0U,	// XSCVDPUXDS
    0U,	// XSCVDPUXDSs
    0U,	// XSCVDPUXWS
    0U,	// XSCVDPUXWSs
    0U,	// XSCVHPDP
    0U,	// XSCVQPDP
    0U,	// XSCVQPDPO
    0U,	// XSCVQPSDZ
    0U,	// XSCVQPSWZ
    0U,	// XSCVQPUDZ
    0U,	// XSCVQPUWZ
    0U,	// XSCVSDQP
    0U,	// XSCVSPDP
    0U,	// XSCVSPDPN
    0U,	// XSCVSXDDP
    0U,	// XSCVSXDSP
    0U,	// XSCVUDQP
    0U,	// XSCVUXDDP
    0U,	// XSCVUXDSP
    38U,	// XSDIVDP
    38U,	// XSDIVQP
    38U,	// XSDIVQPO
    38U,	// XSDIVSP
    38U,	// XSIEXPDP
    38U,	// XSIEXPQP
    1U,	// XSMADDADP
    1U,	// XSMADDASP
    1U,	// XSMADDMDP
    1U,	// XSMADDMSP
    1U,	// XSMADDQP
    1U,	// XSMADDQPO
    38U,	// XSMAXCDP
    38U,	// XSMAXDP
    38U,	// XSMAXJDP
    38U,	// XSMINCDP
    38U,	// XSMINDP
    38U,	// XSMINJDP
    1U,	// XSMSUBADP
    1U,	// XSMSUBASP
    1U,	// XSMSUBMDP
    1U,	// XSMSUBMSP
    1U,	// XSMSUBQP
    1U,	// XSMSUBQPO
    38U,	// XSMULDP
    38U,	// XSMULQP
    38U,	// XSMULQPO
    38U,	// XSMULSP
    0U,	// XSNABSDP
    0U,	// XSNABSQP
    0U,	// XSNEGDP
    0U,	// XSNEGQP
    1U,	// XSNMADDADP
    1U,	// XSNMADDASP
    1U,	// XSNMADDMDP
    1U,	// XSNMADDMSP
    1U,	// XSNMADDQP
    1U,	// XSNMADDQPO
    1U,	// XSNMSUBADP
    1U,	// XSNMSUBASP
    1U,	// XSNMSUBMDP
    1U,	// XSNMSUBMSP
    1U,	// XSNMSUBQP
    1U,	// XSNMSUBQPO
    0U,	// XSRDPI
    0U,	// XSRDPIC
    0U,	// XSRDPIM
    0U,	// XSRDPIP
    0U,	// XSRDPIZ
    0U,	// XSREDP
    0U,	// XSRESP
    0U,	// XSRQPI
    0U,	// XSRQPIX
    0U,	// XSRQPXP
    0U,	// XSRSP
    0U,	// XSRSQRTEDP
    0U,	// XSRSQRTESP
    0U,	// XSSQRTDP
    0U,	// XSSQRTQP
    0U,	// XSSQRTQPO
    0U,	// XSSQRTSP
    38U,	// XSSUBDP
    38U,	// XSSUBQP
    38U,	// XSSUBQPO
    38U,	// XSSUBSP
    38U,	// XSTDIVDP
    0U,	// XSTSQRTDP
    1U,	// XSTSTDCDP
    1U,	// XSTSTDCQP
    1U,	// XSTSTDCSP
    0U,	// XSXEXPDP
    0U,	// XSXEXPQP
    0U,	// XSXSIGDP
    0U,	// XSXSIGQP
    0U,	// XVABSDP
    0U,	// XVABSSP
    38U,	// XVADDDP
    38U,	// XVADDSP
    38U,	// XVCMPEQDP
    38U,	// XVCMPEQDPo
    38U,	// XVCMPEQSP
    38U,	// XVCMPEQSPo
    38U,	// XVCMPGEDP
    38U,	// XVCMPGEDPo
    38U,	// XVCMPGESP
    38U,	// XVCMPGESPo
    38U,	// XVCMPGTDP
    38U,	// XVCMPGTDPo
    38U,	// XVCMPGTSP
    38U,	// XVCMPGTSPo
    38U,	// XVCPSGNDP
    38U,	// XVCPSGNSP
    0U,	// XVCVDPSP
    0U,	// XVCVDPSXDS
    0U,	// XVCVDPSXWS
    0U,	// XVCVDPUXDS
    0U,	// XVCVDPUXWS
    0U,	// XVCVHPSP
    0U,	// XVCVSPDP
    0U,	// XVCVSPHP
    0U,	// XVCVSPSXDS
    0U,	// XVCVSPSXWS
    0U,	// XVCVSPUXDS
    0U,	// XVCVSPUXWS
    0U,	// XVCVSXDDP
    0U,	// XVCVSXDSP
    0U,	// XVCVSXWDP
    0U,	// XVCVSXWSP
    0U,	// XVCVUXDDP
    0U,	// XVCVUXDSP
    0U,	// XVCVUXWDP
    0U,	// XVCVUXWSP
    38U,	// XVDIVDP
    38U,	// XVDIVSP
    38U,	// XVIEXPDP
    38U,	// XVIEXPSP
    1U,	// XVMADDADP
    1U,	// XVMADDASP
    1U,	// XVMADDMDP
    1U,	// XVMADDMSP
    38U,	// XVMAXDP
    38U,	// XVMAXSP
    38U,	// XVMINDP
    38U,	// XVMINSP
    1U,	// XVMSUBADP
    1U,	// XVMSUBASP
    1U,	// XVMSUBMDP
    1U,	// XVMSUBMSP
    38U,	// XVMULDP
    38U,	// XVMULSP
    0U,	// XVNABSDP
    0U,	// XVNABSSP
    0U,	// XVNEGDP
    0U,	// XVNEGSP
    1U,	// XVNMADDADP
    1U,	// XVNMADDASP
    1U,	// XVNMADDMDP
    1U,	// XVNMADDMSP
    1U,	// XVNMSUBADP
    1U,	// XVNMSUBASP
    1U,	// XVNMSUBMDP
    1U,	// XVNMSUBMSP
    0U,	// XVRDPI
    0U,	// XVRDPIC
    0U,	// XVRDPIM
    0U,	// XVRDPIP
    0U,	// XVRDPIZ
    0U,	// XVREDP
    0U,	// XVRESP
    0U,	// XVRSPI
    0U,	// XVRSPIC
    0U,	// XVRSPIM
    0U,	// XVRSPIP
    0U,	// XVRSPIZ
    0U,	// XVRSQRTEDP
    0U,	// XVRSQRTESP
    0U,	// XVSQRTDP
    0U,	// XVSQRTSP
    38U,	// XVSUBDP
    38U,	// XVSUBSP
    38U,	// XVTDIVDP
    38U,	// XVTDIVSP
    0U,	// XVTSQRTDP
    0U,	// XVTSQRTSP
    1U,	// XVTSTDCDP
    1U,	// XVTSTDCSP
    0U,	// XVXEXPDP
    0U,	// XVXEXPSP
    0U,	// XVXSIGDP
    0U,	// XVXSIGSP
    0U,	// XXBRD
    0U,	// XXBRH
    0U,	// XXBRQ
    0U,	// XXBRW
    20U,	// XXEXTRACTUW
    1U,	// XXINSERTW
    38U,	// XXLAND
    38U,	// XXLANDC
    38U,	// XXLEQV
    38U,	// XXLNAND
    38U,	// XXLNOR
    38U,	// XXLOR
    38U,	// XXLORC
    38U,	// XXLORf
    38U,	// XXLXOR
    12U,	// XXLXORdpz
    12U,	// XXLXORspz
    12U,	// XXLXORz
    38U,	// XXMRGHW
    38U,	// XXMRGLW
    38U,	// XXPERM
    262U,	// XXPERMDI
    462U,	// XXPERMDIs
    38U,	// XXPERMR
    134U,	// XXSEL
    262U,	// XXSLDWI
    462U,	// XXSLDWIs
    0U,	// XXSPLTIB
    16U,	// XXSPLTW
    16U,	// XXSPLTWs
    22U,	// gBC
    24U,	// gBCA
    0U,	// gBCAat
    38U,	// gBCCTR
    38U,	// gBCCTRL
    22U,	// gBCL
    24U,	// gBCLA
    0U,	// gBCLAat
    38U,	// gBCLR
    38U,	// gBCLRL
    0U,	// gBCLat
    0U,	// gBCat
  };

  unsigned int opcode = MCInst_getOpcode(MI);
  // printf("opcode = %u\n", opcode);

  // Emit the opcode for the instruction.
  uint64_t Bits = 0;
  Bits |= (uint64_t)OpInfo0[opcode] << 0;
  Bits |= (uint64_t)OpInfo1[opcode] << 32;
#ifndef CAPSTONE_DIET
  SStream_concat0(O, AsmStrs+(Bits & 16383)-1);
#endif


  // Fragment 0 encoded into 5 bits for 19 unique commands.
  // printf("Fragment 0: %"PRIu64"\n", ((Bits >> 14) & 31));
  switch ((Bits >> 14) & 31) {
  default: // unreachable
  case 0:
    // DBG_VALUE, DBG_LABEL, BUNDLE, LIFETIME_START, LIFETIME_END, FENTRY_CAL...
    return;
    break;
  case 1:
    // CLRLSLDI, CLRLSLDIo, CLRLSLWI, CLRLSLWIo, CLRRDI, CLRRDIo, CLRRWI, CLR...
    printOperand(MI, 0, O);
    break;
  case 2:
    // DCBFL, DCBFLP, DCBFx, DCBTCT, DCBTDS, DCBTSTCT, DCBTSTDS, DCBTSTT, DCB...
    printMemRegReg(MI, 0, O);
    break;
  case 3:
    // ADJCALLSTACKDOWN, ADJCALLSTACKUP
    printU16ImmOperand(MI, 0, O);
    SStream_concat0(O, " ");
    printU16ImmOperand(MI, 1, O);
    return;
    break;
  case 4:
    // B, BCLalways, BDNZ, BDNZ8, BDNZL, BDNZLm, BDNZLp, BDNZm, BDNZp, BDZ, B...
    printBranchOperand(MI, 0, O);
    break;
  case 5:
    // BA, BDNZA, BDNZAm, BDNZAp, BDNZLA, BDNZLAm, BDNZLAp, BDZA, BDZAm, BDZA...
    printAbsBranchOperand(MI, 0, O);
    break;
  case 6:
    // BCC, BCCA, BCCCTR, BCCCTR8, BCCCTRL, BCCCTRL8, BCCL, BCCLA, BCCLR, BCC...
    printPredicateOperand(MI, 0, O, "cc");
    break;
  case 7:
    // BCTRL8_LDinto_toc
    printMemRegImm(MI, 0, O);
    return;
    break;
  case 8:
    // BL8_NOP_TLS, BL8_TLS, BL8_TLS_, BL_TLS
    printTLSCall(MI, 0, O);
    break;
  case 9:
    // DCBF, DCBT, DCBTST
    printMemRegReg(MI, 1, O);
    SStream_concat0(O, ", ");
    printU5ImmOperand(MI, 0, O);
    return;
    break;
  case 10:
    // DCBTEP, DCBTSTEP
    printU5ImmOperand(MI, 2, O);
    SStream_concat0(O, ", ");
    printMemRegReg(MI, 0, O);
    return;
    break;
  case 11:
    // DSS, MBAR, MTFSB0, MTFSB1, TABORTDC, TABORTDCI, TABORTWC, TABORTWCI, T...
    printU5ImmOperand(MI, 0, O);
    break;
  case 12:
    // DST, DST64, DSTST, DSTST64, DSTSTT, DSTSTT64, DSTT, DSTT64, MTDCR, MTV...
    printOperand(MI, 1, O);
    break;
  case 13:
    // ICBLC, ICBLQ, ICBT, ICBTLS
    printU4ImmOperand(MI, 0, O);
    SStream_concat0(O, ", ");
    printMemRegReg(MI, 1, O);
    return;
    break;
  case 14:
    // MTOCRF, MTOCRF8
    printcrbitm(MI, 0, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 1, O);
    return;
    break;
  case 15:
    // MTSR
    printU4ImmOperand(MI, 1, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 0, O);
    return;
    break;
  case 16:
    // RFEBB, TBEGIN, TEND, TSR
    printU1ImmOperand(MI, 0, O);
    return;
    break;
  case 17:
    // XSRQPI, XSRQPIX, XSRQPXP
    printU1ImmOperand(MI, 1, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 0, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 2, O);
    SStream_concat0(O, ", ");
    printU2ImmOperand(MI, 3, O);
    return;
    break;
  case 18:
    // gBCAat, gBCLAat, gBCLat, gBCat
    printATBitsAsHint(MI, 1, O);
    SStream_concat0(O, " ");
    printU5ImmOperand(MI, 0, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 2, O);
    SStream_concat0(O, ", ");
    break;
  }


  // Fragment 1 encoded into 5 bits for 20 unique commands.
  // printf("Fragment 1: %"PRIu64"\n", ((Bits >> 19) & 31));
  switch ((Bits >> 19) & 31) {
  default: // unreachable
  case 0:
    // CLRLSLDI, CLRLSLDIo, CLRLSLWI, CLRLSLWIo, CLRRDI, CLRRDIo, CLRRWI, CLR...
    SStream_concat0(O, ", ");
    break;
  case 1:
    // DCBFL, DCBFLP, DCBFx, DCBTSTT, DCBTSTx, DCBTT, DCBTx, B, BA, BCLalways...
    return;
    break;
  case 2:
    // ATOMIC_CMP_SWAP_I16, ATOMIC_CMP_SWAP_I32, TCRETURNai, TCRETURNai8, TCR...
    SStream_concat0(O, " ");
    break;
  case 3:
    // BCC, CTRL_DEP
    printPredicateOperand(MI, 0, O, "pm");
    SStream_concat0(O, " ");
    printPredicateOperand(MI, 0, O, "reg");
    SStream_concat0(O, ", ");
    printBranchOperand(MI, 2, O);
    return;
    break;
  case 4:
    // BCCA
    SStream_concat0(O, "a");
    printPredicateOperand(MI, 0, O, "pm");
    SStream_concat0(O, " ");
    printPredicateOperand(MI, 0, O, "reg");
    SStream_concat0(O, ", ");
    printAbsBranchOperand(MI, 2, O);
    return;
    break;
  case 5:
    // BCCCTR, BCCCTR8
    SStream_concat0(O, "ctr");
    printPredicateOperand(MI, 0, O, "pm");
    SStream_concat0(O, " ");
    printPredicateOperand(MI, 0, O, "reg");
    return;
    break;
  case 6:
    // BCCCTRL, BCCCTRL8
    SStream_concat0(O, "ctrl");
    printPredicateOperand(MI, 0, O, "pm");
    SStream_concat0(O, " ");
    printPredicateOperand(MI, 0, O, "reg");
    return;
    break;
  case 7:
    // BCCL
    SStream_concat0(O, "l");
    printPredicateOperand(MI, 0, O, "pm");
    SStream_concat0(O, " ");
    printPredicateOperand(MI, 0, O, "reg");
    SStream_concat0(O, ", ");
    printBranchOperand(MI, 2, O);
    return;
    break;
  case 8:
    // BCCLA
    SStream_concat0(O, "la");
    printPredicateOperand(MI, 0, O, "pm");
    SStream_concat0(O, " ");
    printPredicateOperand(MI, 0, O, "reg");
    SStream_concat0(O, ", ");
    printAbsBranchOperand(MI, 2, O);
    return;
    break;
  case 9:
    // BCCLR
    SStream_concat0(O, "lr");
    printPredicateOperand(MI, 0, O, "pm");
    SStream_concat0(O, " ");
    printPredicateOperand(MI, 0, O, "reg");
    return;
    break;
  case 10:
    // BCCLRL
    SStream_concat0(O, "lrl");
    printPredicateOperand(MI, 0, O, "pm");
    SStream_concat0(O, " ");
    printPredicateOperand(MI, 0, O, "reg");
    return;
    break;
  case 11:
    // BCCTR, BCCTR8, BCCTR8n, BCCTRL, BCCTRL8, BCCTRL8n, BCCTRLn, BCCTRn, BC...
    SStream_concat0(O, ", 0");
    op_addImm(MI, 0);
    return;
    break;
  case 12:
    // BL8_NOP, BL8_NOP_TLS, BLA8_NOP
    SStream_concat0(O, "\n\tnop");
    return;
    break;
  case 13:
    // EVSEL, TLBIE
    SStream_concat0(O, ",");
    break;
  case 14:
    // MFTB8
    SStream_concat0(O, ", 268");
    op_addImm(MI, 268);
    return;
    break;
  case 15:
    // MFVRSAVE, MFVRSAVEv
    SStream_concat0(O, ", 256");
    op_addImm(MI, 256);
    return;
    break;
  case 16:
    // QVLPCLSXint
    SStream_concat0(O, ", 0, ");
    op_addImm(MI, 0);
    printOperand(MI, 1, O);
    return;
    break;
  case 17:
    // V_SETALLONES, V_SETALLONESB, V_SETALLONESH
    SStream_concat0(O, ", -1");
    op_addImm(MI, -1);
    return;
    break;
  case 18:
    // gBCAat, gBCLAat
    printAbsBranchOperand(MI, 3, O);
    return;
    break;
  case 19:
    // gBCLat, gBCat
    printBranchOperand(MI, 3, O);
    return;
    break;
  }


  // Fragment 2 encoded into 5 bits for 23 unique commands.
  // printf("Fragment 2: %"PRIu64"\n", ((Bits >> 24) & 31));
  switch ((Bits >> 24) & 31) {
  default: // unreachable
  case 0:
    // CLRLSLDI, CLRLSLDIo, CLRLSLWI, CLRLSLWIo, CLRRDI, CLRRDIo, CLRRWI, CLR...
    printOperand(MI, 1, O);
    break;
  case 1:
    // DCBTCT, DCBTDS, DCBTSTCT, DCBTSTDS, EVADDIW
    printU5ImmOperand(MI, 2, O);
    break;
  case 2:
    // LAx, EVLDD, EVLDH, EVLDW, EVLHHESPLAT, EVLHHOSSPLAT, EVLHHOUSPLAT, EVL...
    printMemRegImm(MI, 1, O);
    return;
    break;
  case 3:
    // SUBPCIS, LI, LI8, LIS, LIS8
    printS16ImmOperand(MI, 1, O);
    return;
    break;
  case 4:
    // ATOMIC_CMP_SWAP_I16, ATOMIC_CMP_SWAP_I32, EVLDDX, EVLDHX, EVLDWX, EVLH...
    printMemRegReg(MI, 1, O);
    break;
  case 5:
    // BC, BCL, BCLn, BCn
    printBranchOperand(MI, 1, O);
    return;
    break;
  case 6:
    // CMPRB, CMPRB8
    printU1ImmOperand(MI, 1, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 2, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 3, O);
    return;
    break;
  case 7:
    // CRSET, CRUNSET, MTDCR, TLBIE, V_SET0, V_SET0B, V_SET0H, XXLXORdpz, XXL...
    printOperand(MI, 0, O);
    break;
  case 8:
    // DST, DST64, DSTST, DSTST64, DSTSTT, DSTSTT64, DSTT, DSTT64, RLDIMI, RL...
    printOperand(MI, 2, O);
    SStream_concat0(O, ", ");
    break;
  case 9:
    // EVSPLATFI, EVSPLATI, VSPLTISB, VSPLTISH, VSPLTISW
    printS5ImmOperand(MI, 1, O);
    return;
    break;
  case 10:
    // EVSUBIFW
    printU5ImmOperand(MI, 1, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 2, O);
    return;
    break;
  case 11:
    // LA
    printS16ImmOperand(MI, 2, O);
    SStream_concat0(O, "(");
    printOperand(MI, 1, O);
    SStream_concat0(O, ")");
    return;
    break;
  case 12:
    // LBZU, LBZU8, LDU, LFDU, LFSU, LHAU, LHAU8, LHZU, LHZU8, LWZU, LWZU8, S...
    printMemRegImm(MI, 2, O);
    return;
    break;
  case 13:
    // LBZUX, LBZUX8, LDUX, LFDUX, LFSUX, LHAUX, LHAUX8, LHZUX, LHZUX8, LWAUX...
    printMemRegReg(MI, 2, O);
    return;
    break;
  case 14:
    // MFBHRBE
    printU10ImmOperand(MI, 1, O);
    return;
    break;
  case 15:
    // MFFSCDRNI
    printU3ImmOperand(MI, 1, O);
    return;
    break;
  case 16:
    // MFFSCRNI
    printU2ImmOperand(MI, 1, O);
    return;
    break;
  case 17:
    // MFOCRF, MFOCRF8
    printcrbitm(MI, 1, O);
    return;
    break;
  case 18:
    // MFSR
    printU4ImmOperand(MI, 1, O);
    return;
    break;
  case 19:
    // PSQ_L, PSQ_LU, PSQ_ST, PSQ_STU
    printPSMemRegImm(MI, 1, O);
    SStream_concat0(O, ", ");
    printU1ImmOperand(MI, 3, O);
    SStream_concat0(O, ", ");
    printU3ImmOperand(MI, 4, O);
    return;
    break;
  case 20:
    // QVGPCI
    printU12ImmOperand(MI, 1, O);
    return;
    break;
  case 21:
    // VINSERTB, VINSERTH
    printOperand(MI, 3, O);
    SStream_concat0(O, ", ");
    printU4ImmOperand(MI, 2, O);
    return;
    break;
  case 22:
    // XXSPLTIB
    printU8ImmOperand(MI, 1, O);
    return;
    break;
  }


  // Fragment 3 encoded into 4 bits for 14 unique commands.
  // printf("Fragment 3: %"PRIu64"\n", ((Bits >> 29) & 15));
  switch ((Bits >> 29) & 15) {
  default: // unreachable
  case 0:
    // CLRLSLDI, CLRLSLDIo, CLRLSLWI, CLRLSLWIo, CLRRDI, CLRRDIo, CLRRWI, CLR...
    SStream_concat0(O, ", ");
    break;
  case 1:
    // CP_COPY_FIRST, CP_COPYx, CP_PASTE_LAST, CP_PASTEx, DCBTCT, DCBTDS, DCB...
    return;
    break;
  case 2:
    // ATOMIC_CMP_SWAP_I16, ATOMIC_CMP_SWAP_I32
    SStream_concat0(O, " ");
    printOperand(MI, 3, O);
    SStream_concat0(O, " ");
    printOperand(MI, 4, O);
    return;
    break;
  case 3:
    // DST, DST64, DSTST, DSTST64, DSTSTT, DSTSTT64, DSTT, DSTT64
    printU5ImmOperand(MI, 0, O);
    return;
    break;
  case 4:
    // EVSEL
    SStream_concat0(O, ",");
    printOperand(MI, 2, O);
    return;
    break;
  case 5:
    // LBARXL, LDARXL, LHARXL, LWARXL
    SStream_concat0(O, ", 1");
    op_addImm(MI, 1);
    return;
    break;
  case 6:
    // RLDIMI, RLDIMIo
    printU6ImmOperand(MI, 3, O);
    SStream_concat0(O, ", ");
    printU6ImmOperand(MI, 4, O);
    return;
    break;
  case 7:
    // RLWIMI, RLWIMI8, RLWIMI8o, RLWIMIo
    printU5ImmOperand(MI, 3, O);
    SStream_concat0(O, ", ");
    printU5ImmOperand(MI, 4, O);
    SStream_concat0(O, ", ");
    printU5ImmOperand(MI, 5, O);
    return;
    break;
  case 8:
    // VCFSX, VCFUX, VCTSXS, VCTUXS, VSPLTB, VSPLTBs, VSPLTH, VSPLTHs, VSPLTW
    printU5ImmOperand(MI, 1, O);
    return;
    break;
  case 9:
    // VCFSX_0, VCFUX_0, VCTSXS_0, VCTUXS_0
    SStream_concat0(O, ", 0");
    op_addImm(MI, 0);
    return;
    break;
  case 10:
    // VEXTRACTD, VEXTRACTUB, VEXTRACTUH, VEXTRACTUW, VINSERTD, VINSERTW
    printU4ImmOperand(MI, 1, O);
    return;
    break;
  case 11:
    // XSMADDADP, XSMADDASP, XSMADDMDP, XSMADDMSP, XSMADDQP, XSMADDQPO, XSMSU...
    printOperand(MI, 3, O);
    return;
    break;
  case 12:
    // XSTSTDCDP, XSTSTDCQP, XSTSTDCSP, XVTSTDCDP, XVTSTDCSP
    printU7ImmOperand(MI, 1, O);
    return;
    break;
  case 13:
    // XXINSERTW
    printU4ImmOperand(MI, 3, O);
    return;
    break;
  }


  // Fragment 4 encoded into 4 bits for 13 unique commands.
  // printf("Fragment 4: %"PRIu64"\n", ((Bits >> 33) & 15));
  switch ((Bits >> 33) & 15) {
  default: // unreachable
  case 0:
    // CLRLSLDI, CLRLSLDIo, CLRRDI, CLRRDIo, EXTLDI, EXTLDIo, EXTRDI, EXTRDIo...
    printU6ImmOperand(MI, 2, O);
    break;
  case 1:
    // CLRLSLWI, CLRLSLWIo, CLRRWI, CLRRWIo, EXTLWI, EXTLWIo, EXTRWI, EXTRWIo...
    printU5ImmOperand(MI, 2, O);
    break;
  case 2:
    // SUBI, SUBIC, SUBICo, SUBIS, ADDI, ADDI8, ADDIC, ADDIC8, ADDICo, ADDIS,...
    printS16ImmOperand(MI, 2, O);
    return;
    break;
  case 3:
    // ADD4, ADD4TLS, ADD4o, ADD8, ADD8TLS, ADD8TLS_, ADD8o, ADDC, ADDC8, ADD...
    printOperand(MI, 2, O);
    break;
  case 4:
    // ANDISo, ANDISo8, ANDIo, ANDIo8, CMPLDI, CMPLWI, ORI, ORI8, ORIS, ORIS8...
    printU16ImmOperand(MI, 2, O);
    return;
    break;
  case 5:
    // BCDCFNo, BCDCFSQo, BCDCFZo, BCDCTZo, BCDSETSGNo, CP_COPY, CP_COPY8, CP...
    printU1ImmOperand(MI, 2, O);
    break;
  case 6:
    // CRSET, CRUNSET, V_SET0, V_SET0B, V_SET0H, XXLXORdpz, XXLXORspz, XXLXOR...
    printOperand(MI, 0, O);
    return;
    break;
  case 7:
    // EVADDIW, XXPERMDIs, XXSLDWIs
    printOperand(MI, 1, O);
    break;
  case 8:
    // QVESPLATI, QVESPLATIb, QVESPLATIs, XXSPLTW, XXSPLTWs
    printU2ImmOperand(MI, 2, O);
    return;
    break;
  case 9:
    // QVFMADD, QVFMADDS, QVFMADDSs, QVFMSUB, QVFMSUBS, QVFMSUBSs, QVFNMADD, ...
    printOperand(MI, 3, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 2, O);
    return;
    break;
  case 10:
    // XXEXTRACTUW
    printU4ImmOperand(MI, 2, O);
    return;
    break;
  case 11:
    // gBC, gBCL
    printBranchOperand(MI, 2, O);
    return;
    break;
  case 12:
    // gBCA, gBCLA
    printAbsBranchOperand(MI, 2, O);
    return;
    break;
  }


  // Fragment 5 encoded into 1 bits for 2 unique commands.
  // printf("Fragment 5: %"PRIu64"\n", ((Bits >> 37) & 1));
  if ((Bits >> 37) & 1) {
    // CLRRDI, CLRRDIo, CLRRWI, CLRRWIo, ROTRDI, ROTRDIo, ROTRWI, ROTRWIo, SL...
    return;
  } else {
    // CLRLSLDI, CLRLSLDIo, CLRLSLWI, CLRLSLWIo, EXTLDI, EXTLDIo, EXTLWI, EXT...
    SStream_concat0(O, ", ");
  }


  // Fragment 6 encoded into 3 bits for 8 unique commands.
  // printf("Fragment 6: %"PRIu64"\n", ((Bits >> 38) & 7));
  switch ((Bits >> 38) & 7) {
  default: // unreachable
  case 0:
    // CLRLSLDI, CLRLSLDIo, EXTLDI, EXTLDIo, EXTRDI, EXTRDIo, INSRDI, INSRDIo...
    printU6ImmOperand(MI, 3, O);
    return;
    break;
  case 1:
    // CLRLSLWI, CLRLSLWIo, EXTLWI, EXTLWIo, EXTRWI, EXTRWIo, INSLWI, INSLWIo...
    printU5ImmOperand(MI, 3, O);
    break;
  case 2:
    // RLWIMIbm, RLWIMIobm, RLWINMbm, RLWINMobm, RLWNMbm, RLWNMobm, FMADD, FM...
    printOperand(MI, 3, O);
    return;
    break;
  case 3:
    // BCDSRo, BCDSo, BCDTRUNCo, PSQ_LUX, PSQ_LX, PSQ_STUX, PSQ_STX
    printU1ImmOperand(MI, 3, O);
    break;
  case 4:
    // QVALIGNI, QVALIGNIb, QVALIGNIs, XXPERMDI, XXSLDWI
    printU2ImmOperand(MI, 3, O);
    return;
    break;
  case 5:
    // QVFLOGICAL, QVFLOGICALb, QVFLOGICALs
    printU12ImmOperand(MI, 3, O);
    return;
    break;
  case 6:
    // VSHASIGMAD, VSHASIGMAW, VSLDOI
    printU4ImmOperand(MI, 3, O);
    return;
    break;
  case 7:
    // XXPERMDIs, XXSLDWIs
    printU2ImmOperand(MI, 2, O);
    return;
    break;
  }


  // Fragment 7 encoded into 1 bits for 2 unique commands.
  // printf("Fragment 7: %"PRIu64"\n", ((Bits >> 41) & 1));
  if ((Bits >> 41) & 1) {
    // PSQ_LUX, PSQ_LX, PSQ_STUX, PSQ_STX, RLWINM, RLWINM8, RLWINM8o, RLWINMo...
    SStream_concat0(O, ", ");
  } else {
    // CLRLSLWI, CLRLSLWIo, EXTLWI, EXTLWIo, EXTRWI, EXTRWIo, INSLWI, INSLWIo...
    return;
  }


  // Fragment 8 encoded into 1 bits for 2 unique commands.
  // printf("Fragment 8: %"PRIu64"\n", ((Bits >> 42) & 1));
  if ((Bits >> 42) & 1) {
    // RLWINM, RLWINM8, RLWINM8o, RLWINMo, RLWNM, RLWNM8, RLWNM8o, RLWNMo
    printU5ImmOperand(MI, 4, O);
    return;
  } else {
    // PSQ_LUX, PSQ_LX, PSQ_STUX, PSQ_STX
    printU3ImmOperand(MI, 4, O);
    return;
  }

}



#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

static char *printAliasInstr(MCInst *MI, SStream *OS, MCRegisterInfo *MRI)
{
  #define GETREGCLASS_CONTAIN(_class, _reg) MCRegisterClass_contains(MCRegisterInfo_getRegClass(MRI, _class), MCOperand_getReg(MCInst_getOperand(MI, _reg)))
  unsigned int I = 0, OpIdx, PrintMethodIdx;
  char *tmpString;
  const char *AsmString;
  switch (MCInst_getOpcode(MI)) {
  default: return false;
  case PPC_ADDPCIS:
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_G8RCRegClassID, 0) &&
        MCOperand_isImm(MCInst_getOperand(MI, 1)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 1)) == 0) {
      // (ADDPCIS g8rc:$RT, 0)
      AsmString = "lnia $\x01";
      break;
    }
    return NULL;
  case PPC_BCC:
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 12 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRRCRegClassID, 1)) {
      // (BCC 12, crrc:$cc, condbrtarget:$dst)
      AsmString = "blt $\x02, $\xFF\x03\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 12 &&
        MCOperand_getReg(MCInst_getOperand(MI, 1)) == PPC_CR0) {
      // (BCC 12, CR0, condbrtarget:$dst)
      AsmString = "blt $\xFF\x03\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 14 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRRCRegClassID, 1)) {
      // (BCC 14, crrc:$cc, condbrtarget:$dst)
      AsmString = "blt- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 14 &&
        MCOperand_getReg(MCInst_getOperand(MI, 1)) == PPC_CR0) {
      // (BCC 14, CR0, condbrtarget:$dst)
      AsmString = "blt- $\xFF\x03\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 15 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRRCRegClassID, 1)) {
      // (BCC 15, crrc:$cc, condbrtarget:$dst)
      AsmString = "blt+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 15 &&
        MCOperand_getReg(MCInst_getOperand(MI, 1)) == PPC_CR0) {
      // (BCC 15, CR0, condbrtarget:$dst)
      AsmString = "blt+ $\xFF\x03\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 44 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRRCRegClassID, 1)) {
      // (BCC 44, crrc:$cc, condbrtarget:$dst)
      AsmString = "bgt $\x02, $\xFF\x03\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 44 &&
        MCOperand_getReg(MCInst_getOperand(MI, 1)) == PPC_CR0) {
      // (BCC 44, CR0, condbrtarget:$dst)
      AsmString = "bgt $\xFF\x03\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 46 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRRCRegClassID, 1)) {
      // (BCC 46, crrc:$cc, condbrtarget:$dst)
      AsmString = "bgt- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 46 &&
        MCOperand_getReg(MCInst_getOperand(MI, 1)) == PPC_CR0) {
      // (BCC 46, CR0, condbrtarget:$dst)
      AsmString = "bgt- $\xFF\x03\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 47 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRRCRegClassID, 1)) {
      // (BCC 47, crrc:$cc, condbrtarget:$dst)
      AsmString = "bgt+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 47 &&
        MCOperand_getReg(MCInst_getOperand(MI, 1)) == PPC_CR0) {
      // (BCC 47, CR0, condbrtarget:$dst)
      AsmString = "bgt+ $\xFF\x03\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 76 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRRCRegClassID, 1)) {
      // (BCC 76, crrc:$cc, condbrtarget:$dst)
      AsmString = "beq $\x02, $\xFF\x03\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 76 &&
        MCOperand_getReg(MCInst_getOperand(MI, 1)) == PPC_CR0) {
      // (BCC 76, CR0, condbrtarget:$dst)
      AsmString = "beq $\xFF\x03\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 78 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRRCRegClassID, 1)) {
      // (BCC 78, crrc:$cc, condbrtarget:$dst)
      AsmString = "beq- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 78 &&
        MCOperand_getReg(MCInst_getOperand(MI, 1)) == PPC_CR0) {
      // (BCC 78, CR0, condbrtarget:$dst)
      AsmString = "beq- $\xFF\x03\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 79 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRRCRegClassID, 1)) {
      // (BCC 79, crrc:$cc, condbrtarget:$dst)
      AsmString = "beq+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 79 &&
        MCOperand_getReg(MCInst_getOperand(MI, 1)) == PPC_CR0) {
      // (BCC 79, CR0, condbrtarget:$dst)
      AsmString = "beq+ $\xFF\x03\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 68 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRRCRegClassID, 1)) {
      // (BCC 68, crrc:$cc, condbrtarget:$dst)
      AsmString = "bne $\x02, $\xFF\x03\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 68 &&
        MCOperand_getReg(MCInst_getOperand(MI, 1)) == PPC_CR0) {
      // (BCC 68, CR0, condbrtarget:$dst)
      AsmString = "bne $\xFF\x03\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 70 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRRCRegClassID, 1)) {
      // (BCC 70, crrc:$cc, condbrtarget:$dst)
      AsmString = "bne- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 70 &&
        MCOperand_getReg(MCInst_getOperand(MI, 1)) == PPC_CR0) {
      // (BCC 70, CR0, condbrtarget:$dst)
      AsmString = "bne- $\xFF\x03\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 71 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRRCRegClassID, 1)) {
      // (BCC 71, crrc:$cc, condbrtarget:$dst)
      AsmString = "bne+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 71 &&
        MCOperand_getReg(MCInst_getOperand(MI, 1)) == PPC_CR0) {
      // (BCC 71, CR0, condbrtarget:$dst)
      AsmString = "bne+ $\xFF\x03\x01";
      break;
    }
    return NULL;
  case PPC_BCCA:
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 12 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRRCRegClassID, 1)) {
      // (BCCA 12, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "blta $\x02, $\xFF\x03\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 12 &&
        MCOperand_getReg(MCInst_getOperand(MI, 1)) == PPC_CR0) {
      // (BCCA 12, CR0, abscondbrtarget:$dst)
      AsmString = "blta $\xFF\x03\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 14 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRRCRegClassID, 1)) {
      // (BCCA 14, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "blta- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 14 &&
        MCOperand_getReg(MCInst_getOperand(MI, 1)) == PPC_CR0) {
      // (BCCA 14, CR0, abscondbrtarget:$dst)
      AsmString = "blta- $\xFF\x03\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 15 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRRCRegClassID, 1)) {
      // (BCCA 15, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "blta+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 15 &&
        MCOperand_getReg(MCInst_getOperand(MI, 1)) == PPC_CR0) {
      // (BCCA 15, CR0, abscondbrtarget:$dst)
      AsmString = "blta+ $\xFF\x03\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 44 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRRCRegClassID, 1)) {
      // (BCCA 44, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bgta $\x02, $\xFF\x03\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 44 &&
        MCOperand_getReg(MCInst_getOperand(MI, 1)) == PPC_CR0) {
      // (BCCA 44, CR0, abscondbrtarget:$dst)
      AsmString = "bgta $\xFF\x03\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 46 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRRCRegClassID, 1)) {
      // (BCCA 46, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bgta- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 46 &&
        MCOperand_getReg(MCInst_getOperand(MI, 1)) == PPC_CR0) {
      // (BCCA 46, CR0, abscondbrtarget:$dst)
      AsmString = "bgta- $\xFF\x03\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 47 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRRCRegClassID, 1)) {
      // (BCCA 47, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bgta+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 47 &&
        MCOperand_getReg(MCInst_getOperand(MI, 1)) == PPC_CR0) {
      // (BCCA 47, CR0, abscondbrtarget:$dst)
      AsmString = "bgta+ $\xFF\x03\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 76 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRRCRegClassID, 1)) {
      // (BCCA 76, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "beqa $\x02, $\xFF\x03\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 76 &&
        MCOperand_getReg(MCInst_getOperand(MI, 1)) == PPC_CR0) {
      // (BCCA 76, CR0, abscondbrtarget:$dst)
      AsmString = "beqa $\xFF\x03\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 78 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRRCRegClassID, 1)) {
      // (BCCA 78, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "beqa- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 78 &&
        MCOperand_getReg(MCInst_getOperand(MI, 1)) == PPC_CR0) {
      // (BCCA 78, CR0, abscondbrtarget:$dst)
      AsmString = "beqa- $\xFF\x03\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 79 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRRCRegClassID, 1)) {
      // (BCCA 79, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "beqa+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 79 &&
        MCOperand_getReg(MCInst_getOperand(MI, 1)) == PPC_CR0) {
      // (BCCA 79, CR0, abscondbrtarget:$dst)
      AsmString = "beqa+ $\xFF\x03\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 68 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRRCRegClassID, 1)) {
      // (BCCA 68, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bnea $\x02, $\xFF\x03\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 68 &&
        MCOperand_getReg(MCInst_getOperand(MI, 1)) == PPC_CR0) {
      // (BCCA 68, CR0, abscondbrtarget:$dst)
      AsmString = "bnea $\xFF\x03\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 70 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRRCRegClassID, 1)) {
      // (BCCA 70, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bnea- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 70 &&
        MCOperand_getReg(MCInst_getOperand(MI, 1)) == PPC_CR0) {
      // (BCCA 70, CR0, abscondbrtarget:$dst)
      AsmString = "bnea- $\xFF\x03\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 71 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRRCRegClassID, 1)) {
      // (BCCA 71, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bnea+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 71 &&
        MCOperand_getReg(MCInst_getOperand(MI, 1)) == PPC_CR0) {
      // (BCCA 71, CR0, abscondbrtarget:$dst)
      AsmString = "bnea+ $\xFF\x03\x02";
      break;
    }
    return NULL;
  case PPC_BCCCTR:
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 12 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRRCRegClassID, 1)) {
      // (BCCCTR 12, crrc:$cc)
      AsmString = "bltctr $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 12 &&
        MCOperand_getReg(MCInst_getOperand(MI, 1)) == PPC_CR0) {
      // (BCCCTR 12, CR0)
      AsmString = "bltctr";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 14 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRRCRegClassID, 1)) {
      // (BCCCTR 14, crrc:$cc)
      AsmString = "bltctr- $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 14 &&
        MCOperand_getReg(MCInst_getOperand(MI, 1)) == PPC_CR0) {
      // (BCCCTR 14, CR0)
      AsmString = "bltctr-";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 15 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRRCRegClassID, 1)) {
      // (BCCCTR 15, crrc:$cc)
      AsmString = "bltctr+ $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 15 &&
        MCOperand_getReg(MCInst_getOperand(MI, 1)) == PPC_CR0) {
      // (BCCCTR 15, CR0)
      AsmString = "bltctr+";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 44 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRRCRegClassID, 1)) {
      // (BCCCTR 44, crrc:$cc)
      AsmString = "bgtctr $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 44 &&
        MCOperand_getReg(MCInst_getOperand(MI, 1)) == PPC_CR0) {
      // (BCCCTR 44, CR0)
      AsmString = "bgtctr";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 46 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRRCRegClassID, 1)) {
      // (BCCCTR 46, crrc:$cc)
      AsmString = "bgtctr- $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 46 &&
        MCOperand_getReg(MCInst_getOperand(MI, 1)) == PPC_CR0) {
      // (BCCCTR 46, CR0)
      AsmString = "bgtctr-";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 47 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRRCRegClassID, 1)) {
      // (BCCCTR 47, crrc:$cc)
      AsmString = "bgtctr+ $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 47 &&
        MCOperand_getReg(MCInst_getOperand(MI, 1)) == PPC_CR0) {
      // (BCCCTR 47, CR0)
      AsmString = "bgtctr+";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 76 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRRCRegClassID, 1)) {
      // (BCCCTR 76, crrc:$cc)
      AsmString = "beqctr $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 76 &&
        MCOperand_getReg(MCInst_getOperand(MI, 1)) == PPC_CR0) {
      // (BCCCTR 76, CR0)
      AsmString = "beqctr";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 78 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRRCRegClassID, 1)) {
      // (BCCCTR 78, crrc:$cc)
      AsmString = "beqctr- $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 78 &&
        MCOperand_getReg(MCInst_getOperand(MI, 1)) == PPC_CR0) {
      // (BCCCTR 78, CR0)
      AsmString = "beqctr-";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 79 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRRCRegClassID, 1)) {
      // (BCCCTR 79, crrc:$cc)
      AsmString = "beqctr+ $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 79 &&
        MCOperand_getReg(MCInst_getOperand(MI, 1)) == PPC_CR0) {
      // (BCCCTR 79, CR0)
      AsmString = "beqctr+";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 68 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRRCRegClassID, 1)) {
      // (BCCCTR 68, crrc:$cc)
      AsmString = "bnectr $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 68 &&
        MCOperand_getReg(MCInst_getOperand(MI, 1)) == PPC_CR0) {
      // (BCCCTR 68, CR0)
      AsmString = "bnectr";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 70 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRRCRegClassID, 1)) {
      // (BCCCTR 70, crrc:$cc)
      AsmString = "bnectr- $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 70 &&
        MCOperand_getReg(MCInst_getOperand(MI, 1)) == PPC_CR0) {
      // (BCCCTR 70, CR0)
      AsmString = "bnectr-";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 71 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRRCRegClassID, 1)) {
      // (BCCCTR 71, crrc:$cc)
      AsmString = "bnectr+ $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 71 &&
        MCOperand_getReg(MCInst_getOperand(MI, 1)) == PPC_CR0) {
      // (BCCCTR 71, CR0)
      AsmString = "bnectr+";
      break;
    }
    return NULL;
  case PPC_BCCCTRL:
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 12 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRRCRegClassID, 1)) {
      // (BCCCTRL 12, crrc:$cc)
      AsmString = "bltctrl $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 12 &&
        MCOperand_getReg(MCInst_getOperand(MI, 1)) == PPC_CR0) {
      // (BCCCTRL 12, CR0)
      AsmString = "bltctrl";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 14 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRRCRegClassID, 1)) {
      // (BCCCTRL 14, crrc:$cc)
      AsmString = "bltctrl- $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 14 &&
        MCOperand_getReg(MCInst_getOperand(MI, 1)) == PPC_CR0) {
      // (BCCCTRL 14, CR0)
      AsmString = "bltctrl-";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 15 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRRCRegClassID, 1)) {
      // (BCCCTRL 15, crrc:$cc)
      AsmString = "bltctrl+ $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 15 &&
        MCOperand_getReg(MCInst_getOperand(MI, 1)) == PPC_CR0) {
      // (BCCCTRL 15, CR0)
      AsmString = "bltctrl+";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 44 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRRCRegClassID, 1)) {
      // (BCCCTRL 44, crrc:$cc)
      AsmString = "bgtctrl $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 44 &&
        MCOperand_getReg(MCInst_getOperand(MI, 1)) == PPC_CR0) {
      // (BCCCTRL 44, CR0)
      AsmString = "bgtctrl";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 46 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRRCRegClassID, 1)) {
      // (BCCCTRL 46, crrc:$cc)
      AsmString = "bgtctrl- $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 46 &&
        MCOperand_getReg(MCInst_getOperand(MI, 1)) == PPC_CR0) {
      // (BCCCTRL 46, CR0)
      AsmString = "bgtctrl-";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 47 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRRCRegClassID, 1)) {
      // (BCCCTRL 47, crrc:$cc)
      AsmString = "bgtctrl+ $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 47 &&
        MCOperand_getReg(MCInst_getOperand(MI, 1)) == PPC_CR0) {
      // (BCCCTRL 47, CR0)
      AsmString = "bgtctrl+";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 76 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRRCRegClassID, 1)) {
      // (BCCCTRL 76, crrc:$cc)
      AsmString = "beqctrl $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 76 &&
        MCOperand_getReg(MCInst_getOperand(MI, 1)) == PPC_CR0) {
      // (BCCCTRL 76, CR0)
      AsmString = "beqctrl";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 78 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRRCRegClassID, 1)) {
      // (BCCCTRL 78, crrc:$cc)
      AsmString = "beqctrl- $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 78 &&
        MCOperand_getReg(MCInst_getOperand(MI, 1)) == PPC_CR0) {
      // (BCCCTRL 78, CR0)
      AsmString = "beqctrl-";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 79 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRRCRegClassID, 1)) {
      // (BCCCTRL 79, crrc:$cc)
      AsmString = "beqctrl+ $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 79 &&
        MCOperand_getReg(MCInst_getOperand(MI, 1)) == PPC_CR0) {
      // (BCCCTRL 79, CR0)
      AsmString = "beqctrl+";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 68 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRRCRegClassID, 1)) {
      // (BCCCTRL 68, crrc:$cc)
      AsmString = "bnectrl $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 68 &&
        MCOperand_getReg(MCInst_getOperand(MI, 1)) == PPC_CR0) {
      // (BCCCTRL 68, CR0)
      AsmString = "bnectrl";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 70 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRRCRegClassID, 1)) {
      // (BCCCTRL 70, crrc:$cc)
      AsmString = "bnectrl- $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 70 &&
        MCOperand_getReg(MCInst_getOperand(MI, 1)) == PPC_CR0) {
      // (BCCCTRL 70, CR0)
      AsmString = "bnectrl-";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 71 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRRCRegClassID, 1)) {
      // (BCCCTRL 71, crrc:$cc)
      AsmString = "bnectrl+ $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 71 &&
        MCOperand_getReg(MCInst_getOperand(MI, 1)) == PPC_CR0) {
      // (BCCCTRL 71, CR0)
      AsmString = "bnectrl+";
      break;
    }
    return NULL;
  case PPC_BCCL:
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 12 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRRCRegClassID, 1)) {
      // (BCCL 12, crrc:$cc, condbrtarget:$dst)
      AsmString = "bltl $\x02, $\xFF\x03\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 12 &&
        MCOperand_getReg(MCInst_getOperand(MI, 1)) == PPC_CR0) {
      // (BCCL 12, CR0, condbrtarget:$dst)
      AsmString = "bltl $\xFF\x03\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 14 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRRCRegClassID, 1)) {
      // (BCCL 14, crrc:$cc, condbrtarget:$dst)
      AsmString = "bltl- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 14 &&
        MCOperand_getReg(MCInst_getOperand(MI, 1)) == PPC_CR0) {
      // (BCCL 14, CR0, condbrtarget:$dst)
      AsmString = "bltl- $\xFF\x03\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 15 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRRCRegClassID, 1)) {
      // (BCCL 15, crrc:$cc, condbrtarget:$dst)
      AsmString = "bltl+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 15 &&
        MCOperand_getReg(MCInst_getOperand(MI, 1)) == PPC_CR0) {
      // (BCCL 15, CR0, condbrtarget:$dst)
      AsmString = "bltl+ $\xFF\x03\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 44 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRRCRegClassID, 1)) {
      // (BCCL 44, crrc:$cc, condbrtarget:$dst)
      AsmString = "bgtl $\x02, $\xFF\x03\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 44 &&
        MCOperand_getReg(MCInst_getOperand(MI, 1)) == PPC_CR0) {
      // (BCCL 44, CR0, condbrtarget:$dst)
      AsmString = "bgtl $\xFF\x03\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 46 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRRCRegClassID, 1)) {
      // (BCCL 46, crrc:$cc, condbrtarget:$dst)
      AsmString = "bgtl- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 46 &&
        MCOperand_getReg(MCInst_getOperand(MI, 1)) == PPC_CR0) {
      // (BCCL 46, CR0, condbrtarget:$dst)
      AsmString = "bgtl- $\xFF\x03\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 47 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRRCRegClassID, 1)) {
      // (BCCL 47, crrc:$cc, condbrtarget:$dst)
      AsmString = "bgtl+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 47 &&
        MCOperand_getReg(MCInst_getOperand(MI, 1)) == PPC_CR0) {
      // (BCCL 47, CR0, condbrtarget:$dst)
      AsmString = "bgtl+ $\xFF\x03\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 76 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRRCRegClassID, 1)) {
      // (BCCL 76, crrc:$cc, condbrtarget:$dst)
      AsmString = "beql $\x02, $\xFF\x03\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 76 &&
        MCOperand_getReg(MCInst_getOperand(MI, 1)) == PPC_CR0) {
      // (BCCL 76, CR0, condbrtarget:$dst)
      AsmString = "beql $\xFF\x03\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 78 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRRCRegClassID, 1)) {
      // (BCCL 78, crrc:$cc, condbrtarget:$dst)
      AsmString = "beql- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 78 &&
        MCOperand_getReg(MCInst_getOperand(MI, 1)) == PPC_CR0) {
      // (BCCL 78, CR0, condbrtarget:$dst)
      AsmString = "beql- $\xFF\x03\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 79 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRRCRegClassID, 1)) {
      // (BCCL 79, crrc:$cc, condbrtarget:$dst)
      AsmString = "beql+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 79 &&
        MCOperand_getReg(MCInst_getOperand(MI, 1)) == PPC_CR0) {
      // (BCCL 79, CR0, condbrtarget:$dst)
      AsmString = "beql+ $\xFF\x03\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 68 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRRCRegClassID, 1)) {
      // (BCCL 68, crrc:$cc, condbrtarget:$dst)
      AsmString = "bnel $\x02, $\xFF\x03\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 68 &&
        MCOperand_getReg(MCInst_getOperand(MI, 1)) == PPC_CR0) {
      // (BCCL 68, CR0, condbrtarget:$dst)
      AsmString = "bnel $\xFF\x03\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 70 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRRCRegClassID, 1)) {
      // (BCCL 70, crrc:$cc, condbrtarget:$dst)
      AsmString = "bnel- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 70 &&
        MCOperand_getReg(MCInst_getOperand(MI, 1)) == PPC_CR0) {
      // (BCCL 70, CR0, condbrtarget:$dst)
      AsmString = "bnel- $\xFF\x03\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 71 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRRCRegClassID, 1)) {
      // (BCCL 71, crrc:$cc, condbrtarget:$dst)
      AsmString = "bnel+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 71 &&
        MCOperand_getReg(MCInst_getOperand(MI, 1)) == PPC_CR0) {
      // (BCCL 71, CR0, condbrtarget:$dst)
      AsmString = "bnel+ $\xFF\x03\x01";
      break;
    }
    return NULL;
  case PPC_BCCLA:
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 12 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRRCRegClassID, 1)) {
      // (BCCLA 12, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bltla $\x02, $\xFF\x03\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 12 &&
        MCOperand_getReg(MCInst_getOperand(MI, 1)) == PPC_CR0) {
      // (BCCLA 12, CR0, abscondbrtarget:$dst)
      AsmString = "bltla $\xFF\x03\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 14 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRRCRegClassID, 1)) {
      // (BCCLA 14, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bltla- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 14 &&
        MCOperand_getReg(MCInst_getOperand(MI, 1)) == PPC_CR0) {
      // (BCCLA 14, CR0, abscondbrtarget:$dst)
      AsmString = "bltla- $\xFF\x03\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 15 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRRCRegClassID, 1)) {
      // (BCCLA 15, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bltla+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 15 &&
        MCOperand_getReg(MCInst_getOperand(MI, 1)) == PPC_CR0) {
      // (BCCLA 15, CR0, abscondbrtarget:$dst)
      AsmString = "bltla+ $\xFF\x03\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 44 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRRCRegClassID, 1)) {
      // (BCCLA 44, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bgtla $\x02, $\xFF\x03\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 44 &&
        MCOperand_getReg(MCInst_getOperand(MI, 1)) == PPC_CR0) {
      // (BCCLA 44, CR0, abscondbrtarget:$dst)
      AsmString = "bgtla $\xFF\x03\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 46 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRRCRegClassID, 1)) {
      // (BCCLA 46, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bgtla- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 46 &&
        MCOperand_getReg(MCInst_getOperand(MI, 1)) == PPC_CR0) {
      // (BCCLA 46, CR0, abscondbrtarget:$dst)
      AsmString = "bgtla- $\xFF\x03\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 47 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRRCRegClassID, 1)) {
      // (BCCLA 47, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bgtla+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 47 &&
        MCOperand_getReg(MCInst_getOperand(MI, 1)) == PPC_CR0) {
      // (BCCLA 47, CR0, abscondbrtarget:$dst)
      AsmString = "bgtla+ $\xFF\x03\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 76 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRRCRegClassID, 1)) {
      // (BCCLA 76, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "beqla $\x02, $\xFF\x03\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 76 &&
        MCOperand_getReg(MCInst_getOperand(MI, 1)) == PPC_CR0) {
      // (BCCLA 76, CR0, abscondbrtarget:$dst)
      AsmString = "beqla $\xFF\x03\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 78 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRRCRegClassID, 1)) {
      // (BCCLA 78, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "beqla- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 78 &&
        MCOperand_getReg(MCInst_getOperand(MI, 1)) == PPC_CR0) {
      // (BCCLA 78, CR0, abscondbrtarget:$dst)
      AsmString = "beqla- $\xFF\x03\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 79 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRRCRegClassID, 1)) {
      // (BCCLA 79, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "beqla+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 79 &&
        MCOperand_getReg(MCInst_getOperand(MI, 1)) == PPC_CR0) {
      // (BCCLA 79, CR0, abscondbrtarget:$dst)
      AsmString = "beqla+ $\xFF\x03\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 68 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRRCRegClassID, 1)) {
      // (BCCLA 68, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bnela $\x02, $\xFF\x03\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 68 &&
        MCOperand_getReg(MCInst_getOperand(MI, 1)) == PPC_CR0) {
      // (BCCLA 68, CR0, abscondbrtarget:$dst)
      AsmString = "bnela $\xFF\x03\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 70 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRRCRegClassID, 1)) {
      // (BCCLA 70, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bnela- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 70 &&
        MCOperand_getReg(MCInst_getOperand(MI, 1)) == PPC_CR0) {
      // (BCCLA 70, CR0, abscondbrtarget:$dst)
      AsmString = "bnela- $\xFF\x03\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 71 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRRCRegClassID, 1)) {
      // (BCCLA 71, crrc:$cc, abscondbrtarget:$dst)
      AsmString = "bnela+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 71 &&
        MCOperand_getReg(MCInst_getOperand(MI, 1)) == PPC_CR0) {
      // (BCCLA 71, CR0, abscondbrtarget:$dst)
      AsmString = "bnela+ $\xFF\x03\x02";
      break;
    }
    return NULL;
  case PPC_BCCLR:
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 12 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRRCRegClassID, 1)) {
      // (BCCLR 12, crrc:$cc)
      AsmString = "bltlr $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 12 &&
        MCOperand_getReg(MCInst_getOperand(MI, 1)) == PPC_CR0) {
      // (BCCLR 12, CR0)
      AsmString = "bltlr";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 14 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRRCRegClassID, 1)) {
      // (BCCLR 14, crrc:$cc)
      AsmString = "bltlr- $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 14 &&
        MCOperand_getReg(MCInst_getOperand(MI, 1)) == PPC_CR0) {
      // (BCCLR 14, CR0)
      AsmString = "bltlr-";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 15 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRRCRegClassID, 1)) {
      // (BCCLR 15, crrc:$cc)
      AsmString = "bltlr+ $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 15 &&
        MCOperand_getReg(MCInst_getOperand(MI, 1)) == PPC_CR0) {
      // (BCCLR 15, CR0)
      AsmString = "bltlr+";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 44 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRRCRegClassID, 1)) {
      // (BCCLR 44, crrc:$cc)
      AsmString = "bgtlr $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 44 &&
        MCOperand_getReg(MCInst_getOperand(MI, 1)) == PPC_CR0) {
      // (BCCLR 44, CR0)
      AsmString = "bgtlr";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 46 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRRCRegClassID, 1)) {
      // (BCCLR 46, crrc:$cc)
      AsmString = "bgtlr- $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 46 &&
        MCOperand_getReg(MCInst_getOperand(MI, 1)) == PPC_CR0) {
      // (BCCLR 46, CR0)
      AsmString = "bgtlr-";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 47 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRRCRegClassID, 1)) {
      // (BCCLR 47, crrc:$cc)
      AsmString = "bgtlr+ $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 47 &&
        MCOperand_getReg(MCInst_getOperand(MI, 1)) == PPC_CR0) {
      // (BCCLR 47, CR0)
      AsmString = "bgtlr+";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 76 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRRCRegClassID, 1)) {
      // (BCCLR 76, crrc:$cc)
      AsmString = "beqlr $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 76 &&
        MCOperand_getReg(MCInst_getOperand(MI, 1)) == PPC_CR0) {
      // (BCCLR 76, CR0)
      AsmString = "beqlr";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 78 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRRCRegClassID, 1)) {
      // (BCCLR 78, crrc:$cc)
      AsmString = "beqlr- $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 78 &&
        MCOperand_getReg(MCInst_getOperand(MI, 1)) == PPC_CR0) {
      // (BCCLR 78, CR0)
      AsmString = "beqlr-";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 79 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRRCRegClassID, 1)) {
      // (BCCLR 79, crrc:$cc)
      AsmString = "beqlr+ $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 79 &&
        MCOperand_getReg(MCInst_getOperand(MI, 1)) == PPC_CR0) {
      // (BCCLR 79, CR0)
      AsmString = "beqlr+";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 68 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRRCRegClassID, 1)) {
      // (BCCLR 68, crrc:$cc)
      AsmString = "bnelr $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 68 &&
        MCOperand_getReg(MCInst_getOperand(MI, 1)) == PPC_CR0) {
      // (BCCLR 68, CR0)
      AsmString = "bnelr";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 70 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRRCRegClassID, 1)) {
      // (BCCLR 70, crrc:$cc)
      AsmString = "bnelr- $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 70 &&
        MCOperand_getReg(MCInst_getOperand(MI, 1)) == PPC_CR0) {
      // (BCCLR 70, CR0)
      AsmString = "bnelr-";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 71 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRRCRegClassID, 1)) {
      // (BCCLR 71, crrc:$cc)
      AsmString = "bnelr+ $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 71 &&
        MCOperand_getReg(MCInst_getOperand(MI, 1)) == PPC_CR0) {
      // (BCCLR 71, CR0)
      AsmString = "bnelr+";
      break;
    }
    return NULL;
  case PPC_BCCLRL:
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 12 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRRCRegClassID, 1)) {
      // (BCCLRL 12, crrc:$cc)
      AsmString = "bltlrl $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 12 &&
        MCOperand_getReg(MCInst_getOperand(MI, 1)) == PPC_CR0) {
      // (BCCLRL 12, CR0)
      AsmString = "bltlrl";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 14 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRRCRegClassID, 1)) {
      // (BCCLRL 14, crrc:$cc)
      AsmString = "bltlrl- $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 14 &&
        MCOperand_getReg(MCInst_getOperand(MI, 1)) == PPC_CR0) {
      // (BCCLRL 14, CR0)
      AsmString = "bltlrl-";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 15 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRRCRegClassID, 1)) {
      // (BCCLRL 15, crrc:$cc)
      AsmString = "bltlrl+ $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 15 &&
        MCOperand_getReg(MCInst_getOperand(MI, 1)) == PPC_CR0) {
      // (BCCLRL 15, CR0)
      AsmString = "bltlrl+";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 44 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRRCRegClassID, 1)) {
      // (BCCLRL 44, crrc:$cc)
      AsmString = "bgtlrl $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 44 &&
        MCOperand_getReg(MCInst_getOperand(MI, 1)) == PPC_CR0) {
      // (BCCLRL 44, CR0)
      AsmString = "bgtlrl";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 46 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRRCRegClassID, 1)) {
      // (BCCLRL 46, crrc:$cc)
      AsmString = "bgtlrl- $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 46 &&
        MCOperand_getReg(MCInst_getOperand(MI, 1)) == PPC_CR0) {
      // (BCCLRL 46, CR0)
      AsmString = "bgtlrl-";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 47 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRRCRegClassID, 1)) {
      // (BCCLRL 47, crrc:$cc)
      AsmString = "bgtlrl+ $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 47 &&
        MCOperand_getReg(MCInst_getOperand(MI, 1)) == PPC_CR0) {
      // (BCCLRL 47, CR0)
      AsmString = "bgtlrl+";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 76 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRRCRegClassID, 1)) {
      // (BCCLRL 76, crrc:$cc)
      AsmString = "beqlrl $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 76 &&
        MCOperand_getReg(MCInst_getOperand(MI, 1)) == PPC_CR0) {
      // (BCCLRL 76, CR0)
      AsmString = "beqlrl";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 78 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRRCRegClassID, 1)) {
      // (BCCLRL 78, crrc:$cc)
      AsmString = "beqlrl- $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 78 &&
        MCOperand_getReg(MCInst_getOperand(MI, 1)) == PPC_CR0) {
      // (BCCLRL 78, CR0)
      AsmString = "beqlrl-";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 79 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRRCRegClassID, 1)) {
      // (BCCLRL 79, crrc:$cc)
      AsmString = "beqlrl+ $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 79 &&
        MCOperand_getReg(MCInst_getOperand(MI, 1)) == PPC_CR0) {
      // (BCCLRL 79, CR0)
      AsmString = "beqlrl+";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 68 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRRCRegClassID, 1)) {
      // (BCCLRL 68, crrc:$cc)
      AsmString = "bnelrl $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 68 &&
        MCOperand_getReg(MCInst_getOperand(MI, 1)) == PPC_CR0) {
      // (BCCLRL 68, CR0)
      AsmString = "bnelrl";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 70 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRRCRegClassID, 1)) {
      // (BCCLRL 70, crrc:$cc)
      AsmString = "bnelrl- $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 70 &&
        MCOperand_getReg(MCInst_getOperand(MI, 1)) == PPC_CR0) {
      // (BCCLRL 70, CR0)
      AsmString = "bnelrl-";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 71 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRRCRegClassID, 1)) {
      // (BCCLRL 71, crrc:$cc)
      AsmString = "bnelrl+ $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 71 &&
        MCOperand_getReg(MCInst_getOperand(MI, 1)) == PPC_CR0) {
      // (BCCLRL 71, CR0)
      AsmString = "bnelrl+";
      break;
    }
    return NULL;
  case PPC_CMPD:
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_getReg(MCInst_getOperand(MI, 0)) == PPC_CR0 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_G8RCRegClassID, 1) &&
        MCOperand_isReg(MCInst_getOperand(MI, 2)) &&
        GETREGCLASS_CONTAIN(PPC_G8RCRegClassID, 2)) {
      // (CMPD CR0, g8rc:$rA, g8rc:$rB)
      AsmString = "cmpd $\x02, $\x03";
      break;
    }
    return NULL;
  case PPC_CMPDI:
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_getReg(MCInst_getOperand(MI, 0)) == PPC_CR0 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_G8RCRegClassID, 1)) {
      // (CMPDI CR0, g8rc:$rA, s16imm64:$imm)
      AsmString = "cmpdi $\x02, $\xFF\x03\x03";
      break;
    }
    return NULL;
  case PPC_CMPLD:
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_getReg(MCInst_getOperand(MI, 0)) == PPC_CR0 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_G8RCRegClassID, 1) &&
        MCOperand_isReg(MCInst_getOperand(MI, 2)) &&
        GETREGCLASS_CONTAIN(PPC_G8RCRegClassID, 2)) {
      // (CMPLD CR0, g8rc:$rA, g8rc:$rB)
      AsmString = "cmpld $\x02, $\x03";
      break;
    }
    return NULL;
  case PPC_CMPLDI:
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_getReg(MCInst_getOperand(MI, 0)) == PPC_CR0 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_G8RCRegClassID, 1)) {
      // (CMPLDI CR0, g8rc:$rA, u16imm64:$imm)
      AsmString = "cmpldi $\x02, $\xFF\x03\x04";
      break;
    }
    return NULL;
  case PPC_CMPLW:
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_getReg(MCInst_getOperand(MI, 0)) == PPC_CR0 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 1) &&
        MCOperand_isReg(MCInst_getOperand(MI, 2)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 2)) {
      // (CMPLW CR0, gprc:$rA, gprc:$rB)
      AsmString = "cmplw $\x02, $\x03";
      break;
    }
    return NULL;
  case PPC_CMPLWI:
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_getReg(MCInst_getOperand(MI, 0)) == PPC_CR0 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 1)) {
      // (CMPLWI CR0, gprc:$rA, u16imm:$imm)
      AsmString = "cmplwi $\x02, $\xFF\x03\x04";
      break;
    }
    return NULL;
  case PPC_CMPW:
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_getReg(MCInst_getOperand(MI, 0)) == PPC_CR0 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 1) &&
        MCOperand_isReg(MCInst_getOperand(MI, 2)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 2)) {
      // (CMPW CR0, gprc:$rA, gprc:$rB)
      AsmString = "cmpw $\x02, $\x03";
      break;
    }
    return NULL;
  case PPC_CMPWI:
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_getReg(MCInst_getOperand(MI, 0)) == PPC_CR0 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 1)) {
      // (CMPWI CR0, gprc:$rA, s16imm:$imm)
      AsmString = "cmpwi $\x02, $\xFF\x03\x03";
      break;
    }
    return NULL;
  case PPC_CNTLZW:
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 0) &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 1)) {
      // (CNTLZW gprc:$rA, gprc:$rS)
      AsmString = "cntlzw $\x01, $\x02";
      break;
    }
    return NULL;
  case PPC_CNTLZWo:
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 0) &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 1)) {
      // (CNTLZWo gprc:$rA, gprc:$rS)
      AsmString = "cntlzw. $\x01, $\x02";
      break;
    }
    return NULL;
  case PPC_CREQV:
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_CRBITRCRegClassID, 0) &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        MCOperand_getReg(MCInst_getOperand(MI, 1)) == MCOperand_getReg(MCInst_getOperand(MI, 0)) &&
        MCOperand_isReg(MCInst_getOperand(MI, 2)) &&
        MCOperand_getReg(MCInst_getOperand(MI, 2)) == MCOperand_getReg(MCInst_getOperand(MI, 0))) {
      // (CREQV crbitrc:$bx, crbitrc:$bx, crbitrc:$bx)
      AsmString = "crset $\x01";
      break;
    }
    return NULL;
  case PPC_CRNOR:
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_CRBITRCRegClassID, 0) &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRBITRCRegClassID, 1) &&
        MCOperand_isReg(MCInst_getOperand(MI, 2)) &&
        MCOperand_getReg(MCInst_getOperand(MI, 2)) == MCOperand_getReg(MCInst_getOperand(MI, 1))) {
      // (CRNOR crbitrc:$bx, crbitrc:$by, crbitrc:$by)
      AsmString = "crnot $\x01, $\x02";
      break;
    }
    return NULL;
  case PPC_CROR:
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_CRBITRCRegClassID, 0) &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRBITRCRegClassID, 1) &&
        MCOperand_isReg(MCInst_getOperand(MI, 2)) &&
        MCOperand_getReg(MCInst_getOperand(MI, 2)) == MCOperand_getReg(MCInst_getOperand(MI, 1))) {
      // (CROR crbitrc:$bx, crbitrc:$by, crbitrc:$by)
      AsmString = "crmove $\x01, $\x02";
      break;
    }
    return NULL;
  case PPC_CRXOR:
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_CRBITRCRegClassID, 0) &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        MCOperand_getReg(MCInst_getOperand(MI, 1)) == MCOperand_getReg(MCInst_getOperand(MI, 0)) &&
        MCOperand_isReg(MCInst_getOperand(MI, 2)) &&
        MCOperand_getReg(MCInst_getOperand(MI, 2)) == MCOperand_getReg(MCInst_getOperand(MI, 0))) {
      // (CRXOR crbitrc:$bx, crbitrc:$bx, crbitrc:$bx)
      AsmString = "crclr $\x01";
      break;
    }
    return NULL;
  case PPC_MBAR:
    if (MCInst_getNumOperands(MI) == 1 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 0) {
      // (MBAR 0)
      AsmString = "mbar";
      break;
    }
    return NULL;
  case PPC_MFDCR:
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 0) &&
        MCOperand_isImm(MCInst_getOperand(MI, 1)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 1)) == 128) {
      // (MFDCR gprc:$Rx, 128)
      AsmString = "mfbr0 $\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 0) &&
        MCOperand_isImm(MCInst_getOperand(MI, 1)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 1)) == 129) {
      // (MFDCR gprc:$Rx, 129)
      AsmString = "mfbr1 $\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 0) &&
        MCOperand_isImm(MCInst_getOperand(MI, 1)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 1)) == 130) {
      // (MFDCR gprc:$Rx, 130)
      AsmString = "mfbr2 $\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 0) &&
        MCOperand_isImm(MCInst_getOperand(MI, 1)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 1)) == 131) {
      // (MFDCR gprc:$Rx, 131)
      AsmString = "mfbr3 $\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 0) &&
        MCOperand_isImm(MCInst_getOperand(MI, 1)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 1)) == 132) {
      // (MFDCR gprc:$Rx, 132)
      AsmString = "mfbr4 $\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 0) &&
        MCOperand_isImm(MCInst_getOperand(MI, 1)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 1)) == 133) {
      // (MFDCR gprc:$Rx, 133)
      AsmString = "mfbr5 $\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 0) &&
        MCOperand_isImm(MCInst_getOperand(MI, 1)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 1)) == 134) {
      // (MFDCR gprc:$Rx, 134)
      AsmString = "mfbr6 $\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 0) &&
        MCOperand_isImm(MCInst_getOperand(MI, 1)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 1)) == 135) {
      // (MFDCR gprc:$Rx, 135)
      AsmString = "mfbr7 $\x01";
      break;
    }
    return NULL;
  case PPC_MFSPR:
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 0) &&
        MCOperand_isImm(MCInst_getOperand(MI, 1)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 1)) == 1) {
      // (MFSPR gprc:$Rx, 1)
      AsmString = "mfxer $\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 0) &&
        MCOperand_isImm(MCInst_getOperand(MI, 1)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 1)) == 4) {
      // (MFSPR gprc:$Rx, 4)
      AsmString = "mfrtcu $\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 0) &&
        MCOperand_isImm(MCInst_getOperand(MI, 1)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 1)) == 5) {
      // (MFSPR gprc:$Rx, 5)
      AsmString = "mfrtcl $\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 0) &&
        MCOperand_isImm(MCInst_getOperand(MI, 1)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 1)) == 17) {
      // (MFSPR gprc:$Rx, 17)
      AsmString = "mfdscr $\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 0) &&
        MCOperand_isImm(MCInst_getOperand(MI, 1)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 1)) == 18) {
      // (MFSPR gprc:$Rx, 18)
      AsmString = "mfdsisr $\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 0) &&
        MCOperand_isImm(MCInst_getOperand(MI, 1)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 1)) == 19) {
      // (MFSPR gprc:$Rx, 19)
      AsmString = "mfdar $\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 0) &&
        MCOperand_isImm(MCInst_getOperand(MI, 1)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 1)) == 990) {
      // (MFSPR gprc:$Rx, 990)
      AsmString = "mfsrr2 $\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 0) &&
        MCOperand_isImm(MCInst_getOperand(MI, 1)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 1)) == 991) {
      // (MFSPR gprc:$Rx, 991)
      AsmString = "mfsrr3 $\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 0) &&
        MCOperand_isImm(MCInst_getOperand(MI, 1)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 1)) == 28) {
      // (MFSPR gprc:$Rx, 28)
      AsmString = "mfcfar $\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 0) &&
        MCOperand_isImm(MCInst_getOperand(MI, 1)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 1)) == 29) {
      // (MFSPR gprc:$Rx, 29)
      AsmString = "mfamr $\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 0) &&
        MCOperand_isImm(MCInst_getOperand(MI, 1)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 1)) == 48) {
      // (MFSPR gprc:$Rx, 48)
      AsmString = "mfpid $\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 0) &&
        MCOperand_isImm(MCInst_getOperand(MI, 1)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 1)) == 989) {
      // (MFSPR gprc:$Rx, 989)
      AsmString = "mftblo $\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 0) &&
        MCOperand_isImm(MCInst_getOperand(MI, 1)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 1)) == 988) {
      // (MFSPR gprc:$Rx, 988)
      AsmString = "mftbhi $\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 0) &&
        MCOperand_isImm(MCInst_getOperand(MI, 1)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 1)) == 536) {
      // (MFSPR gprc:$Rx, 536)
      AsmString = "mfdbatu $\x01, 0";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 0) &&
        MCOperand_isImm(MCInst_getOperand(MI, 1)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 1)) == 537) {
      // (MFSPR gprc:$Rx, 537)
      AsmString = "mfdbatl $\x01, 0";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 0) &&
        MCOperand_isImm(MCInst_getOperand(MI, 1)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 1)) == 528) {
      // (MFSPR gprc:$Rx, 528)
      AsmString = "mfibatu $\x01, 0";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 0) &&
        MCOperand_isImm(MCInst_getOperand(MI, 1)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 1)) == 529) {
      // (MFSPR gprc:$Rx, 529)
      AsmString = "mfibatl $\x01, 0";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 0) &&
        MCOperand_isImm(MCInst_getOperand(MI, 1)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 1)) == 538) {
      // (MFSPR gprc:$Rx, 538)
      AsmString = "mfdbatu $\x01, 1";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 0) &&
        MCOperand_isImm(MCInst_getOperand(MI, 1)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 1)) == 539) {
      // (MFSPR gprc:$Rx, 539)
      AsmString = "mfdbatl $\x01, 1";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 0) &&
        MCOperand_isImm(MCInst_getOperand(MI, 1)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 1)) == 530) {
      // (MFSPR gprc:$Rx, 530)
      AsmString = "mfibatu $\x01, 1";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 0) &&
        MCOperand_isImm(MCInst_getOperand(MI, 1)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 1)) == 531) {
      // (MFSPR gprc:$Rx, 531)
      AsmString = "mfibatl $\x01, 1";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 0) &&
        MCOperand_isImm(MCInst_getOperand(MI, 1)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 1)) == 540) {
      // (MFSPR gprc:$Rx, 540)
      AsmString = "mfdbatu $\x01, 2";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 0) &&
        MCOperand_isImm(MCInst_getOperand(MI, 1)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 1)) == 541) {
      // (MFSPR gprc:$Rx, 541)
      AsmString = "mfdbatl $\x01, 2";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 0) &&
        MCOperand_isImm(MCInst_getOperand(MI, 1)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 1)) == 532) {
      // (MFSPR gprc:$Rx, 532)
      AsmString = "mfibatu $\x01, 2";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 0) &&
        MCOperand_isImm(MCInst_getOperand(MI, 1)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 1)) == 533) {
      // (MFSPR gprc:$Rx, 533)
      AsmString = "mfibatl $\x01, 2";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 0) &&
        MCOperand_isImm(MCInst_getOperand(MI, 1)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 1)) == 542) {
      // (MFSPR gprc:$Rx, 542)
      AsmString = "mfdbatu $\x01, 3";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 0) &&
        MCOperand_isImm(MCInst_getOperand(MI, 1)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 1)) == 543) {
      // (MFSPR gprc:$Rx, 543)
      AsmString = "mfdbatl $\x01, 3";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 0) &&
        MCOperand_isImm(MCInst_getOperand(MI, 1)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 1)) == 534) {
      // (MFSPR gprc:$Rx, 534)
      AsmString = "mfibatu $\x01, 3";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 0) &&
        MCOperand_isImm(MCInst_getOperand(MI, 1)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 1)) == 535) {
      // (MFSPR gprc:$Rx, 535)
      AsmString = "mfibatl $\x01, 3";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 0) &&
        MCOperand_isImm(MCInst_getOperand(MI, 1)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 1)) == 1018) {
      // (MFSPR gprc:$Rx, 1018)
      AsmString = "mfdccr $\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 0) &&
        MCOperand_isImm(MCInst_getOperand(MI, 1)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 1)) == 1019) {
      // (MFSPR gprc:$Rx, 1019)
      AsmString = "mficcr $\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 0) &&
        MCOperand_isImm(MCInst_getOperand(MI, 1)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 1)) == 981) {
      // (MFSPR gprc:$Rx, 981)
      AsmString = "mfdear $\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 0) &&
        MCOperand_isImm(MCInst_getOperand(MI, 1)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 1)) == 980) {
      // (MFSPR gprc:$Rx, 980)
      AsmString = "mfesr $\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 0) &&
        MCOperand_isImm(MCInst_getOperand(MI, 1)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 1)) == 512) {
      // (MFSPR gprc:$Rx, 512)
      AsmString = "mfspefscr $\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 0) &&
        MCOperand_isImm(MCInst_getOperand(MI, 1)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 1)) == 986) {
      // (MFSPR gprc:$Rx, 986)
      AsmString = "mftcr $\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 0) &&
        MCOperand_isImm(MCInst_getOperand(MI, 1)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 1)) == 280) {
      // (MFSPR gprc:$RT, 280)
      AsmString = "mfasr $\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 0) &&
        MCOperand_isImm(MCInst_getOperand(MI, 1)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 1)) == 287) {
      // (MFSPR gprc:$RT, 287)
      AsmString = "mfpvr $\x01";
      break;
    }
    return NULL;
  case PPC_MFTB:
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 0) &&
        MCOperand_isImm(MCInst_getOperand(MI, 1)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 1)) == 269) {
      // (MFTB gprc:$Rx, 269)
      AsmString = "mftbu $\x01";
      break;
    }
    return NULL;
  case PPC_MFVRSAVE:
    if (MCInst_getNumOperands(MI) == 1 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 0)) {
      // (MFVRSAVE gprc:$rS)
      AsmString = "mfvrsave $\x01";
      break;
    }
    return NULL;
  case PPC_MFVSRD:
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_G8RCRegClassID, 0) &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_F8RCRegClassID, 1)) {
      // (MFVSRD g8rc:$rA, f8rc:$src)
      AsmString = "mffprd $\x01, $\x02";
      break;
    }
    return NULL;
  case PPC_MTCRF8:
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 255 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_G8RCRegClassID, 1)) {
      // (MTCRF8 255, g8rc:$rA)
      AsmString = "mtcr $\x02";
      break;
    }
    return NULL;
  case PPC_MTDCR:
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 0) &&
        MCOperand_isImm(MCInst_getOperand(MI, 1)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 1)) == 128) {
      // (MTDCR gprc:$Rx, 128)
      AsmString = "mtbr0 $\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 0) &&
        MCOperand_isImm(MCInst_getOperand(MI, 1)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 1)) == 129) {
      // (MTDCR gprc:$Rx, 129)
      AsmString = "mtbr1 $\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 0) &&
        MCOperand_isImm(MCInst_getOperand(MI, 1)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 1)) == 130) {
      // (MTDCR gprc:$Rx, 130)
      AsmString = "mtbr2 $\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 0) &&
        MCOperand_isImm(MCInst_getOperand(MI, 1)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 1)) == 131) {
      // (MTDCR gprc:$Rx, 131)
      AsmString = "mtbr3 $\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 0) &&
        MCOperand_isImm(MCInst_getOperand(MI, 1)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 1)) == 132) {
      // (MTDCR gprc:$Rx, 132)
      AsmString = "mtbr4 $\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 0) &&
        MCOperand_isImm(MCInst_getOperand(MI, 1)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 1)) == 133) {
      // (MTDCR gprc:$Rx, 133)
      AsmString = "mtbr5 $\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 0) &&
        MCOperand_isImm(MCInst_getOperand(MI, 1)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 1)) == 134) {
      // (MTDCR gprc:$Rx, 134)
      AsmString = "mtbr6 $\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 0) &&
        MCOperand_isImm(MCInst_getOperand(MI, 1)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 1)) == 135) {
      // (MTDCR gprc:$Rx, 135)
      AsmString = "mtbr7 $\x01";
      break;
    }
    return NULL;
  case PPC_MTFSF:
    if (MCInst_getNumOperands(MI) == 4 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_F8RCRegClassID, 1) &&
        MCOperand_isImm(MCInst_getOperand(MI, 2)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 2)) == 0 &&
        MCOperand_isImm(MCInst_getOperand(MI, 3)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 3)) == 0) {
      // (MTFSF i32imm:$FLM, f8rc:$FRB, 0, 0)
      AsmString = "mtfsf $\x01, $\x02";
      break;
    }
    return NULL;
  case PPC_MTFSFI:
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_CRRCRegClassID, 0) &&
        MCOperand_isImm(MCInst_getOperand(MI, 2)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 2)) == 0) {
      // (MTFSFI crrc:$BF, i32imm:$U, 0)
      AsmString = "mtfsfi $\x01, $\x02";
      break;
    }
    return NULL;
  case PPC_MTFSFIo:
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_CRRCRegClassID, 0) &&
        MCOperand_isImm(MCInst_getOperand(MI, 2)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 2)) == 0) {
      // (MTFSFIo crrc:$BF, i32imm:$U, 0)
      AsmString = "mtfsfi. $\x01, $\x02";
      break;
    }
    return NULL;
  case PPC_MTFSFo:
    if (MCInst_getNumOperands(MI) == 4 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_F8RCRegClassID, 1) &&
        MCOperand_isImm(MCInst_getOperand(MI, 2)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 2)) == 0 &&
        MCOperand_isImm(MCInst_getOperand(MI, 3)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 3)) == 0) {
      // (MTFSFo i32imm:$FLM, f8rc:$FRB, 0, 0)
      AsmString = "mtfsf. $\x01, $\x02";
      break;
    }
    return NULL;
  case PPC_MTMSR:
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 0) &&
        MCOperand_isImm(MCInst_getOperand(MI, 1)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 1)) == 0) {
      // (MTMSR gprc:$RS, 0)
      AsmString = "mtmsr $\x01";
      break;
    }
    return NULL;
  case PPC_MTMSRD:
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 0) &&
        MCOperand_isImm(MCInst_getOperand(MI, 1)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 1)) == 0) {
      // (MTMSRD gprc:$RS, 0)
      AsmString = "mtmsrd $\x01";
      break;
    }
    return NULL;
  case PPC_MTSPR:
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 1 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 1)) {
      // (MTSPR 1, gprc:$Rx)
      AsmString = "mtxer $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 17 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 1)) {
      // (MTSPR 17, gprc:$Rx)
      AsmString = "mtdscr $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 18 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 1)) {
      // (MTSPR 18, gprc:$Rx)
      AsmString = "mtdsisr $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 19 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 1)) {
      // (MTSPR 19, gprc:$Rx)
      AsmString = "mtdar $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 990 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 1)) {
      // (MTSPR 990, gprc:$Rx)
      AsmString = "mtsrr2 $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 991 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 1)) {
      // (MTSPR 991, gprc:$Rx)
      AsmString = "mtsrr3 $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 28 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 1)) {
      // (MTSPR 28, gprc:$Rx)
      AsmString = "mtcfar $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 29 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 1)) {
      // (MTSPR 29, gprc:$Rx)
      AsmString = "mtamr $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 48 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 1)) {
      // (MTSPR 48, gprc:$Rx)
      AsmString = "mtpid $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 284 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 1)) {
      // (MTSPR 284, gprc:$Rx)
      AsmString = "mttbl $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 285 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 1)) {
      // (MTSPR 285, gprc:$Rx)
      AsmString = "mttbu $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 989 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 1)) {
      // (MTSPR 989, gprc:$Rx)
      AsmString = "mttblo $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 988 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 1)) {
      // (MTSPR 988, gprc:$Rx)
      AsmString = "mttbhi $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 536 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 1)) {
      // (MTSPR 536, gprc:$Rx)
      AsmString = "mtdbatu 0, $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 537 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 1)) {
      // (MTSPR 537, gprc:$Rx)
      AsmString = "mtdbatl 0, $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 528 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 1)) {
      // (MTSPR 528, gprc:$Rx)
      AsmString = "mtibatu 0, $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 529 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 1)) {
      // (MTSPR 529, gprc:$Rx)
      AsmString = "mtibatl 0, $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 538 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 1)) {
      // (MTSPR 538, gprc:$Rx)
      AsmString = "mtdbatu 1, $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 539 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 1)) {
      // (MTSPR 539, gprc:$Rx)
      AsmString = "mtdbatl 1, $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 530 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 1)) {
      // (MTSPR 530, gprc:$Rx)
      AsmString = "mtibatu 1, $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 531 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 1)) {
      // (MTSPR 531, gprc:$Rx)
      AsmString = "mtibatl 1, $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 540 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 1)) {
      // (MTSPR 540, gprc:$Rx)
      AsmString = "mtdbatu 2, $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 541 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 1)) {
      // (MTSPR 541, gprc:$Rx)
      AsmString = "mtdbatl 2, $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 532 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 1)) {
      // (MTSPR 532, gprc:$Rx)
      AsmString = "mtibatu 2, $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 533 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 1)) {
      // (MTSPR 533, gprc:$Rx)
      AsmString = "mtibatl 2, $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 542 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 1)) {
      // (MTSPR 542, gprc:$Rx)
      AsmString = "mtdbatu 3, $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 543 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 1)) {
      // (MTSPR 543, gprc:$Rx)
      AsmString = "mtdbatl 3, $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 534 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 1)) {
      // (MTSPR 534, gprc:$Rx)
      AsmString = "mtibatu 3, $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 535 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 1)) {
      // (MTSPR 535, gprc:$Rx)
      AsmString = "mtibatl 3, $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 1018 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 1)) {
      // (MTSPR 1018, gprc:$Rx)
      AsmString = "mtdccr $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 1019 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 1)) {
      // (MTSPR 1019, gprc:$Rx)
      AsmString = "mticcr $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 981 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 1)) {
      // (MTSPR 981, gprc:$Rx)
      AsmString = "mtdear $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 980 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 1)) {
      // (MTSPR 980, gprc:$Rx)
      AsmString = "mtesr $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 512 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 1)) {
      // (MTSPR 512, gprc:$Rx)
      AsmString = "mtspefscr $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 986 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 1)) {
      // (MTSPR 986, gprc:$Rx)
      AsmString = "mttcr $\x02";
      break;
    }
    return NULL;
  case PPC_MTVRSAVE:
    if (MCInst_getNumOperands(MI) == 1 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 0)) {
      // (MTVRSAVE gprc:$rS)
      AsmString = "mtvrsave $\x01";
      break;
    }
    return NULL;
  case PPC_NOR8:
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_G8RCRegClassID, 0) &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_G8RCRegClassID, 1) &&
        MCOperand_isReg(MCInst_getOperand(MI, 2)) &&
        MCOperand_getReg(MCInst_getOperand(MI, 2)) == MCOperand_getReg(MCInst_getOperand(MI, 1))) {
      // (NOR8 g8rc:$rA, g8rc:$rB, g8rc:$rB)
      AsmString = "not $\x01, $\x02";
      break;
    }
    return NULL;
  case PPC_NOR8o:
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_G8RCRegClassID, 0) &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_G8RCRegClassID, 1) &&
        MCOperand_isReg(MCInst_getOperand(MI, 2)) &&
        MCOperand_getReg(MCInst_getOperand(MI, 2)) == MCOperand_getReg(MCInst_getOperand(MI, 1))) {
      // (NOR8o g8rc:$rA, g8rc:$rB, g8rc:$rB)
      AsmString = "not. $\x01, $\x02";
      break;
    }
    return NULL;
  case PPC_OR8:
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_G8RCRegClassID, 0) &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_G8RCRegClassID, 1) &&
        MCOperand_isReg(MCInst_getOperand(MI, 2)) &&
        MCOperand_getReg(MCInst_getOperand(MI, 2)) == MCOperand_getReg(MCInst_getOperand(MI, 1))) {
      // (OR8 g8rc:$rA, g8rc:$rB, g8rc:$rB)
      AsmString = "mr $\x01, $\x02";
      break;
    }
    return NULL;
  case PPC_OR8o:
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_G8RCRegClassID, 0) &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_G8RCRegClassID, 1) &&
        MCOperand_isReg(MCInst_getOperand(MI, 2)) &&
        MCOperand_getReg(MCInst_getOperand(MI, 2)) == MCOperand_getReg(MCInst_getOperand(MI, 1))) {
      // (OR8o g8rc:$rA, g8rc:$rB, g8rc:$rB)
      AsmString = "mr. $\x01, $\x02";
      break;
    }
    return NULL;
  case PPC_QVFLOGICALb:
    if (MCInst_getNumOperands(MI) == 4 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_QBRCRegClassID, 0) &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        MCOperand_getReg(MCInst_getOperand(MI, 1)) == MCOperand_getReg(MCInst_getOperand(MI, 0)) &&
        MCOperand_isReg(MCInst_getOperand(MI, 2)) &&
        MCOperand_getReg(MCInst_getOperand(MI, 2)) == MCOperand_getReg(MCInst_getOperand(MI, 0)) &&
        MCOperand_isImm(MCInst_getOperand(MI, 3)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 3)) == 0) {
      // (QVFLOGICALb qbrc:$FRT, qbrc:$FRT, qbrc:$FRT, 0)
      AsmString = "qvfclr $\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 4 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_QBRCRegClassID, 0) &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_QBRCRegClassID, 1) &&
        MCOperand_isReg(MCInst_getOperand(MI, 2)) &&
        GETREGCLASS_CONTAIN(PPC_QBRCRegClassID, 2) &&
        MCOperand_isImm(MCInst_getOperand(MI, 3)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 3)) == 1) {
      // (QVFLOGICALb qbrc:$FRT, qbrc:$FRA, qbrc:$FRB, 1)
      AsmString = "qvfand $\x01, $\x02, $\x03";
      break;
    }
    if (MCInst_getNumOperands(MI) == 4 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_QBRCRegClassID, 0) &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_QBRCRegClassID, 1) &&
        MCOperand_isReg(MCInst_getOperand(MI, 2)) &&
        GETREGCLASS_CONTAIN(PPC_QBRCRegClassID, 2) &&
        MCOperand_isImm(MCInst_getOperand(MI, 3)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 3)) == 4) {
      // (QVFLOGICALb qbrc:$FRT, qbrc:$FRA, qbrc:$FRB, 4)
      AsmString = "qvfandc $\x01, $\x02, $\x03";
      break;
    }
    if (MCInst_getNumOperands(MI) == 4 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_QBRCRegClassID, 0) &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_QBRCRegClassID, 1) &&
        MCOperand_isReg(MCInst_getOperand(MI, 2)) &&
        MCOperand_getReg(MCInst_getOperand(MI, 2)) == MCOperand_getReg(MCInst_getOperand(MI, 1)) &&
        MCOperand_isImm(MCInst_getOperand(MI, 3)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 3)) == 5) {
      // (QVFLOGICALb qbrc:$FRT, qbrc:$FRA, qbrc:$FRA, 5)
      AsmString = "qvfctfb $\x01, $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 4 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_QBRCRegClassID, 0) &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_QBRCRegClassID, 1) &&
        MCOperand_isReg(MCInst_getOperand(MI, 2)) &&
        GETREGCLASS_CONTAIN(PPC_QBRCRegClassID, 2) &&
        MCOperand_isImm(MCInst_getOperand(MI, 3)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 3)) == 6) {
      // (QVFLOGICALb qbrc:$FRT, qbrc:$FRA, qbrc:$FRB, 6)
      AsmString = "qvfxor $\x01, $\x02, $\x03";
      break;
    }
    if (MCInst_getNumOperands(MI) == 4 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_QBRCRegClassID, 0) &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_QBRCRegClassID, 1) &&
        MCOperand_isReg(MCInst_getOperand(MI, 2)) &&
        GETREGCLASS_CONTAIN(PPC_QBRCRegClassID, 2) &&
        MCOperand_isImm(MCInst_getOperand(MI, 3)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 3)) == 7) {
      // (QVFLOGICALb qbrc:$FRT, qbrc:$FRA, qbrc:$FRB, 7)
      AsmString = "qvfor $\x01, $\x02, $\x03";
      break;
    }
    if (MCInst_getNumOperands(MI) == 4 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_QBRCRegClassID, 0) &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_QBRCRegClassID, 1) &&
        MCOperand_isReg(MCInst_getOperand(MI, 2)) &&
        GETREGCLASS_CONTAIN(PPC_QBRCRegClassID, 2) &&
        MCOperand_isImm(MCInst_getOperand(MI, 3)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 3)) == 8) {
      // (QVFLOGICALb qbrc:$FRT, qbrc:$FRA, qbrc:$FRB, 8)
      AsmString = "qvfnor $\x01, $\x02, $\x03";
      break;
    }
    if (MCInst_getNumOperands(MI) == 4 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_QBRCRegClassID, 0) &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_QBRCRegClassID, 1) &&
        MCOperand_isReg(MCInst_getOperand(MI, 2)) &&
        GETREGCLASS_CONTAIN(PPC_QBRCRegClassID, 2) &&
        MCOperand_isImm(MCInst_getOperand(MI, 3)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 3)) == 9) {
      // (QVFLOGICALb qbrc:$FRT, qbrc:$FRA, qbrc:$FRB, 9)
      AsmString = "qvfequ $\x01, $\x02, $\x03";
      break;
    }
    if (MCInst_getNumOperands(MI) == 4 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_QBRCRegClassID, 0) &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_QBRCRegClassID, 1) &&
        MCOperand_isReg(MCInst_getOperand(MI, 2)) &&
        MCOperand_getReg(MCInst_getOperand(MI, 2)) == MCOperand_getReg(MCInst_getOperand(MI, 1)) &&
        MCOperand_isImm(MCInst_getOperand(MI, 3)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 3)) == 10) {
      // (QVFLOGICALb qbrc:$FRT, qbrc:$FRA, qbrc:$FRA, 10)
      AsmString = "qvfnot $\x01, $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 4 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_QBRCRegClassID, 0) &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_QBRCRegClassID, 1) &&
        MCOperand_isReg(MCInst_getOperand(MI, 2)) &&
        GETREGCLASS_CONTAIN(PPC_QBRCRegClassID, 2) &&
        MCOperand_isImm(MCInst_getOperand(MI, 3)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 3)) == 13) {
      // (QVFLOGICALb qbrc:$FRT, qbrc:$FRA, qbrc:$FRB, 13)
      AsmString = "qvforc $\x01, $\x02, $\x03";
      break;
    }
    if (MCInst_getNumOperands(MI) == 4 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_QBRCRegClassID, 0) &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_QBRCRegClassID, 1) &&
        MCOperand_isReg(MCInst_getOperand(MI, 2)) &&
        GETREGCLASS_CONTAIN(PPC_QBRCRegClassID, 2) &&
        MCOperand_isImm(MCInst_getOperand(MI, 3)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 3)) == 14) {
      // (QVFLOGICALb qbrc:$FRT, qbrc:$FRA, qbrc:$FRB, 14)
      AsmString = "qvfnand $\x01, $\x02, $\x03";
      break;
    }
    if (MCInst_getNumOperands(MI) == 4 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_QBRCRegClassID, 0) &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        MCOperand_getReg(MCInst_getOperand(MI, 1)) == MCOperand_getReg(MCInst_getOperand(MI, 0)) &&
        MCOperand_isReg(MCInst_getOperand(MI, 2)) &&
        MCOperand_getReg(MCInst_getOperand(MI, 2)) == MCOperand_getReg(MCInst_getOperand(MI, 0)) &&
        MCOperand_isImm(MCInst_getOperand(MI, 3)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 3)) == 15) {
      // (QVFLOGICALb qbrc:$FRT, qbrc:$FRT, qbrc:$FRT, 15)
      AsmString = "qvfset $\x01";
      break;
    }
    return NULL;
  case PPC_RLDCL:
    if (MCInst_getNumOperands(MI) == 4 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_G8RCRegClassID, 0) &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_G8RCRegClassID, 1) &&
        MCOperand_isReg(MCInst_getOperand(MI, 2)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 2) &&
        MCOperand_isImm(MCInst_getOperand(MI, 3)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 3)) == 0) {
      // (RLDCL g8rc:$rA, g8rc:$rS, gprc:$rB, 0)
      AsmString = "rotld $\x01, $\x02, $\x03";
      break;
    }
    return NULL;
  case PPC_RLDCLo:
    if (MCInst_getNumOperands(MI) == 4 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_G8RCRegClassID, 0) &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_G8RCRegClassID, 1) &&
        MCOperand_isReg(MCInst_getOperand(MI, 2)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 2) &&
        MCOperand_isImm(MCInst_getOperand(MI, 3)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 3)) == 0) {
      // (RLDCLo g8rc:$rA, g8rc:$rS, gprc:$rB, 0)
      AsmString = "rotld. $\x01, $\x02, $\x03";
      break;
    }
    return NULL;
  case PPC_RLDICL:
    if (MCInst_getNumOperands(MI) == 4 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_G8RCRegClassID, 0) &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_G8RCRegClassID, 1) &&
        MCOperand_isImm(MCInst_getOperand(MI, 3)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 3)) == 0) {
      // (RLDICL g8rc:$rA, g8rc:$rS, u6imm:$n, 0)
      AsmString = "rotldi $\x01, $\x02, $\xFF\x03\x05";
      break;
    }
    if (MCInst_getNumOperands(MI) == 4 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_G8RCRegClassID, 0) &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_G8RCRegClassID, 1) &&
        MCOperand_isImm(MCInst_getOperand(MI, 2)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 2)) == 0) {
      // (RLDICL g8rc:$rA, g8rc:$rS, 0, u6imm:$n)
      AsmString = "clrldi $\x01, $\x02, $\xFF\x04\x05";
      break;
    }
    return NULL;
  case PPC_RLDICL_32_64:
    if (MCInst_getNumOperands(MI) == 4 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_G8RCRegClassID, 0) &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 1) &&
        MCOperand_isImm(MCInst_getOperand(MI, 2)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 2)) == 0) {
      // (RLDICL_32_64 g8rc:$rA, gprc:$rS, 0, u6imm:$n)
      AsmString = "clrldi $\x01, $\x02, $\xFF\x04\x05";
      break;
    }
    return NULL;
  case PPC_RLDICLo:
    if (MCInst_getNumOperands(MI) == 4 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_G8RCRegClassID, 0) &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_G8RCRegClassID, 1) &&
        MCOperand_isImm(MCInst_getOperand(MI, 3)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 3)) == 0) {
      // (RLDICLo g8rc:$rA, g8rc:$rS, u6imm:$n, 0)
      AsmString = "rotldi. $\x01, $\x02, $\xFF\x03\x05";
      break;
    }
    if (MCInst_getNumOperands(MI) == 4 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_G8RCRegClassID, 0) &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_G8RCRegClassID, 1) &&
        MCOperand_isImm(MCInst_getOperand(MI, 2)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 2)) == 0) {
      // (RLDICLo g8rc:$rA, g8rc:$rS, 0, u6imm:$n)
      AsmString = "clrldi. $\x01, $\x02, $\xFF\x04\x05";
      break;
    }
    return NULL;
  case PPC_RLWINM:
    if (MCInst_getNumOperands(MI) == 5 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 0) &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 1) &&
        MCOperand_isImm(MCInst_getOperand(MI, 3)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 3)) == 0 &&
        MCOperand_isImm(MCInst_getOperand(MI, 4)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 4)) == 31) {
      // (RLWINM gprc:$rA, gprc:$rS, u5imm:$n, 0, 31)
      AsmString = "rotlwi $\x01, $\x02, $\xFF\x03\x06";
      break;
    }
    if (MCInst_getNumOperands(MI) == 5 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 0) &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 1) &&
        MCOperand_isImm(MCInst_getOperand(MI, 2)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 2)) == 0 &&
        MCOperand_isImm(MCInst_getOperand(MI, 4)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 4)) == 31) {
      // (RLWINM gprc:$rA, gprc:$rS, 0, u5imm:$n, 31)
      AsmString = "clrlwi $\x01, $\x02, $\xFF\x04\x06";
      break;
    }
    return NULL;
  case PPC_RLWINMo:
    if (MCInst_getNumOperands(MI) == 5 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 0) &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 1) &&
        MCOperand_isImm(MCInst_getOperand(MI, 3)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 3)) == 0 &&
        MCOperand_isImm(MCInst_getOperand(MI, 4)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 4)) == 31) {
      // (RLWINMo gprc:$rA, gprc:$rS, u5imm:$n, 0, 31)
      AsmString = "rotlwi. $\x01, $\x02, $\xFF\x03\x06";
      break;
    }
    if (MCInst_getNumOperands(MI) == 5 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 0) &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 1) &&
        MCOperand_isImm(MCInst_getOperand(MI, 2)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 2)) == 0 &&
        MCOperand_isImm(MCInst_getOperand(MI, 4)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 4)) == 31) {
      // (RLWINMo gprc:$rA, gprc:$rS, 0, u5imm:$n, 31)
      AsmString = "clrlwi. $\x01, $\x02, $\xFF\x04\x06";
      break;
    }
    return NULL;
  case PPC_RLWNM:
    if (MCInst_getNumOperands(MI) == 5 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 0) &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 1) &&
        MCOperand_isReg(MCInst_getOperand(MI, 2)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 2) &&
        MCOperand_isImm(MCInst_getOperand(MI, 3)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 3)) == 0 &&
        MCOperand_isImm(MCInst_getOperand(MI, 4)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 4)) == 31) {
      // (RLWNM gprc:$rA, gprc:$rS, gprc:$rB, 0, 31)
      AsmString = "rotlw $\x01, $\x02, $\x03";
      break;
    }
    return NULL;
  case PPC_RLWNMo:
    if (MCInst_getNumOperands(MI) == 5 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 0) &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 1) &&
        MCOperand_isReg(MCInst_getOperand(MI, 2)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 2) &&
        MCOperand_isImm(MCInst_getOperand(MI, 3)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 3)) == 0 &&
        MCOperand_isImm(MCInst_getOperand(MI, 4)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 4)) == 31) {
      // (RLWNMo gprc:$rA, gprc:$rS, gprc:$rB, 0, 31)
      AsmString = "rotlw. $\x01, $\x02, $\x03";
      break;
    }
    return NULL;
  case PPC_SC:
    if (MCInst_getNumOperands(MI) == 1 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 0) {
      // (SC 0)
      AsmString = "sc";
      break;
    }
    return NULL;
  case PPC_SUBF8:
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_G8RCRegClassID, 0) &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_G8RCRegClassID, 1) &&
        MCOperand_isReg(MCInst_getOperand(MI, 2)) &&
        GETREGCLASS_CONTAIN(PPC_G8RCRegClassID, 2)) {
      // (SUBF8 g8rc:$rA, g8rc:$rC, g8rc:$rB)
      AsmString = "sub $\x01, $\x03, $\x02";
      break;
    }
    return NULL;
  case PPC_SUBF8o:
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_G8RCRegClassID, 0) &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_G8RCRegClassID, 1) &&
        MCOperand_isReg(MCInst_getOperand(MI, 2)) &&
        GETREGCLASS_CONTAIN(PPC_G8RCRegClassID, 2)) {
      // (SUBF8o g8rc:$rA, g8rc:$rC, g8rc:$rB)
      AsmString = "sub. $\x01, $\x03, $\x02";
      break;
    }
    return NULL;
  case PPC_SUBFC8:
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_G8RCRegClassID, 0) &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_G8RCRegClassID, 1) &&
        MCOperand_isReg(MCInst_getOperand(MI, 2)) &&
        GETREGCLASS_CONTAIN(PPC_G8RCRegClassID, 2)) {
      // (SUBFC8 g8rc:$rA, g8rc:$rC, g8rc:$rB)
      AsmString = "subc $\x01, $\x03, $\x02";
      break;
    }
    return NULL;
  case PPC_SUBFC8o:
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_G8RCRegClassID, 0) &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_G8RCRegClassID, 1) &&
        MCOperand_isReg(MCInst_getOperand(MI, 2)) &&
        GETREGCLASS_CONTAIN(PPC_G8RCRegClassID, 2)) {
      // (SUBFC8o g8rc:$rA, g8rc:$rC, g8rc:$rB)
      AsmString = "subc. $\x01, $\x03, $\x02";
      break;
    }
    return NULL;
  case PPC_SYNC:
    if (MCInst_getNumOperands(MI) == 1 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 0) {
      // (SYNC 0)
      AsmString = "sync";
      break;
    }
    if (MCInst_getNumOperands(MI) == 1 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 1) {
      // (SYNC 1)
      AsmString = "lwsync";
      break;
    }
    if (MCInst_getNumOperands(MI) == 1 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 2) {
      // (SYNC 2)
      AsmString = "ptesync";
      break;
    }
    return NULL;
  case PPC_TD:
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 16 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_G8RCRegClassID, 1) &&
        MCOperand_isReg(MCInst_getOperand(MI, 2)) &&
        GETREGCLASS_CONTAIN(PPC_G8RCRegClassID, 2)) {
      // (TD 16, g8rc:$rA, g8rc:$rB)
      AsmString = "tdlt $\x02, $\x03";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 4 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_G8RCRegClassID, 1) &&
        MCOperand_isReg(MCInst_getOperand(MI, 2)) &&
        GETREGCLASS_CONTAIN(PPC_G8RCRegClassID, 2)) {
      // (TD 4, g8rc:$rA, g8rc:$rB)
      AsmString = "tdeq $\x02, $\x03";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 8 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_G8RCRegClassID, 1) &&
        MCOperand_isReg(MCInst_getOperand(MI, 2)) &&
        GETREGCLASS_CONTAIN(PPC_G8RCRegClassID, 2)) {
      // (TD 8, g8rc:$rA, g8rc:$rB)
      AsmString = "tdgt $\x02, $\x03";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 24 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_G8RCRegClassID, 1) &&
        MCOperand_isReg(MCInst_getOperand(MI, 2)) &&
        GETREGCLASS_CONTAIN(PPC_G8RCRegClassID, 2)) {
      // (TD 24, g8rc:$rA, g8rc:$rB)
      AsmString = "tdne $\x02, $\x03";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 2 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_G8RCRegClassID, 1) &&
        MCOperand_isReg(MCInst_getOperand(MI, 2)) &&
        GETREGCLASS_CONTAIN(PPC_G8RCRegClassID, 2)) {
      // (TD 2, g8rc:$rA, g8rc:$rB)
      AsmString = "tdllt $\x02, $\x03";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 1 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_G8RCRegClassID, 1) &&
        MCOperand_isReg(MCInst_getOperand(MI, 2)) &&
        GETREGCLASS_CONTAIN(PPC_G8RCRegClassID, 2)) {
      // (TD 1, g8rc:$rA, g8rc:$rB)
      AsmString = "tdlgt $\x02, $\x03";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 31 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_G8RCRegClassID, 1) &&
        MCOperand_isReg(MCInst_getOperand(MI, 2)) &&
        GETREGCLASS_CONTAIN(PPC_G8RCRegClassID, 2)) {
      // (TD 31, g8rc:$rA, g8rc:$rB)
      AsmString = "tdu $\x02, $\x03";
      break;
    }
    return NULL;
  case PPC_TDI:
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 16 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_G8RCRegClassID, 1)) {
      // (TDI 16, g8rc:$rA, s16imm:$imm)
      AsmString = "tdlti $\x02, $\xFF\x03\x03";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 4 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_G8RCRegClassID, 1)) {
      // (TDI 4, g8rc:$rA, s16imm:$imm)
      AsmString = "tdeqi $\x02, $\xFF\x03\x03";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 8 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_G8RCRegClassID, 1)) {
      // (TDI 8, g8rc:$rA, s16imm:$imm)
      AsmString = "tdgti $\x02, $\xFF\x03\x03";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 24 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_G8RCRegClassID, 1)) {
      // (TDI 24, g8rc:$rA, s16imm:$imm)
      AsmString = "tdnei $\x02, $\xFF\x03\x03";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 2 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_G8RCRegClassID, 1)) {
      // (TDI 2, g8rc:$rA, s16imm:$imm)
      AsmString = "tdllti $\x02, $\xFF\x03\x03";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 1 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_G8RCRegClassID, 1)) {
      // (TDI 1, g8rc:$rA, s16imm:$imm)
      AsmString = "tdlgti $\x02, $\xFF\x03\x03";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 31 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_G8RCRegClassID, 1)) {
      // (TDI 31, g8rc:$rA, s16imm:$imm)
      AsmString = "tdui $\x02, $\xFF\x03\x03";
      break;
    }
    return NULL;
  case PPC_TLBIE:
    if (MCInst_getNumOperands(MI) == 2 &&
        MCOperand_getReg(MCInst_getOperand(MI, 0)) == PPC_R0 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 1)) {
      // (TLBIE R0, gprc:$RB)
      AsmString = "tlbie $\x02";
      break;
    }
    return NULL;
  case PPC_TLBRE2:
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 0) &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 1) &&
        MCOperand_isImm(MCInst_getOperand(MI, 2)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 2)) == 0) {
      // (TLBRE2 gprc:$RS, gprc:$A, 0)
      AsmString = "tlbrehi $\x01, $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 0) &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 1) &&
        MCOperand_isImm(MCInst_getOperand(MI, 2)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 2)) == 1) {
      // (TLBRE2 gprc:$RS, gprc:$A, 1)
      AsmString = "tlbrelo $\x01, $\x02";
      break;
    }
    return NULL;
  case PPC_TLBWE2:
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 0) &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 1) &&
        MCOperand_isImm(MCInst_getOperand(MI, 2)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 2)) == 0) {
      // (TLBWE2 gprc:$RS, gprc:$A, 0)
      AsmString = "tlbwehi $\x01, $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 0) &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 1) &&
        MCOperand_isImm(MCInst_getOperand(MI, 2)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 2)) == 1) {
      // (TLBWE2 gprc:$RS, gprc:$A, 1)
      AsmString = "tlbwelo $\x01, $\x02";
      break;
    }
    return NULL;
  case PPC_TW:
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 16 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 1) &&
        MCOperand_isReg(MCInst_getOperand(MI, 2)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 2)) {
      // (TW 16, gprc:$rA, gprc:$rB)
      AsmString = "twlt $\x02, $\x03";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 4 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 1) &&
        MCOperand_isReg(MCInst_getOperand(MI, 2)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 2)) {
      // (TW 4, gprc:$rA, gprc:$rB)
      AsmString = "tweq $\x02, $\x03";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 8 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 1) &&
        MCOperand_isReg(MCInst_getOperand(MI, 2)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 2)) {
      // (TW 8, gprc:$rA, gprc:$rB)
      AsmString = "twgt $\x02, $\x03";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 24 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 1) &&
        MCOperand_isReg(MCInst_getOperand(MI, 2)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 2)) {
      // (TW 24, gprc:$rA, gprc:$rB)
      AsmString = "twne $\x02, $\x03";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 2 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 1) &&
        MCOperand_isReg(MCInst_getOperand(MI, 2)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 2)) {
      // (TW 2, gprc:$rA, gprc:$rB)
      AsmString = "twllt $\x02, $\x03";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 1 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 1) &&
        MCOperand_isReg(MCInst_getOperand(MI, 2)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 2)) {
      // (TW 1, gprc:$rA, gprc:$rB)
      AsmString = "twlgt $\x02, $\x03";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 31 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 1) &&
        MCOperand_isReg(MCInst_getOperand(MI, 2)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 2)) {
      // (TW 31, gprc:$rA, gprc:$rB)
      AsmString = "twu $\x02, $\x03";
      break;
    }
    return NULL;
  case PPC_TWI:
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 16 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 1)) {
      // (TWI 16, gprc:$rA, s16imm:$imm)
      AsmString = "twlti $\x02, $\xFF\x03\x03";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 4 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 1)) {
      // (TWI 4, gprc:$rA, s16imm:$imm)
      AsmString = "tweqi $\x02, $\xFF\x03\x03";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 8 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 1)) {
      // (TWI 8, gprc:$rA, s16imm:$imm)
      AsmString = "twgti $\x02, $\xFF\x03\x03";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 24 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 1)) {
      // (TWI 24, gprc:$rA, s16imm:$imm)
      AsmString = "twnei $\x02, $\xFF\x03\x03";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 2 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 1)) {
      // (TWI 2, gprc:$rA, s16imm:$imm)
      AsmString = "twllti $\x02, $\xFF\x03\x03";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 1 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 1)) {
      // (TWI 1, gprc:$rA, s16imm:$imm)
      AsmString = "twlgti $\x02, $\xFF\x03\x03";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 31 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_GPRCRegClassID, 1)) {
      // (TWI 31, gprc:$rA, s16imm:$imm)
      AsmString = "twui $\x02, $\xFF\x03\x03";
      break;
    }
    return NULL;
  case PPC_VNOR:
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_VRRCRegClassID, 0) &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_VRRCRegClassID, 1) &&
        MCOperand_isReg(MCInst_getOperand(MI, 2)) &&
        MCOperand_getReg(MCInst_getOperand(MI, 2)) == MCOperand_getReg(MCInst_getOperand(MI, 1))) {
      // (VNOR vrrc:$vD, vrrc:$vA, vrrc:$vA)
      AsmString = "vnot $\x01, $\x02";
      break;
    }
    return NULL;
  case PPC_VOR:
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_VRRCRegClassID, 0) &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_VRRCRegClassID, 1) &&
        MCOperand_isReg(MCInst_getOperand(MI, 2)) &&
        MCOperand_getReg(MCInst_getOperand(MI, 2)) == MCOperand_getReg(MCInst_getOperand(MI, 1))) {
      // (VOR vrrc:$vD, vrrc:$vA, vrrc:$vA)
      AsmString = "vmr $\x01, $\x02";
      break;
    }
    return NULL;
  case PPC_WAIT:
    if (MCInst_getNumOperands(MI) == 1 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 0) {
      // (WAIT 0)
      AsmString = "wait";
      break;
    }
    if (MCInst_getNumOperands(MI) == 1 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 1) {
      // (WAIT 1)
      AsmString = "waitrsv";
      break;
    }
    if (MCInst_getNumOperands(MI) == 1 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 2) {
      // (WAIT 2)
      AsmString = "waitimpl";
      break;
    }
    return NULL;
  case PPC_XORI:
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_getReg(MCInst_getOperand(MI, 0)) == PPC_R0 &&
        MCOperand_getReg(MCInst_getOperand(MI, 1)) == PPC_R0 &&
        MCOperand_isImm(MCInst_getOperand(MI, 2)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 2)) == 0) {
      // (XORI R0, R0, 0)
      AsmString = "xnop";
      break;
    }
    return NULL;
  case PPC_XVCPSGNDP:
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_VSRCRegClassID, 0) &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_VSRCRegClassID, 1) &&
        MCOperand_isReg(MCInst_getOperand(MI, 2)) &&
        MCOperand_getReg(MCInst_getOperand(MI, 2)) == MCOperand_getReg(MCInst_getOperand(MI, 1))) {
      // (XVCPSGNDP vsrc:$XT, vsrc:$XB, vsrc:$XB)
      AsmString = "xvmovdp $\x01, $\x02";
      break;
    }
    return NULL;
  case PPC_XVCPSGNSP:
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_VSRCRegClassID, 0) &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_VSRCRegClassID, 1) &&
        MCOperand_isReg(MCInst_getOperand(MI, 2)) &&
        MCOperand_getReg(MCInst_getOperand(MI, 2)) == MCOperand_getReg(MCInst_getOperand(MI, 1))) {
      // (XVCPSGNSP vsrc:$XT, vsrc:$XB, vsrc:$XB)
      AsmString = "xvmovsp $\x01, $\x02";
      break;
    }
    return NULL;
  case PPC_XXPERMDI:
    if (MCInst_getNumOperands(MI) == 4 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_VSRCRegClassID, 0) &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_VSRCRegClassID, 1) &&
        MCOperand_isReg(MCInst_getOperand(MI, 2)) &&
        MCOperand_getReg(MCInst_getOperand(MI, 2)) == MCOperand_getReg(MCInst_getOperand(MI, 1)) &&
        MCOperand_isImm(MCInst_getOperand(MI, 3)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 3)) == 0) {
      // (XXPERMDI vsrc:$XT, vsrc:$XB, vsrc:$XB, 0)
      AsmString = "xxspltd $\x01, $\x02, 0";
      break;
    }
    if (MCInst_getNumOperands(MI) == 4 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_VSRCRegClassID, 0) &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_VSRCRegClassID, 1) &&
        MCOperand_isReg(MCInst_getOperand(MI, 2)) &&
        MCOperand_getReg(MCInst_getOperand(MI, 2)) == MCOperand_getReg(MCInst_getOperand(MI, 1)) &&
        MCOperand_isImm(MCInst_getOperand(MI, 3)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 3)) == 3) {
      // (XXPERMDI vsrc:$XT, vsrc:$XB, vsrc:$XB, 3)
      AsmString = "xxspltd $\x01, $\x02, 1";
      break;
    }
    if (MCInst_getNumOperands(MI) == 4 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_VSRCRegClassID, 0) &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_VSRCRegClassID, 1) &&
        MCOperand_isReg(MCInst_getOperand(MI, 2)) &&
        GETREGCLASS_CONTAIN(PPC_VSRCRegClassID, 2) &&
        MCOperand_isImm(MCInst_getOperand(MI, 3)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 3)) == 0) {
      // (XXPERMDI vsrc:$XT, vsrc:$XA, vsrc:$XB, 0)
      AsmString = "xxmrghd $\x01, $\x02, $\x03";
      break;
    }
    if (MCInst_getNumOperands(MI) == 4 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_VSRCRegClassID, 0) &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_VSRCRegClassID, 1) &&
        MCOperand_isReg(MCInst_getOperand(MI, 2)) &&
        GETREGCLASS_CONTAIN(PPC_VSRCRegClassID, 2) &&
        MCOperand_isImm(MCInst_getOperand(MI, 3)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 3)) == 3) {
      // (XXPERMDI vsrc:$XT, vsrc:$XA, vsrc:$XB, 3)
      AsmString = "xxmrgld $\x01, $\x02, $\x03";
      break;
    }
    if (MCInst_getNumOperands(MI) == 4 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_VSRCRegClassID, 0) &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_VSRCRegClassID, 1) &&
        MCOperand_isReg(MCInst_getOperand(MI, 2)) &&
        MCOperand_getReg(MCInst_getOperand(MI, 2)) == MCOperand_getReg(MCInst_getOperand(MI, 1)) &&
        MCOperand_isImm(MCInst_getOperand(MI, 3)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 3)) == 2) {
      // (XXPERMDI vsrc:$XT, vsrc:$XB, vsrc:$XB, 2)
      AsmString = "xxswapd $\x01, $\x02";
      break;
    }
    return NULL;
  case PPC_XXPERMDIs:
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_VSRCRegClassID, 0) &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_VSFRCRegClassID, 1) &&
        MCOperand_isImm(MCInst_getOperand(MI, 2)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 2)) == 0) {
      // (XXPERMDIs vsrc:$XT, vsfrc:$XB, 0)
      AsmString = "xxspltd $\x01, $\x02, 0";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_VSRCRegClassID, 0) &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_VSFRCRegClassID, 1) &&
        MCOperand_isImm(MCInst_getOperand(MI, 2)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 2)) == 3) {
      // (XXPERMDIs vsrc:$XT, vsfrc:$XB, 3)
      AsmString = "xxspltd $\x01, $\x02, 1";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isReg(MCInst_getOperand(MI, 0)) &&
        GETREGCLASS_CONTAIN(PPC_VSRCRegClassID, 0) &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_VSFRCRegClassID, 1) &&
        MCOperand_isImm(MCInst_getOperand(MI, 2)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 2)) == 2) {
      // (XXPERMDIs vsrc:$XT, vsfrc:$XB, 2)
      AsmString = "xxswapd $\x01, $\x02";
      break;
    }
    return NULL;
  case PPC_gBC:
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 12 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRBITRCRegClassID, 1)) {
      // (gBC 12, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bt $\x02, $\xFF\x03\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 4 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRBITRCRegClassID, 1)) {
      // (gBC 4, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bf $\x02, $\xFF\x03\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 14 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRBITRCRegClassID, 1)) {
      // (gBC 14, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bt- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 6 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRBITRCRegClassID, 1)) {
      // (gBC 6, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bf- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 15 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRBITRCRegClassID, 1)) {
      // (gBC 15, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bt+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 7 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRBITRCRegClassID, 1)) {
      // (gBC 7, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bf+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 8 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRBITRCRegClassID, 1)) {
      // (gBC 8, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bdnzt $\x02, $\xFF\x03\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 0 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRBITRCRegClassID, 1)) {
      // (gBC 0, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bdnzf $\x02, $\xFF\x03\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 10 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRBITRCRegClassID, 1)) {
      // (gBC 10, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bdzt $\x02, $\xFF\x03\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 2 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRBITRCRegClassID, 1)) {
      // (gBC 2, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bdzf $\x02, $\xFF\x03\x01";
      break;
    }
    return NULL;
  case PPC_gBCA:
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 12 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRBITRCRegClassID, 1)) {
      // (gBCA 12, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bta $\x02, $\xFF\x03\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 4 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRBITRCRegClassID, 1)) {
      // (gBCA 4, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bfa $\x02, $\xFF\x03\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 14 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRBITRCRegClassID, 1)) {
      // (gBCA 14, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bta- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 6 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRBITRCRegClassID, 1)) {
      // (gBCA 6, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bfa- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 15 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRBITRCRegClassID, 1)) {
      // (gBCA 15, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bta+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 7 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRBITRCRegClassID, 1)) {
      // (gBCA 7, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bfa+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 8 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRBITRCRegClassID, 1)) {
      // (gBCA 8, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bdnzta $\x02, $\xFF\x03\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 0 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRBITRCRegClassID, 1)) {
      // (gBCA 0, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bdnzfa $\x02, $\xFF\x03\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 10 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRBITRCRegClassID, 1)) {
      // (gBCA 10, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bdzta $\x02, $\xFF\x03\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 2 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRBITRCRegClassID, 1)) {
      // (gBCA 2, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bdzfa $\x02, $\xFF\x03\x02";
      break;
    }
    return NULL;
  case PPC_gBCAat:
    if (MCInst_getNumOperands(MI) == 4 &&
        MCOperand_isImm(MCInst_getOperand(MI, 1)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 1)) == 3 &&
        MCOperand_isReg(MCInst_getOperand(MI, 2)) &&
        GETREGCLASS_CONTAIN(PPC_CRBITRCRegClassID, 2)) {
      // (gBCAat u5imm:$bo, 3, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bca+ $\xFF\x01\x06, $\x03, $\xFF\x04\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 4 &&
        MCOperand_isImm(MCInst_getOperand(MI, 1)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 1)) == 2 &&
        MCOperand_isReg(MCInst_getOperand(MI, 2)) &&
        GETREGCLASS_CONTAIN(PPC_CRBITRCRegClassID, 2)) {
      // (gBCAat u5imm:$bo, 2, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bca- $\xFF\x01\x06, $\x03, $\xFF\x04\x01";
      break;
    }
    return NULL;
  case PPC_gBCCTR:
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRBITRCRegClassID, 1) &&
        MCOperand_isImm(MCInst_getOperand(MI, 2)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 2)) == 0) {
      // (gBCCTR u5imm:$bo, crbitrc:$bi, 0)
      AsmString = "bcctr $\xFF\x01\x06, $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 12 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRBITRCRegClassID, 1) &&
        MCOperand_isImm(MCInst_getOperand(MI, 2)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 2)) == 0) {
      // (gBCCTR 12, crbitrc:$bi, 0)
      AsmString = "btctr $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 4 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRBITRCRegClassID, 1) &&
        MCOperand_isImm(MCInst_getOperand(MI, 2)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 2)) == 0) {
      // (gBCCTR 4, crbitrc:$bi, 0)
      AsmString = "bfctr $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 14 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRBITRCRegClassID, 1) &&
        MCOperand_isImm(MCInst_getOperand(MI, 2)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 2)) == 0) {
      // (gBCCTR 14, crbitrc:$bi, 0)
      AsmString = "btctr- $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 6 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRBITRCRegClassID, 1) &&
        MCOperand_isImm(MCInst_getOperand(MI, 2)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 2)) == 0) {
      // (gBCCTR 6, crbitrc:$bi, 0)
      AsmString = "bfctr- $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 15 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRBITRCRegClassID, 1) &&
        MCOperand_isImm(MCInst_getOperand(MI, 2)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 2)) == 0) {
      // (gBCCTR 15, crbitrc:$bi, 0)
      AsmString = "btctr+ $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 7 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRBITRCRegClassID, 1) &&
        MCOperand_isImm(MCInst_getOperand(MI, 2)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 2)) == 0) {
      // (gBCCTR 7, crbitrc:$bi, 0)
      AsmString = "bfctr+ $\x02";
      break;
    }
    return NULL;
  case PPC_gBCCTRL:
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRBITRCRegClassID, 1) &&
        MCOperand_isImm(MCInst_getOperand(MI, 2)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 2)) == 0) {
      // (gBCCTRL u5imm:$bo, crbitrc:$bi, 0)
      AsmString = "bcctrl $\xFF\x01\x06, $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 12 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRBITRCRegClassID, 1) &&
        MCOperand_isImm(MCInst_getOperand(MI, 2)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 2)) == 0) {
      // (gBCCTRL 12, crbitrc:$bi, 0)
      AsmString = "btctrl $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 4 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRBITRCRegClassID, 1) &&
        MCOperand_isImm(MCInst_getOperand(MI, 2)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 2)) == 0) {
      // (gBCCTRL 4, crbitrc:$bi, 0)
      AsmString = "bfctrl $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 14 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRBITRCRegClassID, 1) &&
        MCOperand_isImm(MCInst_getOperand(MI, 2)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 2)) == 0) {
      // (gBCCTRL 14, crbitrc:$bi, 0)
      AsmString = "btctrl- $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 6 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRBITRCRegClassID, 1) &&
        MCOperand_isImm(MCInst_getOperand(MI, 2)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 2)) == 0) {
      // (gBCCTRL 6, crbitrc:$bi, 0)
      AsmString = "bfctrl- $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 15 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRBITRCRegClassID, 1) &&
        MCOperand_isImm(MCInst_getOperand(MI, 2)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 2)) == 0) {
      // (gBCCTRL 15, crbitrc:$bi, 0)
      AsmString = "btctrl+ $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 7 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRBITRCRegClassID, 1) &&
        MCOperand_isImm(MCInst_getOperand(MI, 2)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 2)) == 0) {
      // (gBCCTRL 7, crbitrc:$bi, 0)
      AsmString = "bfctrl+ $\x02";
      break;
    }
    return NULL;
  case PPC_gBCL:
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 12 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRBITRCRegClassID, 1)) {
      // (gBCL 12, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "btl $\x02, $\xFF\x03\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 4 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRBITRCRegClassID, 1)) {
      // (gBCL 4, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bfl $\x02, $\xFF\x03\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 14 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRBITRCRegClassID, 1)) {
      // (gBCL 14, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "btl- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 6 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRBITRCRegClassID, 1)) {
      // (gBCL 6, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bfl- $\x02, $\xFF\x03\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 15 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRBITRCRegClassID, 1)) {
      // (gBCL 15, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "btl+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 7 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRBITRCRegClassID, 1)) {
      // (gBCL 7, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bfl+ $\x02, $\xFF\x03\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 8 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRBITRCRegClassID, 1)) {
      // (gBCL 8, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bdnztl $\x02, $\xFF\x03\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 0 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRBITRCRegClassID, 1)) {
      // (gBCL 0, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bdnzfl $\x02, $\xFF\x03\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 10 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRBITRCRegClassID, 1)) {
      // (gBCL 10, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bdztl $\x02, $\xFF\x03\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 2 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRBITRCRegClassID, 1)) {
      // (gBCL 2, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bdzfl $\x02, $\xFF\x03\x01";
      break;
    }
    return NULL;
  case PPC_gBCLA:
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 12 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRBITRCRegClassID, 1)) {
      // (gBCLA 12, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "btla $\x02, $\xFF\x03\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 4 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRBITRCRegClassID, 1)) {
      // (gBCLA 4, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bfla $\x02, $\xFF\x03\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 14 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRBITRCRegClassID, 1)) {
      // (gBCLA 14, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "btla- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 6 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRBITRCRegClassID, 1)) {
      // (gBCLA 6, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bfla- $\x02, $\xFF\x03\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 15 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRBITRCRegClassID, 1)) {
      // (gBCLA 15, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "btla+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 7 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRBITRCRegClassID, 1)) {
      // (gBCLA 7, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bfla+ $\x02, $\xFF\x03\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 8 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRBITRCRegClassID, 1)) {
      // (gBCLA 8, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bdnztla $\x02, $\xFF\x03\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 0 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRBITRCRegClassID, 1)) {
      // (gBCLA 0, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bdnzfla $\x02, $\xFF\x03\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 10 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRBITRCRegClassID, 1)) {
      // (gBCLA 10, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bdztla $\x02, $\xFF\x03\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 2 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRBITRCRegClassID, 1)) {
      // (gBCLA 2, crbitrc:$bi, abscondbrtarget:$dst)
      AsmString = "bdzfla $\x02, $\xFF\x03\x02";
      break;
    }
    return NULL;
  case PPC_gBCLAat:
    if (MCInst_getNumOperands(MI) == 4 &&
        MCOperand_isImm(MCInst_getOperand(MI, 1)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 1)) == 3 &&
        MCOperand_isReg(MCInst_getOperand(MI, 2)) &&
        GETREGCLASS_CONTAIN(PPC_CRBITRCRegClassID, 2)) {
      // (gBCLAat u5imm:$bo, 3, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bcla+ $\xFF\x01\x06, $\x03, $\xFF\x04\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 4 &&
        MCOperand_isImm(MCInst_getOperand(MI, 1)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 1)) == 2 &&
        MCOperand_isReg(MCInst_getOperand(MI, 2)) &&
        GETREGCLASS_CONTAIN(PPC_CRBITRCRegClassID, 2)) {
      // (gBCLAat u5imm:$bo, 2, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bcla- $\xFF\x01\x06, $\x03, $\xFF\x04\x01";
      break;
    }
    return NULL;
  case PPC_gBCLR:
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRBITRCRegClassID, 1) &&
        MCOperand_isImm(MCInst_getOperand(MI, 2)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 2)) == 0) {
      // (gBCLR u5imm:$bo, crbitrc:$bi, 0)
      AsmString = "bclr $\xFF\x01\x06, $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 12 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRBITRCRegClassID, 1) &&
        MCOperand_isImm(MCInst_getOperand(MI, 2)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 2)) == 0) {
      // (gBCLR 12, crbitrc:$bi, 0)
      AsmString = "btlr $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 4 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRBITRCRegClassID, 1) &&
        MCOperand_isImm(MCInst_getOperand(MI, 2)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 2)) == 0) {
      // (gBCLR 4, crbitrc:$bi, 0)
      AsmString = "bflr $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 14 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRBITRCRegClassID, 1) &&
        MCOperand_isImm(MCInst_getOperand(MI, 2)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 2)) == 0) {
      // (gBCLR 14, crbitrc:$bi, 0)
      AsmString = "btlr- $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 6 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRBITRCRegClassID, 1) &&
        MCOperand_isImm(MCInst_getOperand(MI, 2)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 2)) == 0) {
      // (gBCLR 6, crbitrc:$bi, 0)
      AsmString = "bflr- $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 15 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRBITRCRegClassID, 1) &&
        MCOperand_isImm(MCInst_getOperand(MI, 2)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 2)) == 0) {
      // (gBCLR 15, crbitrc:$bi, 0)
      AsmString = "btlr+ $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 7 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRBITRCRegClassID, 1) &&
        MCOperand_isImm(MCInst_getOperand(MI, 2)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 2)) == 0) {
      // (gBCLR 7, crbitrc:$bi, 0)
      AsmString = "bflr+ $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 8 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRBITRCRegClassID, 1) &&
        MCOperand_isImm(MCInst_getOperand(MI, 2)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 2)) == 0) {
      // (gBCLR 8, crbitrc:$bi, 0)
      AsmString = "bdnztlr $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 0 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRBITRCRegClassID, 1) &&
        MCOperand_isImm(MCInst_getOperand(MI, 2)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 2)) == 0) {
      // (gBCLR 0, crbitrc:$bi, 0)
      AsmString = "bdnzflr $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 10 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRBITRCRegClassID, 1) &&
        MCOperand_isImm(MCInst_getOperand(MI, 2)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 2)) == 0) {
      // (gBCLR 10, crbitrc:$bi, 0)
      AsmString = "bdztlr $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 2 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRBITRCRegClassID, 1) &&
        MCOperand_isImm(MCInst_getOperand(MI, 2)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 2)) == 0) {
      // (gBCLR 2, crbitrc:$bi, 0)
      AsmString = "bdzflr $\x02";
      break;
    }
    return NULL;
  case PPC_gBCLRL:
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRBITRCRegClassID, 1) &&
        MCOperand_isImm(MCInst_getOperand(MI, 2)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 2)) == 0) {
      // (gBCLRL u5imm:$bo, crbitrc:$bi, 0)
      AsmString = "bclrl $\xFF\x01\x06, $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 12 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRBITRCRegClassID, 1) &&
        MCOperand_isImm(MCInst_getOperand(MI, 2)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 2)) == 0) {
      // (gBCLRL 12, crbitrc:$bi, 0)
      AsmString = "btlrl $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 4 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRBITRCRegClassID, 1) &&
        MCOperand_isImm(MCInst_getOperand(MI, 2)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 2)) == 0) {
      // (gBCLRL 4, crbitrc:$bi, 0)
      AsmString = "bflrl $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 14 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRBITRCRegClassID, 1) &&
        MCOperand_isImm(MCInst_getOperand(MI, 2)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 2)) == 0) {
      // (gBCLRL 14, crbitrc:$bi, 0)
      AsmString = "btlrl- $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 6 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRBITRCRegClassID, 1) &&
        MCOperand_isImm(MCInst_getOperand(MI, 2)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 2)) == 0) {
      // (gBCLRL 6, crbitrc:$bi, 0)
      AsmString = "bflrl- $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 15 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRBITRCRegClassID, 1) &&
        MCOperand_isImm(MCInst_getOperand(MI, 2)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 2)) == 0) {
      // (gBCLRL 15, crbitrc:$bi, 0)
      AsmString = "btlrl+ $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 7 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRBITRCRegClassID, 1) &&
        MCOperand_isImm(MCInst_getOperand(MI, 2)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 2)) == 0) {
      // (gBCLRL 7, crbitrc:$bi, 0)
      AsmString = "bflrl+ $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 8 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRBITRCRegClassID, 1) &&
        MCOperand_isImm(MCInst_getOperand(MI, 2)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 2)) == 0) {
      // (gBCLRL 8, crbitrc:$bi, 0)
      AsmString = "bdnztlrl $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 0 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRBITRCRegClassID, 1) &&
        MCOperand_isImm(MCInst_getOperand(MI, 2)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 2)) == 0) {
      // (gBCLRL 0, crbitrc:$bi, 0)
      AsmString = "bdnzflrl $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 10 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRBITRCRegClassID, 1) &&
        MCOperand_isImm(MCInst_getOperand(MI, 2)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 2)) == 0) {
      // (gBCLRL 10, crbitrc:$bi, 0)
      AsmString = "bdztlrl $\x02";
      break;
    }
    if (MCInst_getNumOperands(MI) == 3 &&
        MCOperand_isImm(MCInst_getOperand(MI, 0)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 0)) == 2 &&
        MCOperand_isReg(MCInst_getOperand(MI, 1)) &&
        GETREGCLASS_CONTAIN(PPC_CRBITRCRegClassID, 1) &&
        MCOperand_isImm(MCInst_getOperand(MI, 2)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 2)) == 0) {
      // (gBCLRL 2, crbitrc:$bi, 0)
      AsmString = "bdzflrl $\x02";
      break;
    }
    return NULL;
  case PPC_gBCLat:
    if (MCInst_getNumOperands(MI) == 4 &&
        MCOperand_isImm(MCInst_getOperand(MI, 1)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 1)) == 3 &&
        MCOperand_isReg(MCInst_getOperand(MI, 2)) &&
        GETREGCLASS_CONTAIN(PPC_CRBITRCRegClassID, 2)) {
      // (gBCLat u5imm:$bo, 3, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bcl+ $\xFF\x01\x06, $\x03, $\xFF\x04\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 4 &&
        MCOperand_isImm(MCInst_getOperand(MI, 1)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 1)) == 2 &&
        MCOperand_isReg(MCInst_getOperand(MI, 2)) &&
        GETREGCLASS_CONTAIN(PPC_CRBITRCRegClassID, 2)) {
      // (gBCLat u5imm:$bo, 2, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bcl- $\xFF\x01\x06, $\x03, $\xFF\x04\x01";
      break;
    }
    return NULL;
  case PPC_gBCat:
    if (MCInst_getNumOperands(MI) == 4 &&
        MCOperand_isImm(MCInst_getOperand(MI, 1)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 1)) == 3 &&
        MCOperand_isReg(MCInst_getOperand(MI, 2)) &&
        GETREGCLASS_CONTAIN(PPC_CRBITRCRegClassID, 2)) {
      // (gBCat u5imm:$bo, 3, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bc+ $\xFF\x01\x06, $\x03, $\xFF\x04\x01";
      break;
    }
    if (MCInst_getNumOperands(MI) == 4 &&
        MCOperand_isImm(MCInst_getOperand(MI, 1)) &&
        MCOperand_getImm(MCInst_getOperand(MI, 1)) == 2 &&
        MCOperand_isReg(MCInst_getOperand(MI, 2)) &&
        GETREGCLASS_CONTAIN(PPC_CRBITRCRegClassID, 2)) {
      // (gBCat u5imm:$bo, 2, crbitrc:$bi, condbrtarget:$dst)
      AsmString = "bc- $\xFF\x01\x06, $\x03, $\xFF\x04\x01";
      break;
    }
    return NULL;
  }


  tmpString = cs_strdup(AsmString);

  while (AsmString[I] != ' ' && AsmString[I] != '\t' &&
         AsmString[I] != '$' && AsmString[I] != '\0')
    ++I;

  tmpString[I] = 0;
  SStream_concat0(OS, tmpString);

  if (AsmString[I] != '\0') {
    if (AsmString[I] == ' ' || AsmString[I] == '\t') {
      SStream_concat0(OS, " ");
      ++I;
    }

    do {
      if (AsmString[I] == '$') {
        ++I;
        if (AsmString[I] == (char)0xff) {
          ++I;
          OpIdx = AsmString[I++] - 1;
          PrintMethodIdx = AsmString[I++] - 1;
          printCustomAliasOperand(MI, OpIdx, PrintMethodIdx, OS);
        } else
            printOperand(MI, (unsigned)(AsmString[I++]) - 1, OS);
      } else {
          SStream_concat1(OS, AsmString[I++]);
      }
    } while (AsmString[I] != '\0');
  }

  return tmpString;
}
        
static void printCustomAliasOperand(
         MCInst *MI, unsigned OpIdx,
         unsigned PrintMethodIdx,
         SStream *OS)
{
  switch (PrintMethodIdx) {
  default:
    break;
  case 0:
    printBranchOperand(MI, OpIdx, OS);
    break;
  case 1:
    printAbsBranchOperand(MI, OpIdx, OS);
    break;
  case 2:
    printS16ImmOperand(MI, OpIdx, OS);
    break;
  case 3:
    printU16ImmOperand(MI, OpIdx, OS);
    break;
  case 4:
    printU6ImmOperand(MI, OpIdx, OS);
    break;
  case 5:
    printU5ImmOperand(MI, OpIdx, OS);
    break;
  }
}

#endif // PRINT_ALIAS_INSTR
