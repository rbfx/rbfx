/*
 *  Copyright 2019-2024 Diligent Graphics LLC
 *  Copyright 2015-2019 Egor Yusov
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *  In no event and under no legal theory, whether in tort (including negligence),
 *  contract, or otherwise, unless required by applicable law (such as deliberate
 *  and grossly negligent acts) or agreed to in writing, shall any Contributor be
 *  liable for any damages, including any direct, indirect, special, incidental,
 *  or consequential damages of any character arising as a result of this License or
 *  out of the use or inability to use the software (including but not limited to damages
 *  for loss of goodwill, work stoppage, computer failure or malfunction, or any and
 *  all other commercial damages or losses), even if such Contributor has been advised
 *  of the possibility of such damages.
 */

#include "pch.h"

#include "ShaderVkImpl.hpp"

#include <array>
#include <cctype>

#include "RenderDeviceVkImpl.hpp"
#include "DataBlobImpl.hpp"
#include "GLSLUtils.hpp"
#include "DXCompiler.hpp"
#include "ShaderToolsCommon.hpp"

#if !DILIGENT_NO_GLSLANG
#    include "GLSLangUtils.hpp"
#endif

#if !DILIGENT_NO_HLSL
#    include "SPIRVTools.hpp"
#endif

namespace Diligent
{

constexpr INTERFACE_ID ShaderVkImpl::IID_InternalImpl;

namespace
{

static constexpr char VulkanDefine[] =
    "#ifndef VULKAN\n"
    "#   define VULKAN 1\n"
    "#endif\n"
#if PLATFORM_MACOS || PLATFORM_IOS || PLATFORM_TVOS
    "#ifndef METAL\n"
    "#   define METAL 1\n"
    "#endif\n"
#endif
    ;

std::vector<uint32_t> CompileShaderDXC(const ShaderCreateInfo&         ShaderCI,
                                       const ShaderVkImpl::CreateInfo& VkShaderCI)
{
    auto* pDXCompiler = VkShaderCI.pDXCompiler;
    VERIFY_EXPR(pDXCompiler != nullptr && pDXCompiler->IsLoaded());
    std::vector<uint32_t> SPIRV;
    pDXCompiler->Compile(ShaderCI, ShaderCI.HLSLVersion, VulkanDefine, nullptr, &SPIRV, VkShaderCI.ppCompilerOutput);

#if !DILIGENT_NO_HLSL
    if (!SPIRV.empty())
    {
        // SPIR-V bytecode generated from HLSL must be legalized to
        // turn it into a valid vulkan SPIR-V shader.
        auto LegalizedSPIRV = OptimizeSPIRV(SPIRV, SPV_ENV_MAX, SPIRV_OPTIMIZATION_FLAG_LEGALIZATION);
        if (!LegalizedSPIRV.empty())
            SPIRV = std::move(LegalizedSPIRV);
        else
            LOG_ERROR("Failed to legalize SPIR-V shader generated from HLSL. This may result in undefined behavior.");
    }
#else
    LOG_WARNING_MESSAGE("Unable to legalize SPIRV bytecode generated by DXC as the engine was built with DILIGENT_NO_HLSL option. The byte code may be invalid.");
#endif
    return SPIRV;
}

std::vector<uint32_t> CompileShaderGLSLang(const ShaderCreateInfo&         ShaderCI,
                                           const ShaderVkImpl::CreateInfo& VkShaderCI)
{
    std::vector<uint32_t> SPIRV;

#if DILIGENT_NO_GLSLANG
    LOG_ERROR_AND_THROW("Diligent engine was not linked with glslang, use DXC or precompiled SPIRV bytecode.");
#else
    if (ShaderCI.SourceLanguage == SHADER_SOURCE_LANGUAGE_HLSL)
    {
        SPIRV = GLSLangUtils::HLSLtoSPIRV(ShaderCI, GLSLangUtils::SpirvVersion::Vk100, VulkanDefine, VkShaderCI.ppCompilerOutput);
    }
    else
    {
        std::string          GLSLSourceString;
        ShaderSourceFileData SourceData;

        ShaderMacroArray Macros;
        if (ShaderCI.SourceLanguage == SHADER_SOURCE_LANGUAGE_GLSL_VERBATIM)
        {
            // Read the source file directly and use it as is
            SourceData = ReadShaderSourceFile(ShaderCI);

            // Add user macros.
            // BuildGLSLSourceString adds the macros to the source string, so we don't need to do this for SHADER_SOURCE_LANGUAGE_GLSL
            Macros = ShaderCI.Macros;
        }
        else
        {
            // Build the full source code string that will contain GLSL version declaration,
            // platform definitions, user-provided shader macros, etc.
            GLSLSourceString = BuildGLSLSourceString(
                {
                    ShaderCI,
                    VkShaderCI.AdapterInfo,
                    VkShaderCI.DeviceInfo.Features,
                    VkShaderCI.DeviceInfo.Type,
                    VkShaderCI.DeviceInfo.MaxShaderVersion,
                    TargetGLSLCompiler::glslang,
                    true, // ZeroToOneClipZ
                    VulkanDefine,
                });
            SourceData.Source       = GLSLSourceString.c_str();
            SourceData.SourceLength = StaticCast<Uint32>(GLSLSourceString.length());
        }

        GLSLangUtils::GLSLtoSPIRVAttribs Attribs;
        Attribs.ShaderType                 = ShaderCI.Desc.ShaderType;
        Attribs.ShaderSource               = SourceData.Source;
        Attribs.SourceCodeLen              = static_cast<int>(SourceData.SourceLength);
        Attribs.Version                    = GLSLangUtils::SpirvVersion::Vk100;
        Attribs.Macros                     = Macros;
        Attribs.AssignBindings             = true;
        Attribs.UseRowMajorMatrices        = (ShaderCI.CompileFlags & SHADER_COMPILE_FLAG_PACK_MATRIX_ROW_MAJOR) != 0;
        Attribs.pShaderSourceStreamFactory = ShaderCI.pShaderSourceStreamFactory;
        Attribs.ppCompilerOutput           = VkShaderCI.ppCompilerOutput;

        if (VkShaderCI.VkVersion >= VK_API_VERSION_1_2)
            Attribs.Version = GLSLangUtils::SpirvVersion::Vk120;
        else if (VkShaderCI.VkVersion >= VK_API_VERSION_1_1)
            Attribs.Version = VkShaderCI.HasSpirv14 ? GLSLangUtils::SpirvVersion::Vk110_Spirv14 : GLSLangUtils::SpirvVersion::Vk110;

        SPIRV = GLSLangUtils::GLSLtoSPIRV(Attribs);
    }
#endif

    return SPIRV;
}

} // namespace

void ShaderVkImpl::Initialize(const ShaderCreateInfo& ShaderCI,
                              const CreateInfo&       VkShaderCI)
{
    if (ShaderCI.Source != nullptr || ShaderCI.FilePath != nullptr)
    {
        DEV_CHECK_ERR(ShaderCI.ByteCode == nullptr, "'ByteCode' must be null when shader is created from source code or a file");

        auto ShaderCompiler = ShaderCI.ShaderCompiler;
        if (ShaderCompiler == SHADER_COMPILER_DXC)
        {
            auto* pDXCompiler = VkShaderCI.pDXCompiler;
            if (pDXCompiler == nullptr || !pDXCompiler->IsLoaded())
            {
                LOG_WARNING_MESSAGE("DX Compiler is not loaded. Using default shader compiler");
                ShaderCompiler = SHADER_COMPILER_DEFAULT;
            }
        }

        switch (ShaderCompiler)
        {
            case SHADER_COMPILER_DXC:
                m_SPIRV = CompileShaderDXC(ShaderCI, VkShaderCI);
                break;

            case SHADER_COMPILER_DEFAULT:
            case SHADER_COMPILER_GLSLANG:
                m_SPIRV = CompileShaderGLSLang(ShaderCI, VkShaderCI);
                break;

            default:
                LOG_ERROR_AND_THROW("Unsupported shader compiler");
        }

        if (m_SPIRV.empty())
        {
            LOG_ERROR_AND_THROW("Failed to compile shader '", m_Desc.Name, '\'');
        }
    }
    else if (ShaderCI.ByteCode != nullptr)
    {
        DEV_CHECK_ERR(ShaderCI.ByteCodeSize != 0, "ByteCodeSize must not be 0");
        DEV_CHECK_ERR(ShaderCI.ByteCodeSize % 4 == 0, "Byte code size (", ShaderCI.ByteCodeSize, ") is not multiple of 4");
        m_SPIRV.resize(ShaderCI.ByteCodeSize / 4);
        memcpy(m_SPIRV.data(), ShaderCI.ByteCode, ShaderCI.ByteCodeSize);
    }
    else
    {
        LOG_ERROR_AND_THROW("Shader source must be provided through one of the 'Source', 'FilePath' or 'ByteCode' members");
    }

    // We cannot create shader module here because resource bindings are assigned when
    // pipeline state is created

    // Load shader resources
    if (!m_SPIRV.empty())
    {
        if ((ShaderCI.CompileFlags & SHADER_COMPILE_FLAG_SKIP_REFLECTION) == 0)
        {
            auto& Allocator = GetRawAllocator();

            std::unique_ptr<void, STDDeleterRawMem<void>> pRawMem{
                ALLOCATE(Allocator, "Memory for SPIRVShaderResources", SPIRVShaderResources, 1),
                STDDeleterRawMem<void>(Allocator),
            };
            auto LoadShaderInputs = m_Desc.ShaderType == SHADER_TYPE_VERTEX;
            new (pRawMem.get()) SPIRVShaderResources // May throw
                {
                    Allocator,
                    m_SPIRV,
                    m_Desc,
                    m_Desc.UseCombinedTextureSamplers ? m_Desc.CombinedSamplerSuffix : nullptr,
                    LoadShaderInputs,
                    ShaderCI.LoadConstantBufferReflection,
                    m_EntryPoint //
                };
            VERIFY_EXPR(ShaderCI.ByteCode != nullptr || m_EntryPoint == ShaderCI.EntryPoint);
            m_pShaderResources.reset(static_cast<SPIRVShaderResources*>(pRawMem.release()), STDDeleterRawMem<SPIRVShaderResources>(Allocator));

            if (LoadShaderInputs && m_pShaderResources->IsHLSLSource())
            {
                m_pShaderResources->MapHLSLVertexShaderInputs(m_SPIRV);
            }
        }
        else
        {
            m_EntryPoint = ShaderCI.EntryPoint;
        }

        m_Status.store(SHADER_STATUS_READY);
    }
}


ShaderVkImpl::ShaderVkImpl(IReferenceCounters*     pRefCounters,
                           RenderDeviceVkImpl*     pRenderDeviceVk,
                           const ShaderCreateInfo& ShaderCI,
                           const CreateInfo&       VkShaderCI,
                           bool                    IsDeviceInternal) :
    // clang-format off
    TShaderBase
    {
        pRefCounters,
        pRenderDeviceVk,
        ShaderCI.Desc,
        VkShaderCI.DeviceInfo,
        VkShaderCI.AdapterInfo,
        IsDeviceInternal
    }
// clang-format on
{
    m_Status.store(SHADER_STATUS_COMPILING);
    if (VkShaderCI.pCompilationThreadPool == nullptr || (ShaderCI.CompileFlags & SHADER_COMPILE_FLAG_ASYNCHRONOUS) == 0 || ShaderCI.ByteCode != nullptr)
    {
        Initialize(ShaderCI, VkShaderCI);
    }
    else
    {
        this->m_AsyncInitializer = AsyncInitializer::Start(
            VkShaderCI.pCompilationThreadPool,
            [this,
             ShaderCI         = ShaderCreateInfoWrapper{ShaderCI, GetRawAllocator()},
             pDXCompiler      = VkShaderCI.pDXCompiler,
             DeviceInfo       = VkShaderCI.DeviceInfo,
             AdapterInfo      = VkShaderCI.AdapterInfo,
             VkVersion        = VkShaderCI.VkVersion,
             HasSpirv14       = VkShaderCI.HasSpirv14,
             ppCompilerOutput = VkShaderCI.ppCompilerOutput](Uint32 ThreadId) mutable //
            {
                try
                {
                    const CreateInfo VkShaderCI{
                        pDXCompiler,
                        DeviceInfo,
                        AdapterInfo,
                        VkVersion,
                        HasSpirv14,
                        ppCompilerOutput,
                        nullptr,
                    };
                    Initialize(ShaderCI, VkShaderCI);
                }
                catch (...)
                {
                    m_Status.store(SHADER_STATUS_FAILED);
                }
                ShaderCI = ShaderCreateInfoWrapper{};
            });
    }
}

ShaderVkImpl::~ShaderVkImpl()
{
    // Make sure that asynchrous task is complete as it references the shader object.
    // This needs to be done in the final class before the destruction begins.
    GetStatus(/*WaitForCompletion = */ true);
}

void ShaderVkImpl::GetResourceDesc(Uint32 Index, ShaderResourceDesc& ResourceDesc) const
{
    DEV_CHECK_ERR(!IsCompiling(), "Shader resources are not available until the shader is compiled. Use GetStatus() to check the shader status.");

    auto ResCount = GetResourceCount();
    DEV_CHECK_ERR(Index < ResCount, "Resource index (", Index, ") is out of range");
    if (Index < ResCount)
    {
        const auto& SPIRVResource = m_pShaderResources->GetResource(Index);
        ResourceDesc              = SPIRVResource.GetResourceDesc();
    }
}

const ShaderCodeBufferDesc* ShaderVkImpl::GetConstantBufferDesc(Uint32 Index) const
{
    DEV_CHECK_ERR(!IsCompiling(), "Shader resources are not available until the shader is compiled. Use GetStatus() to check the shader status.");

    auto ResCount = GetResourceCount();
    if (Index >= ResCount)
    {
        UNEXPECTED("Resource index (", Index, ") is out of range");
        return nullptr;
    }

    // Uniform buffers always go first in the list of resources
    return m_pShaderResources->GetUniformBufferDesc(Index);
}

} // namespace Diligent
