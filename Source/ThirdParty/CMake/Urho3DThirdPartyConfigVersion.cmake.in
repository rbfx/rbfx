# Urho3DThirdPartyConfigVersion.cmake - Custom version file with platform compatibility checking

set(PACKAGE_VERSION "@URHO3D_THIRDPARTY_VERSION@")

# Platform compatibility check for Urho3DThirdParty
function(urho3d_thirdparty_check_platform_compatibility_version)
    set(CURRENT_PLATFORM_WIN32 FALSE)
    set(CURRENT_PLATFORM_LINUX FALSE)
    set(CURRENT_PLATFORM_ANDROID FALSE)
    set(CURRENT_PLATFORM_MACOS FALSE)
    set(CURRENT_PLATFORM_IOS FALSE)
    set(CURRENT_PLATFORM_TVOS FALSE)
    set(CURRENT_PLATFORM_EMSCRIPTEN FALSE)
    set(CURRENT_PLATFORM_UNIVERSAL_WINDOWS FALSE)

    # Detect current platform
    if(WIN32)
        if(CMAKE_SYSTEM_NAME STREQUAL "WindowsStore")
            set(CURRENT_PLATFORM_UNIVERSAL_WINDOWS TRUE)
        else()
            set(CURRENT_PLATFORM_WIN32 TRUE)
        endif()
    elseif(ANDROID)
        set(CURRENT_PLATFORM_ANDROID TRUE)
    elseif(EMSCRIPTEN)
        set(CURRENT_PLATFORM_EMSCRIPTEN TRUE)
    elseif(APPLE)
        if(CMAKE_SYSTEM_NAME STREQUAL "Darwin")
            set(CURRENT_PLATFORM_MACOS TRUE)
        elseif(CMAKE_SYSTEM_NAME STREQUAL "iOS")
            set(CURRENT_PLATFORM_IOS TRUE)
        elseif(CMAKE_SYSTEM_NAME STREQUAL "tvOS")
            set(CURRENT_PLATFORM_TVOS TRUE)
        endif()
    elseif(UNIX)
        set(CURRENT_PLATFORM_LINUX TRUE)
    endif()

    # Detect current CPU architecture
    set(CURRENT_ARCH "${CMAKE_SYSTEM_PROCESSOR}")
    # Normalize architecture names
    if(CURRENT_ARCH MATCHES "^(x86_64|AMD64|amd64|x64)$")
        set(CURRENT_ARCH "x86_64")
    elseif(CURRENT_ARCH MATCHES "^(i386|i686|x86|Win32)$")
        set(CURRENT_ARCH "x86")
    elseif(CURRENT_ARCH MATCHES "^(aarch64|arm64|ARM64)$")
        set(CURRENT_ARCH "aarch64")
    elseif(CURRENT_ARCH MATCHES "^(armv7|armv7l|armv7-a|ARM)$")
        set(CURRENT_ARCH "armv7")
    endif()

    # Check if current platform and architecture matches any supported platform
    set(PLATFORM_SUPPORTED FALSE)
    set(ARCH_MATCH FALSE)

    # Check architecture compatibility
    # Skip architecture check for Emscripten (WebAssembly is architecture-independent)
    if(CURRENT_PLATFORM_EMSCRIPTEN AND @PLATFORM_EMSCRIPTEN@)
        set(ARCH_MATCH TRUE)
    elseif(CURRENT_ARCH STREQUAL "@rbfx_SYSTEM_PROCESSOR@")
        set(ARCH_MATCH TRUE)
    endif()

    if(CURRENT_PLATFORM_WIN32 AND @PLATFORM_WIN32@ AND ARCH_MATCH)
        set(PLATFORM_SUPPORTED TRUE)
    elseif(CURRENT_PLATFORM_UNIVERSAL_WINDOWS AND @PLATFORM_UNIVERSAL_WINDOWS@ AND ARCH_MATCH)
        set(PLATFORM_SUPPORTED TRUE)
    elseif(CURRENT_PLATFORM_LINUX AND @PLATFORM_LINUX@ AND ARCH_MATCH)
        set(PLATFORM_SUPPORTED TRUE)
    elseif(CURRENT_PLATFORM_ANDROID AND @PLATFORM_ANDROID@ AND ARCH_MATCH)
        set(PLATFORM_SUPPORTED TRUE)
    elseif(CURRENT_PLATFORM_MACOS AND @PLATFORM_MACOS@ AND ARCH_MATCH)
        set(PLATFORM_SUPPORTED TRUE)
    elseif(CURRENT_PLATFORM_IOS AND @PLATFORM_IOS@ AND ARCH_MATCH)
        set(PLATFORM_SUPPORTED TRUE)
    elseif(CURRENT_PLATFORM_TVOS AND @PLATFORM_TVOS@ AND ARCH_MATCH)
        set(PLATFORM_SUPPORTED TRUE)
    elseif(CURRENT_PLATFORM_EMSCRIPTEN AND @PLATFORM_EMSCRIPTEN@ AND ARCH_MATCH)
        set(PLATFORM_SUPPORTED TRUE)
    endif()

    if(NOT PLATFORM_SUPPORTED)
        set(SUPPORTED_PLATFORMS "")
        if(@PLATFORM_WIN32@)
            list(APPEND SUPPORTED_PLATFORMS "Win32")
        endif()
        if(@PLATFORM_UNIVERSAL_WINDOWS@)
            list(APPEND SUPPORTED_PLATFORMS "UWP")
        endif()
        if(@PLATFORM_LINUX@)
            list(APPEND SUPPORTED_PLATFORMS "Linux")
        endif()
        if(@PLATFORM_ANDROID@)
            list(APPEND SUPPORTED_PLATFORMS "Android")
        endif()
        if(@PLATFORM_MACOS@)
            list(APPEND SUPPORTED_PLATFORMS "macOS")
        endif()
        if(@PLATFORM_IOS@)
            list(APPEND SUPPORTED_PLATFORMS "iOS")
        endif()
        if(@PLATFORM_TVOS@)
            list(APPEND SUPPORTED_PLATFORMS "tvOS")
        endif()
        if(@PLATFORM_EMSCRIPTEN@)
            list(APPEND SUPPORTED_PLATFORMS "Emscripten")
        endif()

        string(JOIN ", " SUPPORTED_PLATFORMS_STR ${SUPPORTED_PLATFORMS})
        set(PACKAGE_VERSION_UNSUITABLE TRUE PARENT_SCOPE)
        set(PACKAGE_VERSION_COMPATIBLE FALSE PARENT_SCOPE)
        if(NOT Urho3DThirdParty_FIND_QUIETLY)
            if(NOT ARCH_MATCH)
                message(STATUS "Urho3DThirdParty: CPU architecture mismatch. "
                              "Current: ${CURRENT_ARCH}, Required: @rbfx_SYSTEM_PROCESSOR@")
            else()
                message(STATUS "Urho3DThirdParty: Current platform is not compatible with this ThirdParty build. "
                              "Supported platforms: ${SUPPORTED_PLATFORMS_STR}")
            endif()
        endif()
        return()
    endif()

    # Platform is compatible, continue with version checking
    set(PACKAGE_VERSION_COMPATIBLE TRUE PARENT_SCOPE)
endfunction()

# Perform platform compatibility check
urho3d_thirdparty_check_platform_compatibility_version()

# Only do version checking if platform is compatible
if(PACKAGE_VERSION_COMPATIBLE)
    # For ThirdParty hash-based versioning, require exact match
    # Hash-based versions don't have semantic meaning, so only exact matches are valid
    if(PACKAGE_FIND_VERSION AND NOT PACKAGE_FIND_VERSION STREQUAL PACKAGE_VERSION)
        set(PACKAGE_VERSION_COMPATIBLE FALSE)
    endif()

    if (PACKAGE_FIND_VERSION STREQUAL PACKAGE_VERSION)
        set(PACKAGE_VERSION_EXACT TRUE)
    endif()
endif()
