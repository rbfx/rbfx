// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace ActionGenerator.Templates
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using ActionGenerator.Model;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\github\rbfx3\Source\Tools\ActionGenerator\Templates\CppTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public partial class CppTemplate : CppTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("//\r\n// Copyright (c) 2015 Xamarin Inc.\r\n// Copyright (c) 2022-2023 the rbfx proje" +
                    "ct.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtainin" +
                    "g a copy\r\n// of this software and associated documentation files (the \"Software\"" +
                    "), to deal\r\n// in the Software without restriction, including without limitation" +
                    " the rights\r\n// to use, copy, modify, merge, publish, distribute, sublicense, an" +
                    "d/or sell\r\n// copies of the Software, and to permit persons to whom the Software" +
                    " is\r\n// furnished to do so, subject to the following conditions:\r\n//\r\n// The abo" +
                    "ve copyright notice and this permission notice shall be included in\r\n// all copi" +
                    "es or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS" +
                    " IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n// IMPLIED, INCLUDING BUT NOT LI" +
                    "MITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n// FITNESS FOR A PARTICULAR PURPOSE" +
                    " AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n// AUTHORS OR COPYRIGHT HOLDERS BE " +
                    "LIABLE FOR ANY CLAIM, DAMAGES OR rhs\r\n// LIABILITY, WHETHER IN AN ACTION OF CONT" +
                    "RACT, TORT OR rhsWISE, ARISING FROM,\r\n// OUT OF OR IN CONNECTION WITH THE SOFTWA" +
                    "RE OR THE USE OR rhs DEALINGS IN\r\n// THE SOFTWARE.\r\n//\r\n\r\n#include \"../Precompil" +
                    "ed.h\"\r\n\r\n#include \"Urho3D/Actions/Actions.h\"\r\n#include \"Urho3D/Actions/ActionMan" +
                    "ager.h\"\r\n#include \"Urho3D/Actions/ActionStates.h\"\r\n#include \"Urho3D/IO/ArchiveSe" +
                    "rializationBasic.h\"\r\n#include \"Urho3D/Resource/GraphNode.h\"\r\n\r\nnamespace Urho3D\r" +
                    "\n{\r\nnamespace Actions\r\n{\r\n\r\nvoid RegisterActions(ActionManager* manager)\r\n{\r\n");
            
            #line 45 "C:\github\rbfx3\Source\Tools\ActionGenerator\Templates\CppTemplate.tt"

var sortedActions = _definition.Actions.OrderBy(_=>_.Key).ToList();

foreach (var actionKeyValue in sortedActions)
{
    var className = actionKeyValue.Key;

            
            #line default
            #line hidden
            this.Write("    manager->AddFactoryReflection<");
            
            #line 52 "C:\github\rbfx3\Source\Tools\ActionGenerator\Templates\CppTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(className));
            
            #line default
            #line hidden
            this.Write(">();\r\n");
            
            #line 53 "C:\github\rbfx3\Source\Tools\ActionGenerator\Templates\CppTemplate.tt"

}

            
            #line default
            #line hidden
            this.Write("}\r\n\r\n");
            
            #line 58 "C:\github\rbfx3\Source\Tools\ActionGenerator\Templates\CppTemplate.tt"
 foreach (var actionKeyValue in sortedActions)
{
    var action = actionKeyValue.Value;
    var className = actionKeyValue.Key;

            
            #line default
            #line hidden
            this.Write("\r\n/// Construct.\r\n");
            
            #line 65 "C:\github\rbfx3\Source\Tools\ActionGenerator\Templates\CppTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(className));
            
            #line default
            #line hidden
            this.Write("::");
            
            #line 65 "C:\github\rbfx3\Source\Tools\ActionGenerator\Templates\CppTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(className));
            
            #line default
            #line hidden
            this.Write("(Context* context)\r\n    : BaseClassName(context)\r\n{\r\n");
            
            #line 68 "C:\github\rbfx3\Source\Tools\ActionGenerator\Templates\CppTemplate.tt"

foreach (var parameter in action.Parameters)
{
    if (parameter.Inherited && !string.IsNullOrEmpty(parameter.DefaultValue))
    {

            
            #line default
            #line hidden
            this.Write("    Set");
            
            #line 74 "C:\github\rbfx3\Source\Tools\ActionGenerator\Templates\CppTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Util.Camel(parameter.Name)));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 74 "C:\github\rbfx3\Source\Tools\ActionGenerator\Templates\CppTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Util.GetValue(parameter.DefaultValue, parameter.Type)));
            
            #line default
            #line hidden
            this.Write(");\r\n");
            
            #line 75 "C:\github\rbfx3\Source\Tools\ActionGenerator\Templates\CppTemplate.tt"

    }
}

            
            #line default
            #line hidden
            this.Write("}\r\n\r\n/// Create new action state from the action.\r\nSharedPtr<ActionState> ");
            
            #line 82 "C:\github\rbfx3\Source\Tools\ActionGenerator\Templates\CppTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(className));
            
            #line default
            #line hidden
            this.Write("::StartAction(Object* target) { return MakeShared<Detail::");
            
            #line 82 "C:\github\rbfx3\Source\Tools\ActionGenerator\Templates\CppTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(className));
            
            #line default
            #line hidden
            this.Write("State>(this, target); }\r\n\r\n");
            
            #line 84 "C:\github\rbfx3\Source\Tools\ActionGenerator\Templates\CppTemplate.tt"

if (!action.CustomReverse)
{

            
            #line default
            #line hidden
            this.Write("\r\n/// Create reversed action.\r\nSharedPtr<FiniteTimeAction> ");
            
            #line 90 "C:\github\rbfx3\Source\Tools\ActionGenerator\Templates\CppTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(className));
            
            #line default
            #line hidden
            this.Write("::Reverse() const\r\n{\r\n    auto action = MakeShared<");
            
            #line 92 "C:\github\rbfx3\Source\Tools\ActionGenerator\Templates\CppTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(className));
            
            #line default
            #line hidden
            this.Write(">(context_);\r\n    ReverseImpl(action);\r\n    return action;\r\n}\r\n");
            
            #line 96 "C:\github\rbfx3\Source\Tools\ActionGenerator\Templates\CppTemplate.tt"

}

if (action.ThisParameters.Count > 0)
{
bool hasInnerActions = action.ThisParameters.Any(_=>_.Type == ParameterType.FiniteTimeAction);

foreach (var parameter in action.ThisParameters)
{

            
            #line default
            #line hidden
            this.Write("\r\n/// Set ");
            
            #line 107 "C:\github\rbfx3\Source\Tools\ActionGenerator\Templates\CppTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.Name));
            
            #line default
            #line hidden
            this.Write(".\r\nvoid ");
            
            #line 108 "C:\github\rbfx3\Source\Tools\ActionGenerator\Templates\CppTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(className));
            
            #line default
            #line hidden
            this.Write("::Set");
            
            #line 108 "C:\github\rbfx3\Source\Tools\ActionGenerator\Templates\CppTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Util.Camel(parameter.Name)));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 108 "C:\github\rbfx3\Source\Tools\ActionGenerator\Templates\CppTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Util.CppTypeRef(parameter.Type)));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 108 "C:\github\rbfx3\Source\Tools\ActionGenerator\Templates\CppTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Util.ArgName(parameter.Name)));
            
            #line default
            #line hidden
            this.Write(")\r\n{\r\n    ");
            
            #line 110 "C:\github\rbfx3\Source\Tools\ActionGenerator\Templates\CppTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Util.ArgName(parameter.Name)));
            
            #line default
            #line hidden
            this.Write("_ = ");
            
            #line 110 "C:\github\rbfx3\Source\Tools\ActionGenerator\Templates\CppTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Util.ArgName(parameter.Name)));
            
            #line default
            #line hidden
            this.Write(";\r\n");
            
            #line 111 "C:\github\rbfx3\Source\Tools\ActionGenerator\Templates\CppTemplate.tt"

if (parameter.Type == ParameterType.FiniteTimeAction)
{

            
            #line default
            #line hidden
            this.Write("    SetDuration(GetDuration());\r\n");
            
            #line 116 "C:\github\rbfx3\Source\Tools\ActionGenerator\Templates\CppTemplate.tt"

}

            
            #line default
            #line hidden
            this.Write("}\r\n\r\n");
            
            #line 121 "C:\github\rbfx3\Source\Tools\ActionGenerator\Templates\CppTemplate.tt"

}

            
            #line default
            #line hidden
            this.Write("\r\n/// Serialize content from/to archive. May throw ArchiveException.\r\nvoid ");
            
            #line 126 "C:\github\rbfx3\Source\Tools\ActionGenerator\Templates\CppTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(className));
            
            #line default
            #line hidden
            this.Write("::SerializeInBlock(Archive& archive)\r\n{\r\n    BaseClassName::SerializeInBlock(arch" +
                    "ive);\r\n");
            
            #line 129 "C:\github\rbfx3\Source\Tools\ActionGenerator\Templates\CppTemplate.tt"

foreach (var parameter in action.ThisParameters)
{

            
            #line default
            #line hidden
            this.Write("    SerializeOptionalValue(archive, \"");
            
            #line 133 "C:\github\rbfx3\Source\Tools\ActionGenerator\Templates\CppTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Util.ArgName(parameter.Name)));
            
            #line default
            #line hidden
            this.Write("\", ");
            
            #line 133 "C:\github\rbfx3\Source\Tools\ActionGenerator\Templates\CppTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Util.ArgName(parameter.Name)));
            
            #line default
            #line hidden
            this.Write("_, ");
            
            #line 133 "C:\github\rbfx3\Source\Tools\ActionGenerator\Templates\CppTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Util.CppType(parameter.Type)));
            
            #line default
            #line hidden
            this.Write("{");
            
            #line 133 "C:\github\rbfx3\Source\Tools\ActionGenerator\Templates\CppTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.DefaultValue));
            
            #line default
            #line hidden
            this.Write("});\r\n");
            
            #line 134 "C:\github\rbfx3\Source\Tools\ActionGenerator\Templates\CppTemplate.tt"

}

            
            #line default
            #line hidden
            this.Write("}\r\n\r\nGraphNode* ");
            
            #line 139 "C:\github\rbfx3\Source\Tools\ActionGenerator\Templates\CppTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(className));
            
            #line default
            #line hidden
            this.Write("::ToGraphNode(Graph* graph) const\r\n{\r\n    return BaseClassName::ToGraphNode(graph" +
                    ")");
            
            #line 141 "C:\github\rbfx3\Source\Tools\ActionGenerator\Templates\CppTemplate.tt"

foreach (var parameter in action.ThisParameters)
{
var paramName = Util.ArgName(parameter.Name);
if (parameter.Type == ParameterType.Variant)
{

            
            #line default
            #line hidden
            this.Write("->WithAnyInput(\"");
            
            #line 147 "C:\github\rbfx3\Source\Tools\ActionGenerator\Templates\CppTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(paramName));
            
            #line default
            #line hidden
            this.Write("\", ");
            
            #line 147 "C:\github\rbfx3\Source\Tools\ActionGenerator\Templates\CppTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(paramName));
            
            #line default
            #line hidden
            this.Write("_)");
            
            #line 147 "C:\github\rbfx3\Source\Tools\ActionGenerator\Templates\CppTemplate.tt"

}
else if (parameter.Type != ParameterType.FiniteTimeAction)
{

            
            #line default
            #line hidden
            this.Write("->WithInput(\"");
            
            #line 151 "C:\github\rbfx3\Source\Tools\ActionGenerator\Templates\CppTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(paramName));
            
            #line default
            #line hidden
            this.Write("\", ");
            
            #line 151 "C:\github\rbfx3\Source\Tools\ActionGenerator\Templates\CppTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(paramName));
            
            #line default
            #line hidden
            this.Write("_)");
            
            #line 151 "C:\github\rbfx3\Source\Tools\ActionGenerator\Templates\CppTemplate.tt"

}
else
{

            
            #line default
            #line hidden
            this.Write("->WithExit(\"");
            
            #line 155 "C:\github\rbfx3\Source\Tools\ActionGenerator\Templates\CppTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(paramName));
            
            #line default
            #line hidden
            this.Write("\", ");
            
            #line 155 "C:\github\rbfx3\Source\Tools\ActionGenerator\Templates\CppTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(paramName));
            
            #line default
            #line hidden
            this.Write("_ ? ");
            
            #line 155 "C:\github\rbfx3\Source\Tools\ActionGenerator\Templates\CppTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(paramName));
            
            #line default
            #line hidden
            this.Write("_->ToGraphNode(graph)->GetEnter(0) : GraphPinRef<GraphEnterPin>{})");
            
            #line 155 "C:\github\rbfx3\Source\Tools\ActionGenerator\Templates\CppTemplate.tt"

}
}

            
            #line default
            #line hidden
            this.Write(";\r\n}\r\n\r\nvoid ");
            
            #line 161 "C:\github\rbfx3\Source\Tools\ActionGenerator\Templates\CppTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(className));
            
            #line default
            #line hidden
            this.Write("::FromGraphNode(GraphNode* node)\r\n{\r\n    BaseClassName::FromGraphNode(node);\r\n");
            
            #line 164 "C:\github\rbfx3\Source\Tools\ActionGenerator\Templates\CppTemplate.tt"

foreach (var parameter in action.ThisParameters)
{
    var argName = Util.ArgName(parameter.Name);
if (parameter.Type != ParameterType.FiniteTimeAction)
{

            
            #line default
            #line hidden
            this.Write("    if (const auto ");
            
            #line 171 "C:\github\rbfx3\Source\Tools\ActionGenerator\Templates\CppTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(argName));
            
            #line default
            #line hidden
            this.Write(" = node->GetInput(\"");
            
            #line 171 "C:\github\rbfx3\Source\Tools\ActionGenerator\Templates\CppTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(argName));
            
            #line default
            #line hidden
            this.Write("\"))\r\n    {\r\n        ");
            
            #line 173 "C:\github\rbfx3\Source\Tools\ActionGenerator\Templates\CppTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(argName));
            
            #line default
            #line hidden
            this.Write("_ = ");
            
            #line 173 "C:\github\rbfx3\Source\Tools\ActionGenerator\Templates\CppTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(argName));
            
            #line default
            #line hidden
            this.Write(".GetPin()->GetValue()");
            
            #line 173 "C:\github\rbfx3\Source\Tools\ActionGenerator\Templates\CppTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Util.FromVariant(parameter.Type)));
            
            #line default
            #line hidden
            this.Write(";\r\n    }\r\n");
            
            #line 175 "C:\github\rbfx3\Source\Tools\ActionGenerator\Templates\CppTemplate.tt"

}
else
{

            
            #line default
            #line hidden
            this.Write("    if (const auto ");
            
            #line 180 "C:\github\rbfx3\Source\Tools\ActionGenerator\Templates\CppTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(argName));
            
            #line default
            #line hidden
            this.Write(" = node->GetExit(\"");
            
            #line 180 "C:\github\rbfx3\Source\Tools\ActionGenerator\Templates\CppTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(argName));
            
            #line default
            #line hidden
            this.Write("\"))\r\n    {\r\n        const auto internalAction = MakeActionFromGraphNode(");
            
            #line 182 "C:\github\rbfx3\Source\Tools\ActionGenerator\Templates\CppTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(argName));
            
            #line default
            #line hidden
            this.Write(".GetConnectedPin<GraphEnterPin>().GetNode());\r\n        ");
            
            #line 183 "C:\github\rbfx3\Source\Tools\ActionGenerator\Templates\CppTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(argName));
            
            #line default
            #line hidden
            this.Write("_.DynamicCast(internalAction);\r\n    }\r\n");
            
            #line 185 "C:\github\rbfx3\Source\Tools\ActionGenerator\Templates\CppTemplate.tt"

}
}

            
            #line default
            #line hidden
            this.Write("}\r\n\r\n");
            
            #line 191 "C:\github\rbfx3\Source\Tools\ActionGenerator\Templates\CppTemplate.tt"

}
}

            
            #line default
            #line hidden
            this.Write("\r\n} // namespace Actions\r\n} // namespace Urho3D\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public class CppTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
