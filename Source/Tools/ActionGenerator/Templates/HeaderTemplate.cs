// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace ActionGenerator.Templates
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using ActionGenerator.Model;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\github\rbfx3\Source\Tools\ActionGenerator\Templates\HeaderTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public partial class HeaderTemplate : HeaderTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write(@"//
// Copyright (c) 2015 Xamarin Inc.
// Copyright (c) 2022-2023 the rbfx project.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the ""Software""), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR rhs
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR rhsWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR rhs DEALINGS IN
// THE SOFTWARE.
//

#pragma once

#include ""Urho3D/Actions/FiniteTimeAction.h""
#include ""Urho3D/Actions/AttributeAction.h""

namespace Urho3D
{
namespace Actions
{
");
            
            #line 39 "C:\github\rbfx3\Source\Tools\ActionGenerator\Templates\HeaderTemplate.tt"
 foreach (var actionKeyValue in _definition.Actions)
{
    var action = actionKeyValue.Value;
    var className = actionKeyValue.Key;

            
            #line default
            #line hidden
            this.Write("/// ");
            
            #line 44 "C:\github\rbfx3\Source\Tools\ActionGenerator\Templates\HeaderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(action.Comment));
            
            #line default
            #line hidden
            this.Write("\r\nclass URHO3D_API ");
            
            #line 45 "C:\github\rbfx3\Source\Tools\ActionGenerator\Templates\HeaderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(className));
            
            #line default
            #line hidden
            this.Write(" : public  ");
            
            #line 45 "C:\github\rbfx3\Source\Tools\ActionGenerator\Templates\HeaderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(action.Parent));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n    URHO3D_OBJECT(");
            
            #line 47 "C:\github\rbfx3\Source\Tools\ActionGenerator\Templates\HeaderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(className));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 47 "C:\github\rbfx3\Source\Tools\ActionGenerator\Templates\HeaderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(action.Parent));
            
            #line default
            #line hidden
            this.Write(")\r\npublic:\r\n    /// Construct.\r\n    explicit ");
            
            #line 50 "C:\github\rbfx3\Source\Tools\ActionGenerator\Templates\HeaderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(className));
            
            #line default
            #line hidden
            this.Write("(Context* context);\r\n\r\n    /// Create reversed action.\r\n    SharedPtr<FiniteTimeA" +
                    "ction> Reverse() const override;\r\n");
            
            #line 54 "C:\github\rbfx3\Source\Tools\ActionGenerator\Templates\HeaderTemplate.tt"

if (action.ThisParameters.Count > 0)
{

if (action.ThisParameters.Any(_=>_.Type == ParameterType.FiniteTimeAction))
{

            
            #line default
            #line hidden
            this.Write("\r\n    /// Get action duration.\r\n    float GetDuration() const override;\r\n");
            
            #line 64 "C:\github\rbfx3\Source\Tools\ActionGenerator\Templates\HeaderTemplate.tt"

}

foreach (var parameter in action.ThisParameters)
{

            
            #line default
            #line hidden
            this.Write("\r\n    /// Set ");
            
            #line 71 "C:\github\rbfx3\Source\Tools\ActionGenerator\Templates\HeaderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.Name));
            
            #line default
            #line hidden
            this.Write(".\r\n    void Set");
            
            #line 72 "C:\github\rbfx3\Source\Tools\ActionGenerator\Templates\HeaderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Util.Camel(parameter.Name)));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 72 "C:\github\rbfx3\Source\Tools\ActionGenerator\Templates\HeaderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Util.CppTypeRef(parameter.Type)));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 72 "C:\github\rbfx3\Source\Tools\ActionGenerator\Templates\HeaderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Util.ArgName(parameter.Name)));
            
            #line default
            #line hidden
            this.Write(");\r\n\r\n    /// Get ");
            
            #line 74 "C:\github\rbfx3\Source\Tools\ActionGenerator\Templates\HeaderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.Name));
            
            #line default
            #line hidden
            this.Write(".\r\n    ");
            
            #line 75 "C:\github\rbfx3\Source\Tools\ActionGenerator\Templates\HeaderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Util.CppTypeRef(parameter.Type)));
            
            #line default
            #line hidden
            this.Write(" Get");
            
            #line 75 "C:\github\rbfx3\Source\Tools\ActionGenerator\Templates\HeaderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Util.Camel(parameter.Name)));
            
            #line default
            #line hidden
            this.Write("() const { return ");
            
            #line 75 "C:\github\rbfx3\Source\Tools\ActionGenerator\Templates\HeaderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Util.ArgName(parameter.Name)));
            
            #line default
            #line hidden
            this.Write("_; }\r\n");
            
            #line 76 "C:\github\rbfx3\Source\Tools\ActionGenerator\Templates\HeaderTemplate.tt"

}

            
            #line default
            #line hidden
            this.Write(@"
    /// Serialize content from/to archive. May throw ArchiveException.
    void SerializeInBlock(Archive& archive) override;

    /// Create GraphNode from the action. Required for action editor.
    GraphNode* ToGraphNode(Graph* graph) const override;

    /// Initialize action from GraphNode. Required for action editor.
    void FromGraphNode(GraphNode* node) override;
");
            
            #line 88 "C:\github\rbfx3\Source\Tools\ActionGenerator\Templates\HeaderTemplate.tt"

}

            
            #line default
            #line hidden
            this.Write("protected:\r\n    /// Create new action state from the action.\r\n    SharedPtr<Actio" +
                    "nState> StartAction(Object* target) override;\r\n");
            
            #line 94 "C:\github\rbfx3\Source\Tools\ActionGenerator\Templates\HeaderTemplate.tt"

if (action.ThisParameters.Count > 0 && !action.CustomReverse)
{

            
            #line default
            #line hidden
            this.Write("\r\n    /// Populate fields in reversed action.\r\n    void ReverseImpl(FiniteTimeAct" +
                    "ion*) const override;\r\n");
            
            #line 101 "C:\github\rbfx3\Source\Tools\ActionGenerator\Templates\HeaderTemplate.tt"

}

            
            #line default
            #line hidden
            this.Write("\r\nprivate:\r\n");
            
            #line 106 "C:\github\rbfx3\Source\Tools\ActionGenerator\Templates\HeaderTemplate.tt"

foreach (var parameter in action.ThisParameters)
{

            
            #line default
            #line hidden
            this.Write("    ");
            
            #line 110 "C:\github\rbfx3\Source\Tools\ActionGenerator\Templates\HeaderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Util.CppType(parameter.Type)));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 110 "C:\github\rbfx3\Source\Tools\ActionGenerator\Templates\HeaderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Util.ArgName(parameter.Name)));
            
            #line default
            #line hidden
            this.Write("_{");
            
            #line 110 "C:\github\rbfx3\Source\Tools\ActionGenerator\Templates\HeaderTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameter.DefaultValue));
            
            #line default
            #line hidden
            this.Write("};\r\n");
            
            #line 111 "C:\github\rbfx3\Source\Tools\ActionGenerator\Templates\HeaderTemplate.tt"

}

            
            #line default
            #line hidden
            this.Write("};\r\n\r\n");
            
            #line 116 "C:\github\rbfx3\Source\Tools\ActionGenerator\Templates\HeaderTemplate.tt"

}

            
            #line default
            #line hidden
            this.Write("\r\nvoid RegisterActions(ActionManager* manager);\r\n\r\n} // namespace Actions\r\n} // n" +
                    "amespace Urho3D\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public class HeaderTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
