<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="ActionGenerator.Model" #>
//
// Copyright (c) 2015 Xamarin Inc.
// Copyright (c) 2022-2023 the rbfx project.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR rhs
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR rhsWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR rhs DEALINGS IN
// THE SOFTWARE.
//

#include "../Precompiled.h"

#include "Urho3D/Actions/Actions.h"
#include "Urho3D/Actions/ActionManager.h"
#include "Urho3D/Actions/ActionStates.h"
#include "Urho3D/IO/ArchiveSerializationBasic.h"
#include "Urho3D/Resource/GraphNode.h"

namespace Urho3D
{
namespace Actions
{

void RegisterActions(ActionManager* manager)
{
<#
var sortedActions = _definition.Actions.OrderBy(_=>_.Key).ToList();

foreach (var actionKeyValue in sortedActions)
{
    var className = actionKeyValue.Key;
#>
    manager->AddFactoryReflection<<#=className#>>();
<#
}
#>
}

<# foreach (var actionKeyValue in sortedActions)
{
    var action = actionKeyValue.Value;
    var className = actionKeyValue.Key;
#>

/// Construct.
<#=className#>::<#=className#>(Context* context)
    : BaseClassName(context)
{
<#
foreach (var parameter in action.Parameters)
{
    if (parameter.Inherited && !string.IsNullOrEmpty(parameter.DefaultValue))
    {
#>
    Set<#=Util.Camel(parameter.Name)#>(<#=Util.GetValue(parameter.DefaultValue, parameter.Type)#>);
<#
    }
}
#>
}

/// Create new action state from the action.
SharedPtr<ActionState> <#=className#>::StartAction(Object* target) { return MakeShared<Detail::<#=className#>State>(this, target); }

<#
if (!action.CustomReverse)
{
#>

/// Create reversed action.
SharedPtr<FiniteTimeAction> <#=className#>::Reverse() const
{
    auto action = MakeShared<<#=className#>>(context_);
    ReverseImpl(action);
    return action;
}
<#
}

if (action.ThisParameters.Count > 0)
{
bool hasInnerActions = action.ThisParameters.Any(_=>_.Type == ParameterType.FiniteTimeAction);

foreach (var parameter in action.ThisParameters)
{
#>

/// Set <#=parameter.Name#>.
void <#=className#>::Set<#=Util.Camel(parameter.Name)#>(<#=Util.CppTypeRef(parameter.Type)#> <#=Util.ArgName(parameter.Name)#>)
{
    <#=Util.ArgName(parameter.Name)#>_ = <#=Util.ArgName(parameter.Name)#>;
<#
if (parameter.Type == ParameterType.FiniteTimeAction)
{
#>
    SetDuration(GetDuration());
<#
}
#>
}

<#
}
#>

/// Serialize content from/to archive. May throw ArchiveException.
void <#=className#>::SerializeInBlock(Archive& archive)
{
    BaseClassName::SerializeInBlock(archive);
<#
foreach (var parameter in action.ThisParameters)
{
#>
    SerializeOptionalValue(archive, "<#=Util.ArgName(parameter.Name)#>", <#=Util.ArgName(parameter.Name)#>_, <#=Util.CppType(parameter.Type)#>{<#=parameter.DefaultValue#>});
<#
}
#>
}

GraphNode* <#=className#>::ToGraphNode(Graph* graph) const
{
    return BaseClassName::ToGraphNode(graph)<#
foreach (var parameter in action.ThisParameters)
{
var paramName = Util.ArgName(parameter.Name);
if (parameter.Type == ParameterType.Variant)
{
#>->WithAnyInput("<#=paramName#>", <#=paramName#>_)<#
}
else if (parameter.Type != ParameterType.FiniteTimeAction)
{
#>->WithInput("<#=paramName#>", <#=paramName#>_)<#
}
else
{
#>->WithExit("<#=paramName#>", <#=paramName#>_ ? <#=paramName#>_->ToGraphNode(graph)->GetEnter(0) : GraphPinRef<GraphEnterPin>{})<#
}
}
#>;
}

void <#=className#>::FromGraphNode(GraphNode* node)
{
    BaseClassName::FromGraphNode(node);
<#
foreach (var parameter in action.ThisParameters)
{
    var argName = Util.ArgName(parameter.Name);
if (parameter.Type != ParameterType.FiniteTimeAction)
{
#>
    if (const auto <#=argName#> = node->GetInput("<#=argName#>"))
    {
        <#=argName#>_ = <#=argName#>.GetPin()->GetValue()<#=Util.FromVariant(parameter.Type)#>;
    }
<#
}
else
{
#>
    if (const auto <#=argName#> = node->GetExit("<#=argName#>"))
    {
        const auto internalAction = MakeActionFromGraphNode(<#=argName#>.GetConnectedPin<GraphEnterPin>().GetNode());
        <#=argName#>_.DynamicCast(internalAction);
    }
<#
}
}
#>
}

<#
}
}
#>

} // namespace Actions
} // namespace Urho3D
